
STM32_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e34  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006138  08006138  00016138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006140  08006140  00016140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006144  08006144  00016144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08006148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08006158  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  080061b8  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  240000d0  08006218  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240002cc  08006218  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b452  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298e  00000000  00000000  0003b550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  0003dee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  0003ec80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032891  00000000  00000000  0003f968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffec  00000000  00000000  000721f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001490fd  00000000  00000000  000821e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cb2e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000393c  00000000  00000000  001cb338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	080060e8 	.word	0x080060e8

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	080060e8 	.word	0x080060e8

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96e 	b.w	8000600 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468c      	mov	ip, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8083 	bne.w	8000452 <__udivmoddi4+0x116>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d947      	bls.n	80003e2 <__udivmoddi4+0xa6>
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b142      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000358:	f1c2 0020 	rsb	r0, r2, #32
 800035c:	fa24 f000 	lsr.w	r0, r4, r0
 8000360:	4091      	lsls	r1, r2
 8000362:	4097      	lsls	r7, r2
 8000364:	ea40 0c01 	orr.w	ip, r0, r1
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbbc f6f8 	udiv	r6, ip, r8
 8000374:	fa1f fe87 	uxth.w	lr, r7
 8000378:	fb08 c116 	mls	r1, r8, r6, ip
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f10e 	mul.w	r1, r6, lr
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295
 800038e:	f080 8119 	bcs.w	80005c4 <__udivmoddi4+0x288>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8116 	bls.w	80005c4 <__udivmoddi4+0x288>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	f080 8105 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8102 	bls.w	80005c8 <__udivmoddi4+0x28c>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xaa>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d150      	bne.n	8000490 <__udivmoddi4+0x154>
 80003ee:	1bcb      	subs	r3, r1, r7
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	2601      	movs	r6, #1
 80003fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fe:	0c21      	lsrs	r1, r4, #16
 8000400:	fb0e 331c 	mls	r3, lr, ip, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb08 f30c 	mul.w	r3, r8, ip
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0xe2>
 8000418:	428b      	cmp	r3, r1
 800041a:	f200 80e9 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 800041e:	4684      	mov	ip, r0
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	b2a3      	uxth	r3, r4
 8000424:	fbb1 f0fe 	udiv	r0, r1, lr
 8000428:	fb0e 1110 	mls	r1, lr, r0, r1
 800042c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000430:	fb08 f800 	mul.w	r8, r8, r0
 8000434:	45a0      	cmp	r8, r4
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x10c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x10a>
 8000440:	45a0      	cmp	r8, r4
 8000442:	f200 80d9 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 8000446:	4618      	mov	r0, r3
 8000448:	eba4 0408 	sub.w	r4, r4, r8
 800044c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000450:	e7bf      	b.n	80003d2 <__udivmoddi4+0x96>
 8000452:	428b      	cmp	r3, r1
 8000454:	d909      	bls.n	800046a <__udivmoddi4+0x12e>
 8000456:	2d00      	cmp	r5, #0
 8000458:	f000 80b1 	beq.w	80005be <__udivmoddi4+0x282>
 800045c:	2600      	movs	r6, #0
 800045e:	e9c5 0100 	strd	r0, r1, [r5]
 8000462:	4630      	mov	r0, r6
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	fab3 f683 	clz	r6, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d14a      	bne.n	8000508 <__udivmoddi4+0x1cc>
 8000472:	428b      	cmp	r3, r1
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0x140>
 8000476:	4282      	cmp	r2, r0
 8000478:	f200 80b8 	bhi.w	80005ec <__udivmoddi4+0x2b0>
 800047c:	1a84      	subs	r4, r0, r2
 800047e:	eb61 0103 	sbc.w	r1, r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	468c      	mov	ip, r1
 8000486:	2d00      	cmp	r5, #0
 8000488:	d0a8      	beq.n	80003dc <__udivmoddi4+0xa0>
 800048a:	e9c5 4c00 	strd	r4, ip, [r5]
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f603 	lsr.w	r6, r0, r3
 8000498:	4097      	lsls	r7, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a2:	40d9      	lsrs	r1, r3
 80004a4:	4330      	orrs	r0, r6
 80004a6:	0c03      	lsrs	r3, r0, #16
 80004a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f108 	mul.w	r1, r6, r8
 80004bc:	4299      	cmp	r1, r3
 80004be:	fa04 f402 	lsl.w	r4, r4, r2
 80004c2:	d909      	bls.n	80004d8 <__udivmoddi4+0x19c>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ca:	f080 808d 	bcs.w	80005e8 <__udivmoddi4+0x2ac>
 80004ce:	4299      	cmp	r1, r3
 80004d0:	f240 808a 	bls.w	80005e8 <__udivmoddi4+0x2ac>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	443b      	add	r3, r7
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b281      	uxth	r1, r0
 80004dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb00 f308 	mul.w	r3, r0, r8
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x1c4>
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f6:	d273      	bcs.n	80005e0 <__udivmoddi4+0x2a4>
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d971      	bls.n	80005e0 <__udivmoddi4+0x2a4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4439      	add	r1, r7
 8000500:	1acb      	subs	r3, r1, r3
 8000502:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000506:	e778      	b.n	80003fa <__udivmoddi4+0xbe>
 8000508:	f1c6 0c20 	rsb	ip, r6, #32
 800050c:	fa03 f406 	lsl.w	r4, r3, r6
 8000510:	fa22 f30c 	lsr.w	r3, r2, ip
 8000514:	431c      	orrs	r4, r3
 8000516:	fa20 f70c 	lsr.w	r7, r0, ip
 800051a:	fa01 f306 	lsl.w	r3, r1, r6
 800051e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000522:	fa21 f10c 	lsr.w	r1, r1, ip
 8000526:	431f      	orrs	r7, r3
 8000528:	0c3b      	lsrs	r3, r7, #16
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fa1f f884 	uxth.w	r8, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053a:	fb09 fa08 	mul.w	sl, r9, r8
 800053e:	458a      	cmp	sl, r1
 8000540:	fa02 f206 	lsl.w	r2, r2, r6
 8000544:	fa00 f306 	lsl.w	r3, r0, r6
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x220>
 800054a:	1861      	adds	r1, r4, r1
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	d248      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 8000552:	458a      	cmp	sl, r1
 8000554:	d946      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	4421      	add	r1, r4
 800055c:	eba1 010a 	sub.w	r1, r1, sl
 8000560:	b2bf      	uxth	r7, r7
 8000562:	fbb1 f0fe 	udiv	r0, r1, lr
 8000566:	fb0e 1110 	mls	r1, lr, r0, r1
 800056a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45b8      	cmp	r8, r7
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x24a>
 8000576:	19e7      	adds	r7, r4, r7
 8000578:	f100 31ff 	add.w	r1, r0, #4294967295
 800057c:	d22e      	bcs.n	80005dc <__udivmoddi4+0x2a0>
 800057e:	45b8      	cmp	r8, r7
 8000580:	d92c      	bls.n	80005dc <__udivmoddi4+0x2a0>
 8000582:	3802      	subs	r0, #2
 8000584:	4427      	add	r7, r4
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba7 0708 	sub.w	r7, r7, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454f      	cmp	r7, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	4649      	mov	r1, r9
 8000598:	d31a      	bcc.n	80005d0 <__udivmoddi4+0x294>
 800059a:	d017      	beq.n	80005cc <__udivmoddi4+0x290>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x27a>
 800059e:	ebb3 020e 	subs.w	r2, r3, lr
 80005a2:	eb67 0701 	sbc.w	r7, r7, r1
 80005a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005aa:	40f2      	lsrs	r2, r6
 80005ac:	ea4c 0202 	orr.w	r2, ip, r2
 80005b0:	40f7      	lsrs	r7, r6
 80005b2:	e9c5 2700 	strd	r2, r7, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e70b      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e9      	b.n	800039c <__udivmoddi4+0x60>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6fd      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005cc:	4543      	cmp	r3, r8
 80005ce:	d2e5      	bcs.n	800059c <__udivmoddi4+0x260>
 80005d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d4:	eb69 0104 	sbc.w	r1, r9, r4
 80005d8:	3801      	subs	r0, #1
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0x260>
 80005dc:	4608      	mov	r0, r1
 80005de:	e7d2      	b.n	8000586 <__udivmoddi4+0x24a>
 80005e0:	4660      	mov	r0, ip
 80005e2:	e78d      	b.n	8000500 <__udivmoddi4+0x1c4>
 80005e4:	4681      	mov	r9, r0
 80005e6:	e7b9      	b.n	800055c <__udivmoddi4+0x220>
 80005e8:	4666      	mov	r6, ip
 80005ea:	e775      	b.n	80004d8 <__udivmoddi4+0x19c>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e74a      	b.n	8000486 <__udivmoddi4+0x14a>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	4439      	add	r1, r7
 80005f6:	e713      	b.n	8000420 <__udivmoddi4+0xe4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e724      	b.n	8000448 <__udivmoddi4+0x10c>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <drv_write16>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint16_t drv_write16() {
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af02      	add	r7, sp, #8
	uint16_t data;
    uint16_t txBuf = (0x0 << 11) | 0x8000;
 800060a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800060e:	80fb      	strh	r3, [r7, #6]
    uint16_t rxBuf;

    HAL_GPIO_WritePin(GPIOD, DRV_NCS_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000616:	4811      	ldr	r0, [pc, #68]	; (800065c <drv_write16+0x58>)
 8000618:	f001 fcba 	bl	8001f90 <HAL_GPIO_WritePin>
    uint8_t status = (HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)txBuf, (uint8_t*)rxBuf, 1, 1000) == HAL_OK);
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	4619      	mov	r1, r3
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	461a      	mov	r2, r3
 8000624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2301      	movs	r3, #1
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <drv_write16+0x5c>)
 800062e:	f004 f83b 	bl	80046a8 <HAL_SPI_TransmitReceive>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	bf0c      	ite	eq
 8000638:	2301      	moveq	r3, #1
 800063a:	2300      	movne	r3, #0
 800063c:	b2db      	uxtb	r3, r3
 800063e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(GPIOD, DRV_NCS_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <drv_write16+0x58>)
 8000648:	f001 fca2 	bl	8001f90 <HAL_GPIO_WritePin>

    data = rxBuf;
 800064c:	88bb      	ldrh	r3, [r7, #4]
 800064e:	803b      	strh	r3, [r7, #0]
    return data;
 8000650:	883b      	ldrh	r3, [r7, #0]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	58020c00 	.word	0x58020c00
 8000660:	24000184 	.word	0x24000184

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066a:	f000 fd25 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066e:	f000 f813 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000672:	f000 f977 	bl	8000964 <MX_GPIO_Init>
  MX_ETH_Init();
 8000676:	f000 f87f 	bl	8000778 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800067a:	f000 f91f 	bl	80008bc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800067e:	f000 f969 	bl	8000954 <MX_USB_OTG_HS_USB_Init>
  MX_SPI1_Init();
 8000682:	f000 f8c5 	bl	8000810 <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t data;
      data = drv_write16();
 8000686:	f7ff ffbd 	bl	8000604 <drv_write16>
 800068a:	4603      	mov	r3, r0
 800068c:	80fb      	strh	r3, [r7, #6]

      HAL_Delay(100);
 800068e:	2064      	movs	r0, #100	; 0x64
 8000690:	f000 fda4 	bl	80011dc <HAL_Delay>
  {
 8000694:	e7f7      	b.n	8000686 <main+0x22>
	...

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b09c      	sub	sp, #112	; 0x70
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a2:	224c      	movs	r2, #76	; 0x4c
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 fd16 	bl	80060d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2220      	movs	r2, #32
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fd10 	bl	80060d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006b8:	2002      	movs	r0, #2
 80006ba:	f001 fc83 	bl	8001fc4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <SystemClock_Config+0xdc>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	4a2b      	ldr	r2, [pc, #172]	; (8000774 <SystemClock_Config+0xdc>)
 80006c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006cc:	6193      	str	r3, [r2, #24]
 80006ce:	4b29      	ldr	r3, [pc, #164]	; (8000774 <SystemClock_Config+0xdc>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006da:	bf00      	nop
 80006dc:	4b25      	ldr	r3, [pc, #148]	; (8000774 <SystemClock_Config+0xdc>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006e8:	d1f8      	bne.n	80006dc <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006ea:	2321      	movs	r3, #33	; 0x21
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ee:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fc:	2302      	movs	r3, #2
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000704:	f240 1313 	movw	r3, #275	; 0x113
 8000708:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800070e:	2304      	movs	r3, #4
 8000710:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000712:	2302      	movs	r3, #2
 8000714:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000716:	2304      	movs	r3, #4
 8000718:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800071a:	2300      	movs	r3, #0
 800071c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fc86 	bl	8002038 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000732:	f000 fa13 	bl	8000b5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	233f      	movs	r3, #63	; 0x3f
 8000738:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2303      	movs	r3, #3
 800073c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000742:	2308      	movs	r3, #8
 8000744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000746:	2340      	movs	r3, #64	; 0x40
 8000748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800074a:	2340      	movs	r3, #64	; 0x40
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800074e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000752:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000754:	2340      	movs	r3, #64	; 0x40
 8000756:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2103      	movs	r1, #3
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fff9 	bl	8002754 <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000768:	f000 f9f8 	bl	8000b5c <Error_Handler>
  }
}
 800076c:	bf00      	nop
 800076e:	3770      	adds	r7, #112	; 0x70
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	58024800 	.word	0x58024800

08000778 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_ETH_Init+0x80>)
 800077e:	4a1f      	ldr	r2, [pc, #124]	; (80007fc <MX_ETH_Init+0x84>)
 8000780:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_ETH_Init+0x88>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_ETH_Init+0x88>)
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_ETH_Init+0x88>)
 8000790:	22e1      	movs	r2, #225	; 0xe1
 8000792:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_ETH_Init+0x88>)
 8000796:	2200      	movs	r2, #0
 8000798:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_ETH_Init+0x88>)
 800079c:	2200      	movs	r2, #0
 800079e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_ETH_Init+0x88>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_ETH_Init+0x80>)
 80007a8:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_ETH_Init+0x88>)
 80007aa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_ETH_Init+0x80>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_ETH_Init+0x80>)
 80007b4:	4a13      	ldr	r2, [pc, #76]	; (8000804 <MX_ETH_Init+0x8c>)
 80007b6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_ETH_Init+0x80>)
 80007ba:	4a13      	ldr	r2, [pc, #76]	; (8000808 <MX_ETH_Init+0x90>)
 80007bc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_ETH_Init+0x80>)
 80007c0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007c4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007c6:	480c      	ldr	r0, [pc, #48]	; (80007f8 <MX_ETH_Init+0x80>)
 80007c8:	f000 fe24 	bl	8001414 <HAL_ETH_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80007d2:	f000 f9c3 	bl	8000b5c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007d6:	2234      	movs	r2, #52	; 0x34
 80007d8:	2100      	movs	r1, #0
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_ETH_Init+0x94>)
 80007dc:	f005 fc7c 	bl	80060d8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_ETH_Init+0x94>)
 80007e2:	2221      	movs	r2, #33	; 0x21
 80007e4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_ETH_Init+0x94>)
 80007e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007ec:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_ETH_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2400020c 	.word	0x2400020c
 80007fc:	40028000 	.word	0x40028000
 8000800:	240000ec 	.word	0x240000ec
 8000804:	24000070 	.word	0x24000070
 8000808:	24000010 	.word	0x24000010
 800080c:	24000294 	.word	0x24000294

08000810 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <MX_SPI1_Init+0xa4>)
 8000816:	4a28      	ldr	r2, [pc, #160]	; (80008b8 <MX_SPI1_Init+0xa8>)
 8000818:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <MX_SPI1_Init+0xa4>)
 800081c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000820:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000822:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <MX_SPI1_Init+0xa4>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_SPI1_Init+0xa4>)
 800082a:	2203      	movs	r2, #3
 800082c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <MX_SPI1_Init+0xa4>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_SPI1_Init+0xa4>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_SPI1_Init+0xa4>)
 800083c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000840:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_SPI1_Init+0xa4>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_SPI1_Init+0xa4>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MX_SPI1_Init+0xa4>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_SPI1_Init+0xa4>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_SPI1_Init+0xa4>)
 800085c:	2200      	movs	r2, #0
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_SPI1_Init+0xa4>)
 8000862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000866:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_SPI1_Init+0xa4>)
 800086a:	2200      	movs	r2, #0
 800086c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_SPI1_Init+0xa4>)
 8000870:	2200      	movs	r2, #0
 8000872:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_SPI1_Init+0xa4>)
 8000876:	2200      	movs	r2, #0
 8000878:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_SPI1_Init+0xa4>)
 800087c:	2200      	movs	r2, #0
 800087e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_SPI1_Init+0xa4>)
 8000882:	2200      	movs	r2, #0
 8000884:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_SPI1_Init+0xa4>)
 8000888:	2200      	movs	r2, #0
 800088a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_SPI1_Init+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_SPI1_Init+0xa4>)
 8000894:	2200      	movs	r2, #0
 8000896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_SPI1_Init+0xa4>)
 800089a:	2200      	movs	r2, #0
 800089c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_SPI1_Init+0xa4>)
 80008a0:	f003 fe00 	bl	80044a4 <HAL_SPI_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80008aa:	f000 f957 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	24000184 	.word	0x24000184
 80008b8:	40013000 	.word	0x40013000

080008bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c0:	4b22      	ldr	r3, [pc, #136]	; (800094c <MX_USART3_UART_Init+0x90>)
 80008c2:	4a23      	ldr	r2, [pc, #140]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <MX_USART3_UART_Init+0x90>)
 80008c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <MX_USART3_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_USART3_UART_Init+0x90>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_USART3_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_USART3_UART_Init+0x90>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_USART3_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_USART3_UART_Init+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_USART3_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_USART3_UART_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <MX_USART3_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000904:	4811      	ldr	r0, [pc, #68]	; (800094c <MX_USART3_UART_Init+0x90>)
 8000906:	f004 faa4 	bl	8004e52 <HAL_UART_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000910:	f000 f924 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000914:	2100      	movs	r1, #0
 8000916:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_USART3_UART_Init+0x90>)
 8000918:	f005 faf0 	bl	8005efc <HAL_UARTEx_SetTxFifoThreshold>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000922:	f000 f91b 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000926:	2100      	movs	r1, #0
 8000928:	4808      	ldr	r0, [pc, #32]	; (800094c <MX_USART3_UART_Init+0x90>)
 800092a:	f005 fb25 	bl	8005f78 <HAL_UARTEx_SetRxFifoThreshold>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000934:	f000 f912 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_USART3_UART_Init+0x90>)
 800093a:	f005 faa6 	bl	8005e8a <HAL_UARTEx_DisableFifoMode>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000944:	f000 f90a 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	240000f4 	.word	0x240000f4
 8000950:	40004800 	.word	0x40004800

08000954 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
	...

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	; 0x30
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	4b70      	ldr	r3, [pc, #448]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000980:	4a6e      	ldr	r2, [pc, #440]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098a:	4b6c      	ldr	r3, [pc, #432]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	61bb      	str	r3, [r7, #24]
 8000996:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000998:	4b68      	ldr	r3, [pc, #416]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099e:	4a67      	ldr	r2, [pc, #412]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 80009a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a8:	4b64      	ldr	r3, [pc, #400]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b61      	ldr	r3, [pc, #388]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009bc:	4a5f      	ldr	r2, [pc, #380]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c6:	4b5d      	ldr	r3, [pc, #372]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d4:	4b59      	ldr	r3, [pc, #356]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009da:	4a58      	ldr	r2, [pc, #352]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e4:	4b55      	ldr	r3, [pc, #340]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	4b52      	ldr	r3, [pc, #328]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	4a50      	ldr	r2, [pc, #320]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a02:	4b4e      	ldr	r3, [pc, #312]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	f003 0308 	and.w	r3, r3, #8
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a10:	4b4a      	ldr	r3, [pc, #296]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a16:	4a49      	ldr	r2, [pc, #292]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 8000a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a20:	4b46      	ldr	r3, [pc, #280]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a2e:	4b43      	ldr	r3, [pc, #268]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a34:	4a41      	ldr	r2, [pc, #260]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 8000a36:	f043 0310 	orr.w	r3, r3, #16
 8000a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3e:	4b3f      	ldr	r3, [pc, #252]	; (8000b3c <MX_GPIO_Init+0x1d8>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	f003 0310 	and.w	r3, r3, #16
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a52:	483b      	ldr	r0, [pc, #236]	; (8000b40 <MX_GPIO_Init+0x1dc>)
 8000a54:	f001 fa9c 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|DRV_NCS_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 8000a5e:	4839      	ldr	r0, [pc, #228]	; (8000b44 <MX_GPIO_Init+0x1e0>)
 8000a60:	f001 fa96 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2102      	movs	r1, #2
 8000a68:	4837      	ldr	r0, [pc, #220]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 8000a6a:	f001 fa91 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4832      	ldr	r0, [pc, #200]	; (8000b4c <MX_GPIO_Init+0x1e8>)
 8000a84:	f001 f8dc 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000a88:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4827      	ldr	r0, [pc, #156]	; (8000b40 <MX_GPIO_Init+0x1dc>)
 8000aa2:	f001 f8cd 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin DRV_NCS_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|DRV_NCS_Pin;
 8000aa6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4821      	ldr	r0, [pc, #132]	; (8000b44 <MX_GPIO_Init+0x1e0>)
 8000ac0:	f001 f8be 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac8:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <MX_GPIO_Init+0x1ec>)
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481f      	ldr	r0, [pc, #124]	; (8000b54 <MX_GPIO_Init+0x1f0>)
 8000ad8:	f001 f8b2 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4819      	ldr	r0, [pc, #100]	; (8000b58 <MX_GPIO_Init+0x1f4>)
 8000af2:	f001 f8a5 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b08:	230a      	movs	r3, #10
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4811      	ldr	r0, [pc, #68]	; (8000b58 <MX_GPIO_Init+0x1f4>)
 8000b14:	f001 f894 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <MX_GPIO_Init+0x1e4>)
 8000b30:	f001 f886 	bl	8001c40 <HAL_GPIO_Init>

}
 8000b34:	bf00      	nop
 8000b36:	3730      	adds	r7, #48	; 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	58024400 	.word	0x58024400
 8000b40:	58020400 	.word	0x58020400
 8000b44:	58020c00 	.word	0x58020c00
 8000b48:	58021000 	.word	0x58021000
 8000b4c:	58020800 	.word	0x58020800
 8000b50:	11110000 	.word	0x11110000
 8000b54:	58021800 	.word	0x58021800
 8000b58:	58020000 	.word	0x58020000

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_MspInit+0x30>)
 8000b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b74:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_MspInit+0x30>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_MspInit+0x30>)
 8000b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	58024400 	.word	0x58024400

08000b9c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	; 0x38
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a59      	ldr	r2, [pc, #356]	; (8000d20 <HAL_ETH_MspInit+0x184>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	f040 80ab 	bne.w	8000d16 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000bc0:	4b58      	ldr	r3, [pc, #352]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000bc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bc6:	4a57      	ldr	r2, [pc, #348]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bcc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bd0:	4b54      	ldr	r3, [pc, #336]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000bd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000bde:	4b51      	ldr	r3, [pc, #324]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000be0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000be4:	4a4f      	ldr	r2, [pc, #316]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bee:	4b4d      	ldr	r3, [pc, #308]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000bf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bfc:	4b49      	ldr	r3, [pc, #292]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000bfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c02:	4a48      	ldr	r2, [pc, #288]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c0c:	4b45      	ldr	r3, [pc, #276]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000c0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	4b42      	ldr	r3, [pc, #264]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	4a40      	ldr	r2, [pc, #256]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2a:	4b3e      	ldr	r3, [pc, #248]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c38:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	4a39      	ldr	r2, [pc, #228]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c48:	4b36      	ldr	r3, [pc, #216]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	4b33      	ldr	r3, [pc, #204]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	4a31      	ldr	r2, [pc, #196]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000c5e:	f043 0302 	orr.w	r3, r3, #2
 8000c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c66:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c74:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	4a2a      	ldr	r2, [pc, #168]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c84:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <HAL_ETH_MspInit+0x188>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c92:	2332      	movs	r3, #50	; 0x32
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca2:	230b      	movs	r3, #11
 8000ca4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	481e      	ldr	r0, [pc, #120]	; (8000d28 <HAL_ETH_MspInit+0x18c>)
 8000cae:	f000 ffc7 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cb2:	2386      	movs	r3, #134	; 0x86
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc2:	230b      	movs	r3, #11
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4817      	ldr	r0, [pc, #92]	; (8000d2c <HAL_ETH_MspInit+0x190>)
 8000cce:	f000 ffb7 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce4:	230b      	movs	r3, #11
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	4619      	mov	r1, r3
 8000cee:	4810      	ldr	r0, [pc, #64]	; (8000d30 <HAL_ETH_MspInit+0x194>)
 8000cf0:	f000 ffa6 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cf4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d06:	230b      	movs	r3, #11
 8000d08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4808      	ldr	r0, [pc, #32]	; (8000d34 <HAL_ETH_MspInit+0x198>)
 8000d12:	f000 ff95 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3738      	adds	r7, #56	; 0x38
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40028000 	.word	0x40028000
 8000d24:	58024400 	.word	0x58024400
 8000d28:	58020800 	.word	0x58020800
 8000d2c:	58020000 	.word	0x58020000
 8000d30:	58020400 	.word	0x58020400
 8000d34:	58021800 	.word	0x58021800

08000d38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0b8      	sub	sp, #224	; 0xe0
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d50:	f107 0318 	add.w	r3, r7, #24
 8000d54:	22b4      	movs	r2, #180	; 0xb4
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f005 f9bd 	bl	80060d8 <memset>
  if(hspi->Instance==SPI1)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a36      	ldr	r2, [pc, #216]	; (8000e3c <HAL_SPI_MspInit+0x104>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d165      	bne.n	8000e34 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d72:	f107 0318 	add.w	r3, r7, #24
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 f878 	bl	8002e6c <HAL_RCCEx_PeriphCLKConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000d82:	f7ff feeb 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d86:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <HAL_SPI_MspInit+0x108>)
 8000d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d8c:	4a2c      	ldr	r2, [pc, #176]	; (8000e40 <HAL_SPI_MspInit+0x108>)
 8000d8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d96:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <HAL_SPI_MspInit+0x108>)
 8000d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <HAL_SPI_MspInit+0x108>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <HAL_SPI_MspInit+0x108>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <HAL_SPI_MspInit+0x108>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <HAL_SPI_MspInit+0x108>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <HAL_SPI_MspInit+0x108>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <HAL_SPI_MspInit+0x108>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000de0:	2360      	movs	r3, #96	; 0x60
 8000de2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df8:	2305      	movs	r3, #5
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e02:	4619      	mov	r1, r3
 8000e04:	480f      	ldr	r0, [pc, #60]	; (8000e44 <HAL_SPI_MspInit+0x10c>)
 8000e06:	f000 ff1b 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e0a:	2320      	movs	r3, #32
 8000e0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e22:	2305      	movs	r3, #5
 8000e24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <HAL_SPI_MspInit+0x110>)
 8000e30:	f000 ff06 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e34:	bf00      	nop
 8000e36:	37e0      	adds	r7, #224	; 0xe0
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40013000 	.word	0x40013000
 8000e40:	58024400 	.word	0x58024400
 8000e44:	58020000 	.word	0x58020000
 8000e48:	58020400 	.word	0x58020400

08000e4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b0b6      	sub	sp, #216	; 0xd8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	22b4      	movs	r2, #180	; 0xb4
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f005 f933 	bl	80060d8 <memset>
  if(huart->Instance==USART3)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a25      	ldr	r2, [pc, #148]	; (8000f0c <HAL_UART_MspInit+0xc0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d142      	bne.n	8000f02 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 ffee 	bl	8002e6c <HAL_RCCEx_PeriphCLKConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e96:	f7ff fe61 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_UART_MspInit+0xc4>)
 8000e9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <HAL_UART_MspInit+0xc4>)
 8000ea2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_UART_MspInit+0xc4>)
 8000eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_UART_MspInit+0xc4>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebe:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <HAL_UART_MspInit+0xc4>)
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_UART_MspInit+0xc4>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000ed6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <HAL_UART_MspInit+0xc8>)
 8000efe:	f000 fe9f 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	37d8      	adds	r7, #216	; 0xd8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40004800 	.word	0x40004800
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58020c00 	.word	0x58020c00

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <NMI_Handler+0x4>

08000f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f000 f91a 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f70:	4b34      	ldr	r3, [pc, #208]	; (8001044 <SystemInit+0xd8>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f76:	4a33      	ldr	r2, [pc, #204]	; (8001044 <SystemInit+0xd8>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f80:	4b31      	ldr	r3, [pc, #196]	; (8001048 <SystemInit+0xdc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	2b06      	cmp	r3, #6
 8000f8a:	d807      	bhi.n	8000f9c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f8c:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <SystemInit+0xdc>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f023 030f 	bic.w	r3, r3, #15
 8000f94:	4a2c      	ldr	r2, [pc, #176]	; (8001048 <SystemInit+0xdc>)
 8000f96:	f043 0307 	orr.w	r3, r3, #7
 8000f9a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <SystemInit+0xe0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a2a      	ldr	r2, [pc, #168]	; (800104c <SystemInit+0xe0>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fa8:	4b28      	ldr	r3, [pc, #160]	; (800104c <SystemInit+0xe0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fae:	4b27      	ldr	r3, [pc, #156]	; (800104c <SystemInit+0xe0>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4926      	ldr	r1, [pc, #152]	; (800104c <SystemInit+0xe0>)
 8000fb4:	4b26      	ldr	r3, [pc, #152]	; (8001050 <SystemInit+0xe4>)
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fba:	4b23      	ldr	r3, [pc, #140]	; (8001048 <SystemInit+0xdc>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d007      	beq.n	8000fd6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <SystemInit+0xdc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f023 030f 	bic.w	r3, r3, #15
 8000fce:	4a1e      	ldr	r2, [pc, #120]	; (8001048 <SystemInit+0xdc>)
 8000fd0:	f043 0307 	orr.w	r3, r3, #7
 8000fd4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fd6:	4b1d      	ldr	r3, [pc, #116]	; (800104c <SystemInit+0xe0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <SystemInit+0xe0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <SystemInit+0xe0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <SystemInit+0xe0>)
 8000fea:	4a1a      	ldr	r2, [pc, #104]	; (8001054 <SystemInit+0xe8>)
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <SystemInit+0xe0>)
 8000ff0:	4a19      	ldr	r2, [pc, #100]	; (8001058 <SystemInit+0xec>)
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <SystemInit+0xe0>)
 8000ff6:	4a19      	ldr	r2, [pc, #100]	; (800105c <SystemInit+0xf0>)
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <SystemInit+0xe0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <SystemInit+0xe0>)
 8001002:	4a16      	ldr	r2, [pc, #88]	; (800105c <SystemInit+0xf0>)
 8001004:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <SystemInit+0xe0>)
 8001008:	2200      	movs	r2, #0
 800100a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <SystemInit+0xe0>)
 800100e:	4a13      	ldr	r2, [pc, #76]	; (800105c <SystemInit+0xf0>)
 8001010:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <SystemInit+0xe0>)
 8001014:	2200      	movs	r2, #0
 8001016:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <SystemInit+0xe0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <SystemInit+0xe0>)
 800101e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001022:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <SystemInit+0xe0>)
 8001026:	2200      	movs	r2, #0
 8001028:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <SystemInit+0xf4>)
 800102c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001030:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SystemInit+0xd8>)
 8001034:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001038:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00
 8001048:	52002000 	.word	0x52002000
 800104c:	58024400 	.word	0x58024400
 8001050:	eaf6ed7f 	.word	0xeaf6ed7f
 8001054:	02020200 	.word	0x02020200
 8001058:	01ff0000 	.word	0x01ff0000
 800105c:	01010280 	.word	0x01010280
 8001060:	52004000 	.word	0x52004000

08001064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800109c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001068:	f7ff ff80 	bl	8000f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106e:	490d      	ldr	r1, [pc, #52]	; (80010a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001070:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001084:	4c0a      	ldr	r4, [pc, #40]	; (80010b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001092:	f004 fffd 	bl	8006090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001096:	f7ff fae5 	bl	8000664 <main>
  bx  lr
 800109a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800109c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80010a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010a4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80010a8:	08006148 	.word	0x08006148
  ldr r2, =_sbss
 80010ac:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80010b0:	240002cc 	.word	0x240002cc

080010b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC3_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010be:	2003      	movs	r0, #3
 80010c0:	f000 f976 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010c4:	f001 fcfc 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 80010c8:	4602      	mov	r2, r0
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_Init+0x68>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	0a1b      	lsrs	r3, r3, #8
 80010d0:	f003 030f 	and.w	r3, r3, #15
 80010d4:	4913      	ldr	r1, [pc, #76]	; (8001124 <HAL_Init+0x6c>)
 80010d6:	5ccb      	ldrb	r3, [r1, r3]
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	fa22 f303 	lsr.w	r3, r2, r3
 80010e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_Init+0x68>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <HAL_Init+0x6c>)
 80010ec:	5cd3      	ldrb	r3, [r2, r3]
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	fa22 f303 	lsr.w	r3, r2, r3
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <HAL_Init+0x70>)
 80010fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010fc:	4a0b      	ldr	r2, [pc, #44]	; (800112c <HAL_Init+0x74>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f814 	bl	8001130 <HAL_InitTick>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e002      	b.n	8001118 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001112:	f7ff fd29 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	58024400 	.word	0x58024400
 8001124:	08006100 	.word	0x08006100
 8001128:	24000004 	.word	0x24000004
 800112c:	24000000 	.word	0x24000000

08001130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_InitTick+0x60>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e021      	b.n	8001188 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HAL_InitTick+0x64>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_InitTick+0x60>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	fbb3 f3f1 	udiv	r3, r3, r1
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f94d 	bl	80013fa <HAL_SYSTICK_Config>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00e      	b.n	8001188 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d80a      	bhi.n	8001186 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f000 f925 	bl	80013c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_InitTick+0x68>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2400000c 	.word	0x2400000c
 8001194:	24000000 	.word	0x24000000
 8001198:	24000008 	.word	0x24000008

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	2400000c 	.word	0x2400000c
 80011c0:	240002c8 	.word	0x240002c8

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	240002c8 	.word	0x240002c8

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff ffee 	bl	80011c4 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001202:	bf00      	nop
 8001204:	f7ff ffde 	bl	80011c4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2400000c 	.word	0x2400000c

08001224 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001234:	4904      	ldr	r1, [pc, #16]	; (8001248 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4313      	orrs	r3, r2
 800123a:	604b      	str	r3, [r1, #4]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	58000400 	.word	0x58000400

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <__NVIC_SetPriorityGrouping+0x40>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	4313      	orrs	r3, r2
 8001278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <__NVIC_SetPriorityGrouping+0x40>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	60d3      	str	r3, [r2, #12]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00
 8001290:	05fa0000 	.word	0x05fa0000

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	; (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	; (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff8e 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff47 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d4:	f7ff ff5e 	bl	8001294 <__NVIC_GetPriorityGrouping>
 80013d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff ff90 	bl	8001304 <NVIC_EncodePriority>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff5f 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffb2 	bl	800136c <SysTick_Config>
 8001408:	4603      	mov	r3, r0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e0c6      	b.n	80015b4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fbb4 	bl	8000b9c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2223      	movs	r2, #35	; 0x23
 8001438:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b60      	ldr	r3, [pc, #384]	; (80015bc <HAL_ETH_Init+0x1a8>)
 800143c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001440:	4a5e      	ldr	r2, [pc, #376]	; (80015bc <HAL_ETH_Init+0x1a8>)
 8001442:	f043 0302 	orr.w	r3, r3, #2
 8001446:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800144a:	4b5c      	ldr	r3, [pc, #368]	; (80015bc <HAL_ETH_Init+0x1a8>)
 800144c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7a1b      	ldrb	r3, [r3, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d103      	bne.n	8001468 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff fedf 	bl	8001224 <HAL_SYSCFG_ETHInterfaceSelect>
 8001466:	e003      	b.n	8001470 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001468:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800146c:	f7ff feda 	bl	8001224 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0201 	orr.w	r2, r2, #1
 8001482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001486:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001488:	f7ff fe9c 	bl	80011c4 <HAL_GetTick>
 800148c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800148e:	e00f      	b.n	80014b0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001490:	f7ff fe98 	bl	80011c4 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800149e:	d907      	bls.n	80014b0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2204      	movs	r2, #4
 80014a4:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	22e0      	movs	r2, #224	; 0xe0
 80014aa:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e081      	b.n	80015b4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1e6      	bne.n	8001490 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 fac0 	bl	8001a48 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80014c8:	f001 fc74 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a3c      	ldr	r2, [pc, #240]	; (80015c0 <HAL_ETH_Init+0x1ac>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	0c9a      	lsrs	r2, r3, #18
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3a01      	subs	r2, #1
 80014dc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fa13 	bl	800190c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80014fc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001500:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d007      	beq.n	800151e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	22e0      	movs	r2, #224	; 0xe0
 8001518:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e04a      	b.n	80015b4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	f241 1308 	movw	r3, #4360	; 0x1108
 8001526:	4413      	add	r3, r2
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <HAL_ETH_Init+0x1b0>)
 800152c:	4013      	ands	r3, r2
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6952      	ldr	r2, [r2, #20]
 8001532:	0052      	lsls	r2, r2, #1
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	6809      	ldr	r1, [r1, #0]
 8001538:	431a      	orrs	r2, r3
 800153a:	f241 1308 	movw	r3, #4360	; 0x1108
 800153e:	440b      	add	r3, r1
 8001540:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fad8 	bl	8001af8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fb1c 	bl	8001b86 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	3305      	adds	r3, #5
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	021a      	lsls	r2, r3, #8
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	3304      	adds	r3, #4
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	3303      	adds	r3, #3
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	061a      	lsls	r2, r3, #24
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	3302      	adds	r3, #2
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	041b      	lsls	r3, r3, #16
 8001580:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	3301      	adds	r3, #1
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800158c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800159a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800159c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2210      	movs	r2, #16
 80015aa:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2210      	movs	r2, #16
 80015b0:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	58024400 	.word	0x58024400
 80015c0:	431bde83 	.word	0x431bde83
 80015c4:	ffff8001 	.word	0xffff8001

080015c8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80015da:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	791b      	ldrb	r3, [r3, #4]
 80015e0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80015e2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	7b1b      	ldrb	r3, [r3, #12]
 80015e8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80015ea:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	7b5b      	ldrb	r3, [r3, #13]
 80015f0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80015f2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	7b9b      	ldrb	r3, [r3, #14]
 80015f8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80015fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	7bdb      	ldrb	r3, [r3, #15]
 8001600:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001602:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	7c12      	ldrb	r2, [r2, #16]
 8001608:	2a00      	cmp	r2, #0
 800160a:	d102      	bne.n	8001612 <ETH_SetMACConfig+0x4a>
 800160c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001610:	e000      	b.n	8001614 <ETH_SetMACConfig+0x4c>
 8001612:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001614:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	7c52      	ldrb	r2, [r2, #17]
 800161a:	2a00      	cmp	r2, #0
 800161c:	d102      	bne.n	8001624 <ETH_SetMACConfig+0x5c>
 800161e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001622:	e000      	b.n	8001626 <ETH_SetMACConfig+0x5e>
 8001624:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001626:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	7c9b      	ldrb	r3, [r3, #18]
 800162c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800162e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001634:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800163a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	7f1b      	ldrb	r3, [r3, #28]
 8001640:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001642:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	7f5b      	ldrb	r3, [r3, #29]
 8001648:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800164a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	7f92      	ldrb	r2, [r2, #30]
 8001650:	2a00      	cmp	r2, #0
 8001652:	d102      	bne.n	800165a <ETH_SetMACConfig+0x92>
 8001654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001658:	e000      	b.n	800165c <ETH_SetMACConfig+0x94>
 800165a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800165c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	7fdb      	ldrb	r3, [r3, #31]
 8001662:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001664:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	f892 2020 	ldrb.w	r2, [r2, #32]
 800166c:	2a00      	cmp	r2, #0
 800166e:	d102      	bne.n	8001676 <ETH_SetMACConfig+0xae>
 8001670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001674:	e000      	b.n	8001678 <ETH_SetMACConfig+0xb0>
 8001676:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001678:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800167e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001686:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001688:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800168e:	4313      	orrs	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b56      	ldr	r3, [pc, #344]	; (80017f4 <ETH_SetMACConfig+0x22c>)
 800169a:	4013      	ands	r3, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	68f9      	ldr	r1, [r7, #12]
 80016a2:	430b      	orrs	r3, r1
 80016a4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016aa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016b2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80016b4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016bc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80016be:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80016c6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80016c8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80016d0:	2a00      	cmp	r2, #0
 80016d2:	d102      	bne.n	80016da <ETH_SetMACConfig+0x112>
 80016d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016d8:	e000      	b.n	80016dc <ETH_SetMACConfig+0x114>
 80016da:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80016dc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	4b42      	ldr	r3, [pc, #264]	; (80017f8 <ETH_SetMACConfig+0x230>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	68f9      	ldr	r1, [r7, #12]
 80016f6:	430b      	orrs	r3, r1
 80016f8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001700:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001706:	4313      	orrs	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <ETH_SetMACConfig+0x234>)
 8001712:	4013      	ands	r3, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	430b      	orrs	r3, r1
 800171c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001724:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800172a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001732:	2a00      	cmp	r2, #0
 8001734:	d101      	bne.n	800173a <ETH_SetMACConfig+0x172>
 8001736:	2280      	movs	r2, #128	; 0x80
 8001738:	e000      	b.n	800173c <ETH_SetMACConfig+0x174>
 800173a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800173c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001742:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001744:	4313      	orrs	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800174e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001752:	4013      	ands	r3, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	68f9      	ldr	r1, [r7, #12]
 800175a:	430b      	orrs	r3, r1
 800175c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001764:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800176c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800176e:	4313      	orrs	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177a:	f023 0103 	bic.w	r1, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	430a      	orrs	r2, r1
 8001786:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001792:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80017ae:	2a00      	cmp	r2, #0
 80017b0:	d101      	bne.n	80017b6 <ETH_SetMACConfig+0x1ee>
 80017b2:	2240      	movs	r2, #64	; 0x40
 80017b4:	e000      	b.n	80017b8 <ETH_SetMACConfig+0x1f0>
 80017b6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80017b8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80017c0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017c2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80017ca:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80017cc:	4313      	orrs	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80017d8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	00048083 	.word	0x00048083
 80017f8:	c0f88000 	.word	0xc0f88000
 80017fc:	fffffef0 	.word	0xfffffef0

08001800 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <ETH_SetDMAConfig+0xf8>)
 8001816:	4013      	ands	r3, r2
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	6809      	ldr	r1, [r1, #0]
 8001820:	431a      	orrs	r2, r3
 8001822:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001826:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	791b      	ldrb	r3, [r3, #4]
 800182c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001832:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	7b1b      	ldrb	r3, [r3, #12]
 8001838:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	f241 0304 	movw	r3, #4100	; 0x1004
 8001846:	4413      	add	r3, r2
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <ETH_SetDMAConfig+0xfc>)
 800184c:	4013      	ands	r3, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6811      	ldr	r1, [r2, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	431a      	orrs	r2, r3
 8001856:	f241 0304 	movw	r3, #4100	; 0x1004
 800185a:	440b      	add	r3, r1
 800185c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	7b5b      	ldrb	r3, [r3, #13]
 8001862:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001868:	4313      	orrs	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <ETH_SetDMAConfig+0x100>)
 8001878:	4013      	ands	r3, r2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6811      	ldr	r1, [r2, #0]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	431a      	orrs	r2, r3
 8001882:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001886:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	7d1b      	ldrb	r3, [r3, #20]
 8001890:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001892:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	7f5b      	ldrb	r3, [r3, #29]
 8001898:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800189a:	4313      	orrs	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	f241 1304 	movw	r3, #4356	; 0x1104
 80018a6:	4413      	add	r3, r2
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <ETH_SetDMAConfig+0x104>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6811      	ldr	r1, [r2, #0]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	f241 1304 	movw	r3, #4356	; 0x1104
 80018ba:	440b      	add	r3, r1
 80018bc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	7f1b      	ldrb	r3, [r3, #28]
 80018c2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	f241 1308 	movw	r3, #4360	; 0x1108
 80018d4:	4413      	add	r3, r2
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <ETH_SetDMAConfig+0x108>)
 80018da:	4013      	ands	r3, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6811      	ldr	r1, [r2, #0]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	f241 1308 	movw	r3, #4360	; 0x1108
 80018e8:	440b      	add	r3, r1
 80018ea:	601a      	str	r2, [r3, #0]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	ffff87fd 	.word	0xffff87fd
 80018fc:	ffff2ffe 	.word	0xffff2ffe
 8001900:	fffec000 	.word	0xfffec000
 8001904:	ffc0efef 	.word	0xffc0efef
 8001908:	7fc0ffff 	.word	0x7fc0ffff

0800190c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0a4      	sub	sp, #144	; 0x90
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001914:	2301      	movs	r3, #1
 8001916:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800191a:	2300      	movs	r3, #0
 800191c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800192a:	2301      	movs	r3, #1
 800192c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001930:	2301      	movs	r3, #1
 8001932:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001936:	2301      	movs	r3, #1
 8001938:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001942:	2301      	movs	r3, #1
 8001944:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001954:	2300      	movs	r3, #0
 8001956:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001964:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001968:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001974:	2301      	movs	r3, #1
 8001976:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001986:	2300      	movs	r3, #0
 8001988:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800198a:	2300      	movs	r3, #0
 800198c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800198e:	2300      	movs	r3, #0
 8001990:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800199e:	2301      	movs	r3, #1
 80019a0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80019a4:	2320      	movs	r3, #32
 80019a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80019aa:	2301      	movs	r3, #1
 80019ac:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80019b6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80019bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019c0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80019c8:	2302      	movs	r3, #2
 80019ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80019e0:	2301      	movs	r3, #1
 80019e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80019e6:	2300      	movs	r3, #0
 80019e8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80019f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fde6 	bl	80015c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80019fc:	2301      	movs	r3, #1
 80019fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a00:	2301      	movs	r3, #1
 8001a02:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a16:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a1a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a24:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001a2c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	4619      	mov	r1, r3
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff fee1 	bl	8001800 <ETH_SetDMAConfig>
}
 8001a3e:	bf00      	nop
 8001a40:	3790      	adds	r7, #144	; 0x90
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a62:	f001 f9a7 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8001a66:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ae4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d908      	bls.n	8001a82 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d804      	bhi.n	8001a82 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e027      	b.n	8001ad2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d908      	bls.n	8001a9c <ETH_MAC_MDIO_ClkConfig+0x54>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	4a17      	ldr	r2, [pc, #92]	; (8001aec <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d204      	bcs.n	8001a9c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	e01a      	b.n	8001ad2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4a13      	ldr	r2, [pc, #76]	; (8001aec <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d303      	bcc.n	8001aac <ETH_MAC_MDIO_ClkConfig+0x64>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d911      	bls.n	8001ad0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d908      	bls.n	8001ac6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4a0f      	ldr	r2, [pc, #60]	; (8001af4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d804      	bhi.n	8001ac6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e005      	b.n	8001ad2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	e000      	b.n	8001ad2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001ad0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	01312cff 	.word	0x01312cff
 8001ae8:	02160ebf 	.word	0x02160ebf
 8001aec:	03938700 	.word	0x03938700
 8001af0:	05f5e0ff 	.word	0x05f5e0ff
 8001af4:	08f0d17f 	.word	0x08f0d17f

08001af8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e01d      	b.n	8001b42 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68d9      	ldr	r1, [r3, #12]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	440b      	add	r3, r1
 8001b16:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	3206      	adds	r2, #6
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d9de      	bls.n	8001b06 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	f241 132c 	movw	r3, #4396	; 0x112c
 8001b56:	4413      	add	r3, r2
 8001b58:	2203      	movs	r2, #3
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68d9      	ldr	r1, [r3, #12]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	f241 1314 	movw	r3, #4372	; 0x1114
 8001b68:	4413      	add	r3, r2
 8001b6a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001b78:	601a      	str	r2, [r3, #0]
}
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	e024      	b.n	8001bde <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6919      	ldr	r1, [r3, #16]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	440b      	add	r3, r1
 8001ba4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3310      	adds	r3, #16
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d9d7      	bls.n	8001b94 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	f241 1330 	movw	r3, #4400	; 0x1130
 8001c0a:	4413      	add	r3, r2
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6919      	ldr	r1, [r3, #16]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	f241 131c 	movw	r3, #4380	; 0x111c
 8001c1c:	4413      	add	r3, r2
 8001c1e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	f241 1328 	movw	r3, #4392	; 0x1128
 8001c30:	4413      	add	r3, r2
 8001c32:	6019      	str	r1, [r3, #0]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c4e:	4b86      	ldr	r3, [pc, #536]	; (8001e68 <HAL_GPIO_Init+0x228>)
 8001c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c52:	e18c      	b.n	8001f6e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2101      	movs	r1, #1
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 817e 	beq.w	8001f68 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d00b      	beq.n	8001c8c <HAL_GPIO_Init+0x4c>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d007      	beq.n	8001c8c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c80:	2b11      	cmp	r3, #17
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b12      	cmp	r3, #18
 8001c8a:	d130      	bne.n	8001cee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	2203      	movs	r2, #3
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	f003 0201 	and.w	r2, r3, #1
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0xee>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b12      	cmp	r3, #18
 8001d2c:	d123      	bne.n	8001d76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	08da      	lsrs	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3208      	adds	r2, #8
 8001d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	220f      	movs	r2, #15
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	69b9      	ldr	r1, [r7, #24]
 8001d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	2203      	movs	r2, #3
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0203 	and.w	r2, r3, #3
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80d8 	beq.w	8001f68 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db8:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <HAL_GPIO_Init+0x22c>)
 8001dba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dbe:	4a2b      	ldr	r2, [pc, #172]	; (8001e6c <HAL_GPIO_Init+0x22c>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001dc8:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <HAL_GPIO_Init+0x22c>)
 8001dca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd6:	4a26      	ldr	r2, [pc, #152]	; (8001e70 <HAL_GPIO_Init+0x230>)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	3302      	adds	r3, #2
 8001dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	220f      	movs	r2, #15
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a1d      	ldr	r2, [pc, #116]	; (8001e74 <HAL_GPIO_Init+0x234>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d04a      	beq.n	8001e98 <HAL_GPIO_Init+0x258>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <HAL_GPIO_Init+0x238>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d02b      	beq.n	8001e62 <HAL_GPIO_Init+0x222>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a1b      	ldr	r2, [pc, #108]	; (8001e7c <HAL_GPIO_Init+0x23c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d025      	beq.n	8001e5e <HAL_GPIO_Init+0x21e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a1a      	ldr	r2, [pc, #104]	; (8001e80 <HAL_GPIO_Init+0x240>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d01f      	beq.n	8001e5a <HAL_GPIO_Init+0x21a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a19      	ldr	r2, [pc, #100]	; (8001e84 <HAL_GPIO_Init+0x244>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d019      	beq.n	8001e56 <HAL_GPIO_Init+0x216>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <HAL_GPIO_Init+0x248>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d013      	beq.n	8001e52 <HAL_GPIO_Init+0x212>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <HAL_GPIO_Init+0x24c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00d      	beq.n	8001e4e <HAL_GPIO_Init+0x20e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a16      	ldr	r2, [pc, #88]	; (8001e90 <HAL_GPIO_Init+0x250>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d007      	beq.n	8001e4a <HAL_GPIO_Init+0x20a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <HAL_GPIO_Init+0x254>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d101      	bne.n	8001e46 <HAL_GPIO_Init+0x206>
 8001e42:	2309      	movs	r3, #9
 8001e44:	e029      	b.n	8001e9a <HAL_GPIO_Init+0x25a>
 8001e46:	230a      	movs	r3, #10
 8001e48:	e027      	b.n	8001e9a <HAL_GPIO_Init+0x25a>
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	e025      	b.n	8001e9a <HAL_GPIO_Init+0x25a>
 8001e4e:	2306      	movs	r3, #6
 8001e50:	e023      	b.n	8001e9a <HAL_GPIO_Init+0x25a>
 8001e52:	2305      	movs	r3, #5
 8001e54:	e021      	b.n	8001e9a <HAL_GPIO_Init+0x25a>
 8001e56:	2304      	movs	r3, #4
 8001e58:	e01f      	b.n	8001e9a <HAL_GPIO_Init+0x25a>
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e01d      	b.n	8001e9a <HAL_GPIO_Init+0x25a>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e01b      	b.n	8001e9a <HAL_GPIO_Init+0x25a>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e019      	b.n	8001e9a <HAL_GPIO_Init+0x25a>
 8001e66:	bf00      	nop
 8001e68:	58000080 	.word	0x58000080
 8001e6c:	58024400 	.word	0x58024400
 8001e70:	58000400 	.word	0x58000400
 8001e74:	58020000 	.word	0x58020000
 8001e78:	58020400 	.word	0x58020400
 8001e7c:	58020800 	.word	0x58020800
 8001e80:	58020c00 	.word	0x58020c00
 8001e84:	58021000 	.word	0x58021000
 8001e88:	58021400 	.word	0x58021400
 8001e8c:	58021800 	.word	0x58021800
 8001e90:	58021c00 	.word	0x58021c00
 8001e94:	58022400 	.word	0x58022400
 8001e98:	2300      	movs	r3, #0
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	f002 0203 	and.w	r2, r2, #3
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	4093      	lsls	r3, r2
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eaa:	4938      	ldr	r1, [pc, #224]	; (8001f8c <HAL_GPIO_Init+0x34c>)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f47f ae6b 	bne.w	8001c54 <HAL_GPIO_Init+0x14>
  }
}
 8001f7e:	bf00      	nop
 8001f80:	bf00      	nop
 8001f82:	3724      	adds	r7, #36	; 0x24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	58000400 	.word	0x58000400

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001fac:	e003      	b.n	8001fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	041a      	lsls	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	619a      	str	r2, [r3, #24]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_PWREx_ConfigSupply+0x70>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d00a      	beq.n	8001fee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001fd8:	4b16      	ldr	r3, [pc, #88]	; (8002034 <HAL_PWREx_ConfigSupply+0x70>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d001      	beq.n	8001fea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e01f      	b.n	800202a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e01d      	b.n	800202a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_PWREx_ConfigSupply+0x70>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f023 0207 	bic.w	r2, r3, #7
 8001ff6:	490f      	ldr	r1, [pc, #60]	; (8002034 <HAL_PWREx_ConfigSupply+0x70>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001ffe:	f7ff f8e1 	bl	80011c4 <HAL_GetTick>
 8002002:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002004:	e009      	b.n	800201a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002006:	f7ff f8dd 	bl	80011c4 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002014:	d901      	bls.n	800201a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e007      	b.n	800202a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_PWREx_ConfigSupply+0x70>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002026:	d1ee      	bne.n	8002006 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	58024800 	.word	0x58024800

08002038 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08c      	sub	sp, #48	; 0x30
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e37a      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 8087 	beq.w	8002166 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002058:	4ba0      	ldr	r3, [pc, #640]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002062:	4b9e      	ldr	r3, [pc, #632]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206a:	2b10      	cmp	r3, #16
 800206c:	d007      	beq.n	800207e <HAL_RCC_OscConfig+0x46>
 800206e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002070:	2b18      	cmp	r3, #24
 8002072:	d110      	bne.n	8002096 <HAL_RCC_OscConfig+0x5e>
 8002074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d10b      	bne.n	8002096 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207e:	4b97      	ldr	r3, [pc, #604]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d06c      	beq.n	8002164 <HAL_RCC_OscConfig+0x12c>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d168      	bne.n	8002164 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e354      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x76>
 80020a0:	4b8e      	ldr	r3, [pc, #568]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a8d      	ldr	r2, [pc, #564]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80020a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	e02e      	b.n	800210c <HAL_RCC_OscConfig+0xd4>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x98>
 80020b6:	4b89      	ldr	r3, [pc, #548]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a88      	ldr	r2, [pc, #544]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80020bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b86      	ldr	r3, [pc, #536]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a85      	ldr	r2, [pc, #532]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80020c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e01d      	b.n	800210c <HAL_RCC_OscConfig+0xd4>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0xbc>
 80020da:	4b80      	ldr	r3, [pc, #512]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a7f      	ldr	r2, [pc, #508]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80020e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b7d      	ldr	r3, [pc, #500]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a7c      	ldr	r2, [pc, #496]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e00b      	b.n	800210c <HAL_RCC_OscConfig+0xd4>
 80020f4:	4b79      	ldr	r3, [pc, #484]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a78      	ldr	r2, [pc, #480]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80020fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	4b76      	ldr	r3, [pc, #472]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a75      	ldr	r2, [pc, #468]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 8002106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d013      	beq.n	800213c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff f856 	bl	80011c4 <HAL_GetTick>
 8002118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff f852 	bl	80011c4 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e308      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800212e:	4b6b      	ldr	r3, [pc, #428]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0xe4>
 800213a:	e014      	b.n	8002166 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff f842 	bl	80011c4 <HAL_GetTick>
 8002140:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002144:	f7ff f83e 	bl	80011c4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e2f4      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002156:	4b61      	ldr	r3, [pc, #388]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x10c>
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d06d      	beq.n	800224e <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002172:	4b5a      	ldr	r3, [pc, #360]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800217a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800217c:	4b57      	ldr	r3, [pc, #348]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <HAL_RCC_OscConfig+0x160>
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	2b18      	cmp	r3, #24
 800218c:	d11b      	bne.n	80021c6 <HAL_RCC_OscConfig+0x18e>
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d116      	bne.n	80021c6 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002198:	4b50      	ldr	r3, [pc, #320]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_OscConfig+0x178>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e2c7      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b4a      	ldr	r3, [pc, #296]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	4947      	ldr	r1, [pc, #284]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021c4:	e043      	b.n	800224e <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d026      	beq.n	800221c <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021ce:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 0219 	bic.w	r2, r3, #25
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	4940      	ldr	r1, [pc, #256]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe fff0 	bl	80011c4 <HAL_GetTick>
 80021e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e8:	f7fe ffec 	bl	80011c4 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e2a2      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021fa:	4b38      	ldr	r3, [pc, #224]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002206:	4b35      	ldr	r3, [pc, #212]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	061b      	lsls	r3, r3, #24
 8002214:	4931      	ldr	r1, [pc, #196]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
 800221a:	e018      	b.n	800224e <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800221c:	4b2f      	ldr	r3, [pc, #188]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a2e      	ldr	r2, [pc, #184]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 8002222:	f023 0301 	bic.w	r3, r3, #1
 8002226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe ffcc 	bl	80011c4 <HAL_GetTick>
 800222c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002230:	f7fe ffc8 	bl	80011c4 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e27e      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b00      	cmp	r3, #0
 8002258:	d06c      	beq.n	8002334 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225a:	4b20      	ldr	r3, [pc, #128]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002262:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002264:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d007      	beq.n	8002280 <HAL_RCC_OscConfig+0x248>
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2b18      	cmp	r3, #24
 8002274:	d11b      	bne.n	80022ae <HAL_RCC_OscConfig+0x276>
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d116      	bne.n	80022ae <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002280:	4b16      	ldr	r3, [pc, #88]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_RCC_OscConfig+0x260>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	2b80      	cmp	r3, #128	; 0x80
 8002292:	d001      	beq.n	8002298 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e253      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002298:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	061b      	lsls	r3, r3, #24
 80022a6:	490d      	ldr	r1, [pc, #52]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022ac:	e042      	b.n	8002334 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d025      	beq.n	8002302 <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a08      	ldr	r2, [pc, #32]	; (80022dc <HAL_RCC_OscConfig+0x2a4>)
 80022bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c2:	f7fe ff7f 	bl	80011c4 <HAL_GetTick>
 80022c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022c8:	e00a      	b.n	80022e0 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80022ca:	f7fe ff7b 	bl	80011c4 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d903      	bls.n	80022e0 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e231      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
 80022dc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022e0:	4ba3      	ldr	r3, [pc, #652]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0ee      	beq.n	80022ca <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022ec:	4ba0      	ldr	r3, [pc, #640]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	061b      	lsls	r3, r3, #24
 80022fa:	499d      	ldr	r1, [pc, #628]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60cb      	str	r3, [r1, #12]
 8002300:	e018      	b.n	8002334 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002302:	4b9b      	ldr	r3, [pc, #620]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a9a      	ldr	r2, [pc, #616]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 8002308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800230c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7fe ff59 	bl	80011c4 <HAL_GetTick>
 8002312:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002316:	f7fe ff55 	bl	80011c4 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e20b      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002328:	4b91      	ldr	r3, [pc, #580]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f0      	bne.n	8002316 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d036      	beq.n	80023ae <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d019      	beq.n	800237c <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002348:	4b89      	ldr	r3, [pc, #548]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 800234a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800234c:	4a88      	ldr	r2, [pc, #544]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002354:	f7fe ff36 	bl	80011c4 <HAL_GetTick>
 8002358:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235c:	f7fe ff32 	bl	80011c4 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e1e8      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800236e:	4b80      	ldr	r3, [pc, #512]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 8002370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0x324>
 800237a:	e018      	b.n	80023ae <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237c:	4b7c      	ldr	r3, [pc, #496]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 800237e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002380:	4a7b      	ldr	r2, [pc, #492]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002388:	f7fe ff1c 	bl	80011c4 <HAL_GetTick>
 800238c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002390:	f7fe ff18 	bl	80011c4 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e1ce      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023a2:	4b73      	ldr	r3, [pc, #460]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80023a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d036      	beq.n	8002428 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d019      	beq.n	80023f6 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023c2:	4b6b      	ldr	r3, [pc, #428]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a6a      	ldr	r2, [pc, #424]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80023c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023ce:	f7fe fef9 	bl	80011c4 <HAL_GetTick>
 80023d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80023d6:	f7fe fef5 	bl	80011c4 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e1ab      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023e8:	4b61      	ldr	r3, [pc, #388]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x39e>
 80023f4:	e018      	b.n	8002428 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023f6:	4b5e      	ldr	r3, [pc, #376]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a5d      	ldr	r2, [pc, #372]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80023fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002400:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002402:	f7fe fedf 	bl	80011c4 <HAL_GetTick>
 8002406:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800240a:	f7fe fedb 	bl	80011c4 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e191      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800241c:	4b54      	ldr	r3, [pc, #336]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f0      	bne.n	800240a <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 8081 	beq.w	8002538 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002436:	4b4f      	ldr	r3, [pc, #316]	; (8002574 <HAL_RCC_OscConfig+0x53c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a4e      	ldr	r2, [pc, #312]	; (8002574 <HAL_RCC_OscConfig+0x53c>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002440:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002442:	f7fe febf 	bl	80011c4 <HAL_GetTick>
 8002446:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800244a:	f7fe febb 	bl	80011c4 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b64      	cmp	r3, #100	; 0x64
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e171      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800245c:	4b45      	ldr	r3, [pc, #276]	; (8002574 <HAL_RCC_OscConfig+0x53c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d106      	bne.n	800247e <HAL_RCC_OscConfig+0x446>
 8002470:	4b3f      	ldr	r3, [pc, #252]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 8002472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002474:	4a3e      	ldr	r2, [pc, #248]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6713      	str	r3, [r2, #112]	; 0x70
 800247c:	e02d      	b.n	80024da <HAL_RCC_OscConfig+0x4a2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x468>
 8002486:	4b3a      	ldr	r3, [pc, #232]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	4a39      	ldr	r2, [pc, #228]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	6713      	str	r3, [r2, #112]	; 0x70
 8002492:	4b37      	ldr	r3, [pc, #220]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	4a36      	ldr	r2, [pc, #216]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	6713      	str	r3, [r2, #112]	; 0x70
 800249e:	e01c      	b.n	80024da <HAL_RCC_OscConfig+0x4a2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d10c      	bne.n	80024c2 <HAL_RCC_OscConfig+0x48a>
 80024a8:	4b31      	ldr	r3, [pc, #196]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	4a30      	ldr	r2, [pc, #192]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80024ae:	f043 0304 	orr.w	r3, r3, #4
 80024b2:	6713      	str	r3, [r2, #112]	; 0x70
 80024b4:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	4a2d      	ldr	r2, [pc, #180]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6713      	str	r3, [r2, #112]	; 0x70
 80024c0:	e00b      	b.n	80024da <HAL_RCC_OscConfig+0x4a2>
 80024c2:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c6:	4a2a      	ldr	r2, [pc, #168]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	6713      	str	r3, [r2, #112]	; 0x70
 80024ce:	4b28      	ldr	r3, [pc, #160]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	4a27      	ldr	r2, [pc, #156]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 80024d4:	f023 0304 	bic.w	r3, r3, #4
 80024d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d015      	beq.n	800250e <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e2:	f7fe fe6f 	bl	80011c4 <HAL_GetTick>
 80024e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024e8:	e00a      	b.n	8002500 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7fe fe6b 	bl	80011c4 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e11f      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0ee      	beq.n	80024ea <HAL_RCC_OscConfig+0x4b2>
 800250c:	e014      	b.n	8002538 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250e:	f7fe fe59 	bl	80011c4 <HAL_GetTick>
 8002512:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002514:	e00a      	b.n	800252c <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7fe fe55 	bl	80011c4 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f241 3288 	movw	r2, #5000	; 0x1388
 8002524:	4293      	cmp	r3, r2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e109      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1ee      	bne.n	8002516 <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80fe 	beq.w	800273e <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800254a:	2b18      	cmp	r3, #24
 800254c:	f000 80b9 	beq.w	80026c2 <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	2b02      	cmp	r3, #2
 8002556:	f040 809a 	bne.w	800268e <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_RCC_OscConfig+0x538>)
 8002560:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7fe fe2d 	bl	80011c4 <HAL_GetTick>
 800256a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800256c:	e00d      	b.n	800258a <HAL_RCC_OscConfig+0x552>
 800256e:	bf00      	nop
 8002570:	58024400 	.word	0x58024400
 8002574:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002578:	f7fe fe24 	bl	80011c4 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e0da      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800258a:	4b6f      	ldr	r3, [pc, #444]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002596:	4b6c      	ldr	r3, [pc, #432]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 8002598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800259a:	4b6c      	ldr	r3, [pc, #432]	; (800274c <HAL_RCC_OscConfig+0x714>)
 800259c:	4013      	ands	r3, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025a6:	0112      	lsls	r2, r2, #4
 80025a8:	430a      	orrs	r2, r1
 80025aa:	4967      	ldr	r1, [pc, #412]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	628b      	str	r3, [r1, #40]	; 0x28
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	3b01      	subs	r3, #1
 80025b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025be:	3b01      	subs	r3, #1
 80025c0:	025b      	lsls	r3, r3, #9
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	3b01      	subs	r3, #1
 80025cc:	041b      	lsls	r3, r3, #16
 80025ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	3b01      	subs	r3, #1
 80025da:	061b      	lsls	r3, r3, #24
 80025dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80025e0:	4959      	ldr	r1, [pc, #356]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80025e6:	4b58      	ldr	r3, [pc, #352]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	4a57      	ldr	r2, [pc, #348]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025f2:	4b55      	ldr	r3, [pc, #340]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 80025f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f6:	4b56      	ldr	r3, [pc, #344]	; (8002750 <HAL_RCC_OscConfig+0x718>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025fe:	00d2      	lsls	r2, r2, #3
 8002600:	4951      	ldr	r1, [pc, #324]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 8002602:	4313      	orrs	r3, r2
 8002604:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002606:	4b50      	ldr	r3, [pc, #320]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	f023 020c 	bic.w	r2, r3, #12
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	494d      	ldr	r1, [pc, #308]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 8002614:	4313      	orrs	r3, r2
 8002616:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002618:	4b4b      	ldr	r3, [pc, #300]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	f023 0202 	bic.w	r2, r3, #2
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002624:	4948      	ldr	r1, [pc, #288]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 8002626:	4313      	orrs	r3, r2
 8002628:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	4a46      	ldr	r2, [pc, #280]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002636:	4b44      	ldr	r3, [pc, #272]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	4a43      	ldr	r2, [pc, #268]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 800263c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002640:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002642:	4b41      	ldr	r3, [pc, #260]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	4a40      	ldr	r2, [pc, #256]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800264e:	4b3e      	ldr	r3, [pc, #248]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 8002650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002652:	4a3d      	ldr	r2, [pc, #244]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a3a      	ldr	r2, [pc, #232]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 8002660:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7fe fdad 	bl	80011c4 <HAL_GetTick>
 800266a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe fda9 	bl	80011c4 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e05f      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002680:	4b31      	ldr	r3, [pc, #196]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x636>
 800268c:	e057      	b.n	800273e <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268e:	4b2e      	ldr	r3, [pc, #184]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a2d      	ldr	r2, [pc, #180]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 8002694:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7fe fd93 	bl	80011c4 <HAL_GetTick>
 800269e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a2:	f7fe fd8f 	bl	80011c4 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e045      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026b4:	4b24      	ldr	r3, [pc, #144]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x66a>
 80026c0:	e03d      	b.n	800273e <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80026c2:	4b21      	ldr	r3, [pc, #132]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80026c8:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <HAL_RCC_OscConfig+0x710>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d031      	beq.n	800273a <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f003 0203 	and.w	r2, r3, #3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d12a      	bne.n	800273a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d122      	bne.n	800273a <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d11a      	bne.n	800273a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	0a5b      	lsrs	r3, r3, #9
 8002708:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002710:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002712:	429a      	cmp	r2, r3
 8002714:	d111      	bne.n	800273a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	0c1b      	lsrs	r3, r3, #16
 800271a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d108      	bne.n	800273a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	0e1b      	lsrs	r3, r3, #24
 800272c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002734:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002736:	429a      	cmp	r2, r3
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3730      	adds	r7, #48	; 0x30
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	58024400 	.word	0x58024400
 800274c:	fffffc0c 	.word	0xfffffc0c
 8002750:	ffff0007 	.word	0xffff0007

08002754 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e19c      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002768:	4b8a      	ldr	r3, [pc, #552]	; (8002994 <HAL_RCC_ClockConfig+0x240>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d910      	bls.n	8002798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b87      	ldr	r3, [pc, #540]	; (8002994 <HAL_RCC_ClockConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 020f 	bic.w	r2, r3, #15
 800277e:	4985      	ldr	r1, [pc, #532]	; (8002994 <HAL_RCC_ClockConfig+0x240>)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b83      	ldr	r3, [pc, #524]	; (8002994 <HAL_RCC_ClockConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e184      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d010      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	4b7b      	ldr	r3, [pc, #492]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d908      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027b4:	4b78      	ldr	r3, [pc, #480]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	4975      	ldr	r1, [pc, #468]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d010      	beq.n	80027f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	4b70      	ldr	r3, [pc, #448]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027de:	429a      	cmp	r2, r3
 80027e0:	d908      	bls.n	80027f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027e2:	4b6d      	ldr	r3, [pc, #436]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	496a      	ldr	r1, [pc, #424]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d010      	beq.n	8002822 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699a      	ldr	r2, [r3, #24]
 8002804:	4b64      	ldr	r3, [pc, #400]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800280c:	429a      	cmp	r2, r3
 800280e:	d908      	bls.n	8002822 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002810:	4b61      	ldr	r3, [pc, #388]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	495e      	ldr	r1, [pc, #376]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 800281e:	4313      	orrs	r3, r2
 8002820:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b00      	cmp	r3, #0
 800282c:	d010      	beq.n	8002850 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	4b59      	ldr	r3, [pc, #356]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800283a:	429a      	cmp	r2, r3
 800283c:	d908      	bls.n	8002850 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800283e:	4b56      	ldr	r3, [pc, #344]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	4953      	ldr	r1, [pc, #332]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 800284c:	4313      	orrs	r3, r2
 800284e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d010      	beq.n	800287e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	4b4d      	ldr	r3, [pc, #308]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	429a      	cmp	r2, r3
 800286a:	d908      	bls.n	800287e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800286c:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f023 020f 	bic.w	r2, r3, #15
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4947      	ldr	r1, [pc, #284]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 800287a:	4313      	orrs	r3, r2
 800287c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d055      	beq.n	8002936 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800288a:	4b43      	ldr	r3, [pc, #268]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	4940      	ldr	r1, [pc, #256]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002898:	4313      	orrs	r3, r2
 800289a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028a4:	4b3c      	ldr	r3, [pc, #240]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d121      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0f6      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028bc:	4b36      	ldr	r3, [pc, #216]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d115      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0ea      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028d4:	4b30      	ldr	r3, [pc, #192]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0de      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028e4:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0d6      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028f4:	4b28      	ldr	r3, [pc, #160]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f023 0207 	bic.w	r2, r3, #7
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4925      	ldr	r1, [pc, #148]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002902:	4313      	orrs	r3, r2
 8002904:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002906:	f7fe fc5d 	bl	80011c4 <HAL_GetTick>
 800290a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290c:	e00a      	b.n	8002924 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290e:	f7fe fc59 	bl	80011c4 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f241 3288 	movw	r2, #5000	; 0x1388
 800291c:	4293      	cmp	r3, r2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e0be      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002924:	4b1c      	ldr	r3, [pc, #112]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	429a      	cmp	r2, r3
 8002934:	d1eb      	bne.n	800290e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d010      	beq.n	8002964 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	429a      	cmp	r2, r3
 8002950:	d208      	bcs.n	8002964 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f023 020f 	bic.w	r2, r3, #15
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	490e      	ldr	r1, [pc, #56]	; (8002998 <HAL_RCC_ClockConfig+0x244>)
 8002960:	4313      	orrs	r3, r2
 8002962:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_RCC_ClockConfig+0x240>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d214      	bcs.n	800299c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_RCC_ClockConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 020f 	bic.w	r2, r3, #15
 800297a:	4906      	ldr	r1, [pc, #24]	; (8002994 <HAL_RCC_ClockConfig+0x240>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b04      	ldr	r3, [pc, #16]	; (8002994 <HAL_RCC_ClockConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e086      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x34e>
 8002994:	52002000 	.word	0x52002000
 8002998:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d010      	beq.n	80029ca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	4b3f      	ldr	r3, [pc, #252]	; (8002aac <HAL_RCC_ClockConfig+0x358>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d208      	bcs.n	80029ca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029b8:	4b3c      	ldr	r3, [pc, #240]	; (8002aac <HAL_RCC_ClockConfig+0x358>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	4939      	ldr	r1, [pc, #228]	; (8002aac <HAL_RCC_ClockConfig+0x358>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d010      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_RCC_ClockConfig+0x358>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d208      	bcs.n	80029f8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029e6:	4b31      	ldr	r3, [pc, #196]	; (8002aac <HAL_RCC_ClockConfig+0x358>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	492e      	ldr	r1, [pc, #184]	; (8002aac <HAL_RCC_ClockConfig+0x358>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d010      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699a      	ldr	r2, [r3, #24]
 8002a08:	4b28      	ldr	r3, [pc, #160]	; (8002aac <HAL_RCC_ClockConfig+0x358>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d208      	bcs.n	8002a26 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a14:	4b25      	ldr	r3, [pc, #148]	; (8002aac <HAL_RCC_ClockConfig+0x358>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	4922      	ldr	r1, [pc, #136]	; (8002aac <HAL_RCC_ClockConfig+0x358>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d010      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <HAL_RCC_ClockConfig+0x358>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d208      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_RCC_ClockConfig+0x358>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	4917      	ldr	r1, [pc, #92]	; (8002aac <HAL_RCC_ClockConfig+0x358>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a54:	f000 f834 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_RCC_ClockConfig+0x358>)
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	0a1b      	lsrs	r3, r3, #8
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	4912      	ldr	r1, [pc, #72]	; (8002ab0 <HAL_RCC_ClockConfig+0x35c>)
 8002a66:	5ccb      	ldrb	r3, [r1, r3]
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_RCC_ClockConfig+0x358>)
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <HAL_RCC_ClockConfig+0x35c>)
 8002a7c:	5cd3      	ldrb	r3, [r2, r3]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
 8002a88:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <HAL_RCC_ClockConfig+0x360>)
 8002a8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <HAL_RCC_ClockConfig+0x364>)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_RCC_ClockConfig+0x368>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fb4a 	bl	8001130 <HAL_InitTick>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	58024400 	.word	0x58024400
 8002ab0:	08006100 	.word	0x08006100
 8002ab4:	24000004 	.word	0x24000004
 8002ab8:	24000000 	.word	0x24000000
 8002abc:	24000008 	.word	0x24000008

08002ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	; 0x24
 8002ac4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ac6:	4bb3      	ldr	r3, [pc, #716]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ace:	2b18      	cmp	r3, #24
 8002ad0:	f200 8155 	bhi.w	8002d7e <HAL_RCC_GetSysClockFreq+0x2be>
 8002ad4:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ada:	bf00      	nop
 8002adc:	08002b41 	.word	0x08002b41
 8002ae0:	08002d7f 	.word	0x08002d7f
 8002ae4:	08002d7f 	.word	0x08002d7f
 8002ae8:	08002d7f 	.word	0x08002d7f
 8002aec:	08002d7f 	.word	0x08002d7f
 8002af0:	08002d7f 	.word	0x08002d7f
 8002af4:	08002d7f 	.word	0x08002d7f
 8002af8:	08002d7f 	.word	0x08002d7f
 8002afc:	08002b67 	.word	0x08002b67
 8002b00:	08002d7f 	.word	0x08002d7f
 8002b04:	08002d7f 	.word	0x08002d7f
 8002b08:	08002d7f 	.word	0x08002d7f
 8002b0c:	08002d7f 	.word	0x08002d7f
 8002b10:	08002d7f 	.word	0x08002d7f
 8002b14:	08002d7f 	.word	0x08002d7f
 8002b18:	08002d7f 	.word	0x08002d7f
 8002b1c:	08002b6d 	.word	0x08002b6d
 8002b20:	08002d7f 	.word	0x08002d7f
 8002b24:	08002d7f 	.word	0x08002d7f
 8002b28:	08002d7f 	.word	0x08002d7f
 8002b2c:	08002d7f 	.word	0x08002d7f
 8002b30:	08002d7f 	.word	0x08002d7f
 8002b34:	08002d7f 	.word	0x08002d7f
 8002b38:	08002d7f 	.word	0x08002d7f
 8002b3c:	08002b73 	.word	0x08002b73
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b40:	4b94      	ldr	r3, [pc, #592]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d009      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b4c:	4b91      	ldr	r3, [pc, #580]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	08db      	lsrs	r3, r3, #3
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	4a90      	ldr	r2, [pc, #576]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002b5e:	e111      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b60:	4b8d      	ldr	r3, [pc, #564]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b62:	61bb      	str	r3, [r7, #24]
    break;
 8002b64:	e10e      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002b66:	4b8d      	ldr	r3, [pc, #564]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b68:	61bb      	str	r3, [r7, #24]
    break;
 8002b6a:	e10b      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002b6c:	4b8c      	ldr	r3, [pc, #560]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002b6e:	61bb      	str	r3, [r7, #24]
    break;
 8002b70:	e108      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b72:	4b88      	ldr	r3, [pc, #544]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002b7c:	4b85      	ldr	r3, [pc, #532]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b86:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b88:	4b82      	ldr	r3, [pc, #520]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b92:	4b80      	ldr	r3, [pc, #512]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b96:	08db      	lsrs	r3, r3, #3
 8002b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ba2:	ee07 3a90 	vmov	s15, r3
 8002ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002baa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80e1 	beq.w	8002d78 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	f000 8083 	beq.w	8002cc4 <HAL_RCC_GetSysClockFreq+0x204>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	f200 80a1 	bhi.w	8002d08 <HAL_RCC_GetSysClockFreq+0x248>
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x114>
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d056      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002bd2:	e099      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bd4:	4b6f      	ldr	r3, [pc, #444]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d02d      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002be0:	4b6c      	ldr	r3, [pc, #432]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	08db      	lsrs	r3, r3, #3
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	4a6b      	ldr	r2, [pc, #428]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c0a:	4b62      	ldr	r3, [pc, #392]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002c3a:	e087      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c46:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002da8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c4e:	4b51      	ldr	r3, [pc, #324]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c56:	ee07 3a90 	vmov	s15, r3
 8002c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c62:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c7e:	e065      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002dac <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c92:	4b40      	ldr	r3, [pc, #256]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9a:	ee07 3a90 	vmov	s15, r3
 8002c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ca2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ca6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cc2:	e043      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cce:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002db0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cd6:	4b2f      	ldr	r3, [pc, #188]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ce6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d06:	e021      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	ee07 3a90 	vmov	s15, r3
 8002d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d12:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002dac <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d2e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002da4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d4a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	0a5b      	lsrs	r3, r3, #9
 8002d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d56:	3301      	adds	r3, #1
 8002d58:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	ee07 3a90 	vmov	s15, r3
 8002d60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d70:	ee17 3a90 	vmov	r3, s15
 8002d74:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002d76:	e005      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
    break;
 8002d7c:	e002      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002d7e:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d80:	61bb      	str	r3, [r7, #24]
    break;
 8002d82:	bf00      	nop
  }

  return sysclockfreq;
 8002d84:	69bb      	ldr	r3, [r7, #24]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3724      	adds	r7, #36	; 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	58024400 	.word	0x58024400
 8002d98:	03d09000 	.word	0x03d09000
 8002d9c:	003d0900 	.word	0x003d0900
 8002da0:	007a1200 	.word	0x007a1200
 8002da4:	46000000 	.word	0x46000000
 8002da8:	4c742400 	.word	0x4c742400
 8002dac:	4a742400 	.word	0x4a742400
 8002db0:	4af42400 	.word	0x4af42400

08002db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002dba:	f7ff fe81 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <HAL_RCC_GetHCLKFreq+0x50>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	0a1b      	lsrs	r3, r3, #8
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	490f      	ldr	r1, [pc, #60]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x54>)
 8002dcc:	5ccb      	ldrb	r3, [r1, r3]
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <HAL_RCC_GetHCLKFreq+0x50>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x54>)
 8002de2:	5cd3      	ldrb	r3, [r2, r3]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	fa22 f303 	lsr.w	r3, r2, r3
 8002dee:	4a07      	ldr	r2, [pc, #28]	; (8002e0c <HAL_RCC_GetHCLKFreq+0x58>)
 8002df0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002df2:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002df8:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <HAL_RCC_GetHCLKFreq+0x58>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	58024400 	.word	0x58024400
 8002e08:	08006100 	.word	0x08006100
 8002e0c:	24000004 	.word	0x24000004
 8002e10:	24000000 	.word	0x24000000

08002e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002e18:	f7ff ffcc 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	4904      	ldr	r1, [pc, #16]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	58024400 	.word	0x58024400
 8002e3c:	08006100 	.word	0x08006100

08002e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002e44:	f7ff ffb6 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4904      	ldr	r1, [pc, #16]	; (8002e68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	58024400 	.word	0x58024400
 8002e68:	08006100 	.word	0x08006100

08002e6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e74:	2300      	movs	r3, #0
 8002e76:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e78:	2300      	movs	r3, #0
 8002e7a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d03f      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e90:	d02a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e96:	d824      	bhi.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e9c:	d018      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ea2:	d81e      	bhi.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ea8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eac:	d007      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002eae:	e018      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eb0:	4bab      	ldr	r3, [pc, #684]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	4aaa      	ldr	r2, [pc, #680]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002ebc:	e015      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 f989 	bl	80041dc <RCCEx_PLL2_Config>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002ece:	e00c      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3324      	adds	r3, #36	; 0x24
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f001 fa32 	bl	8004340 <RCCEx_PLL3_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002ee0:	e003      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee6:	e000      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eea:	7dfb      	ldrb	r3, [r7, #23]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002ef0:	4b9b      	ldr	r3, [pc, #620]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efc:	4998      	ldr	r1, [pc, #608]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	650b      	str	r3, [r1, #80]	; 0x50
 8002f02:	e001      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d03d      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d826      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f1c:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f39 	.word	0x08002f39
 8002f28:	08002f47 	.word	0x08002f47
 8002f2c:	08002f59 	.word	0x08002f59
 8002f30:	08002f71 	.word	0x08002f71
 8002f34:	08002f71 	.word	0x08002f71
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f38:	4b89      	ldr	r3, [pc, #548]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	4a88      	ldr	r2, [pc, #544]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f44:	e015      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f001 f945 	bl	80041dc <RCCEx_PLL2_Config>
 8002f52:	4603      	mov	r3, r0
 8002f54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f56:	e00c      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3324      	adds	r3, #36	; 0x24
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f001 f9ee 	bl	8004340 <RCCEx_PLL3_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f68:	e003      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8002f6e:	e000      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d109      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f78:	4b79      	ldr	r3, [pc, #484]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7c:	f023 0207 	bic.w	r2, r3, #7
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	4976      	ldr	r1, [pc, #472]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	650b      	str	r3, [r1, #80]	; 0x50
 8002f8a:	e001      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d051      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fa2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002fa6:	d036      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002fa8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002fac:	d830      	bhi.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002fae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fb2:	d032      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002fb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fb8:	d82a      	bhi.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002fba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002fbe:	d02e      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002fc0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002fc4:	d824      	bhi.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fca:	d018      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd0:	d81e      	bhi.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002fd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fda:	d007      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002fdc:	e018      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fde:	4b60      	ldr	r3, [pc, #384]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	4a5f      	ldr	r2, [pc, #380]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fea:	e019      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 f8f2 	bl	80041dc <RCCEx_PLL2_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002ffc:	e010      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3324      	adds	r3, #36	; 0x24
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f001 f99b 	bl	8004340 <RCCEx_PLL3_Config>
 800300a:	4603      	mov	r3, r0
 800300c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800300e:	e007      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	75fb      	strb	r3, [r7, #23]
      break;
 8003014:	e004      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003016:	bf00      	nop
 8003018:	e002      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800301a:	bf00      	nop
 800301c:	e000      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800301e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003026:	4b4e      	ldr	r3, [pc, #312]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003034:	494a      	ldr	r1, [pc, #296]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	658b      	str	r3, [r1, #88]	; 0x58
 800303a:	e001      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303c:	7dfb      	ldrb	r3, [r7, #23]
 800303e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003048:	2b00      	cmp	r3, #0
 800304a:	d051      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003052:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003056:	d036      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003058:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800305c:	d830      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800305e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003062:	d032      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003064:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003068:	d82a      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800306a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800306e:	d02e      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003070:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003074:	d824      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003076:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800307a:	d018      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x242>
 800307c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003080:	d81e      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003086:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800308a:	d007      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800308c:	e018      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800308e:	4b34      	ldr	r3, [pc, #208]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	4a33      	ldr	r2, [pc, #204]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003098:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800309a:	e019      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f001 f89a 	bl	80041dc <RCCEx_PLL2_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80030ac:	e010      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3324      	adds	r3, #36	; 0x24
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f001 f943 	bl	8004340 <RCCEx_PLL3_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030be:	e007      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	75fb      	strb	r3, [r7, #23]
      break;
 80030c4:	e004      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80030c6:	bf00      	nop
 80030c8:	e002      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80030ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80030d6:	4b22      	ldr	r3, [pc, #136]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030e4:	491e      	ldr	r1, [pc, #120]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	658b      	str	r3, [r1, #88]	; 0x58
 80030ea:	e001      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
 80030ee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d035      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003100:	2b30      	cmp	r3, #48	; 0x30
 8003102:	d01c      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003104:	2b30      	cmp	r3, #48	; 0x30
 8003106:	d817      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003108:	2b20      	cmp	r3, #32
 800310a:	d00c      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800310c:	2b20      	cmp	r3, #32
 800310e:	d813      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003110:	2b00      	cmp	r3, #0
 8003112:	d016      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003114:	2b10      	cmp	r3, #16
 8003116:	d10f      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003118:	4b11      	ldr	r3, [pc, #68]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	4a10      	ldr	r2, [pc, #64]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800311e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003122:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003124:	e00e      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	2102      	movs	r1, #2
 800312c:	4618      	mov	r0, r3
 800312e:	f001 f855 	bl	80041dc <RCCEx_PLL2_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003136:	e005      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	75fb      	strb	r3, [r7, #23]
      break;
 800313c:	e002      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800313e:	bf00      	nop
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10c      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800314a:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800314c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003156:	4902      	ldr	r1, [pc, #8]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800315c:	e004      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800315e:	bf00      	nop
 8003160:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003164:	7dfb      	ldrb	r3, [r7, #23]
 8003166:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d047      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800317c:	d030      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800317e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003182:	d82a      	bhi.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003184:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003188:	d02c      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800318a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800318e:	d824      	bhi.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003194:	d018      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319a:	d81e      	bhi.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80031a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a4:	d007      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80031a6:	e018      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a8:	4bac      	ldr	r3, [pc, #688]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	4aab      	ldr	r2, [pc, #684]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80031ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80031b4:	e017      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f001 f80d 	bl	80041dc <RCCEx_PLL2_Config>
 80031c2:	4603      	mov	r3, r0
 80031c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80031c6:	e00e      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3324      	adds	r3, #36	; 0x24
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f001 f8b6 	bl	8004340 <RCCEx_PLL3_Config>
 80031d4:	4603      	mov	r3, r0
 80031d6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80031d8:	e005      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	75fb      	strb	r3, [r7, #23]
      break;
 80031de:	e002      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80031e0:	bf00      	nop
 80031e2:	e000      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80031e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80031ec:	4b9b      	ldr	r3, [pc, #620]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80031ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	4998      	ldr	r1, [pc, #608]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	650b      	str	r3, [r1, #80]	; 0x50
 80031fe:	e001      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003200:	7dfb      	ldrb	r3, [r7, #23]
 8003202:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d049      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003218:	d02e      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800321a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800321e:	d828      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003220:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003224:	d02a      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003226:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800322a:	d822      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800322c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003230:	d026      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003232:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003236:	d81c      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003238:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800323c:	d010      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800323e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003242:	d816      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01d      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324c:	d111      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3304      	adds	r3, #4
 8003252:	2101      	movs	r1, #1
 8003254:	4618      	mov	r0, r3
 8003256:	f000 ffc1 	bl	80041dc <RCCEx_PLL2_Config>
 800325a:	4603      	mov	r3, r0
 800325c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800325e:	e012      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3324      	adds	r3, #36	; 0x24
 8003264:	2101      	movs	r1, #1
 8003266:	4618      	mov	r0, r3
 8003268:	f001 f86a 	bl	8004340 <RCCEx_PLL3_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003270:	e009      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]
      break;
 8003276:	e006      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003278:	bf00      	nop
 800327a:	e004      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800327c:	bf00      	nop
 800327e:	e002      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003280:	bf00      	nop
 8003282:	e000      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003286:	7dfb      	ldrb	r3, [r7, #23]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d109      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800328c:	4b73      	ldr	r3, [pc, #460]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800328e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003290:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	4970      	ldr	r1, [pc, #448]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800329a:	4313      	orrs	r3, r2
 800329c:	650b      	str	r3, [r1, #80]	; 0x50
 800329e:	e001      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d04b      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ba:	d02e      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80032bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c0:	d828      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80032c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c6:	d02a      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80032c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032cc:	d822      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80032ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032d2:	d026      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80032d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032d8:	d81c      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80032da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032de:	d010      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80032e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032e4:	d816      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d01d      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80032ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ee:	d111      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	2101      	movs	r1, #1
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 ff70 	bl	80041dc <RCCEx_PLL2_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003300:	e012      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3324      	adds	r3, #36	; 0x24
 8003306:	2101      	movs	r1, #1
 8003308:	4618      	mov	r0, r3
 800330a:	f001 f819 	bl	8004340 <RCCEx_PLL3_Config>
 800330e:	4603      	mov	r3, r0
 8003310:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003312:	e009      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	75fb      	strb	r3, [r7, #23]
      break;
 8003318:	e006      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800331a:	bf00      	nop
 800331c:	e004      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800331e:	bf00      	nop
 8003320:	e002      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003322:	bf00      	nop
 8003324:	e000      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800332e:	4b4b      	ldr	r3, [pc, #300]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800333c:	4947      	ldr	r1, [pc, #284]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800333e:	4313      	orrs	r3, r2
 8003340:	658b      	str	r3, [r1, #88]	; 0x58
 8003342:	e001      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d02f      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800335c:	d00e      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800335e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003362:	d814      	bhi.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d015      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003368:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800336c:	d10f      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800336e:	4b3b      	ldr	r3, [pc, #236]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	4a3a      	ldr	r2, [pc, #232]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003378:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800337a:	e00c      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3304      	adds	r3, #4
 8003380:	2101      	movs	r1, #1
 8003382:	4618      	mov	r0, r3
 8003384:	f000 ff2a 	bl	80041dc <RCCEx_PLL2_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800338c:	e003      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	75fb      	strb	r3, [r7, #23]
      break;
 8003392:	e000      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d109      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800339c:	4b2f      	ldr	r3, [pc, #188]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800339e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033a8:	492c      	ldr	r1, [pc, #176]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	650b      	str	r3, [r1, #80]	; 0x50
 80033ae:	e001      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d032      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d81b      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80033c8:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	08003407 	.word	0x08003407
 80033d4:	080033e1 	.word	0x080033e1
 80033d8:	080033ef 	.word	0x080033ef
 80033dc:	08003407 	.word	0x08003407
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e0:	4b1e      	ldr	r3, [pc, #120]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	4a1d      	ldr	r2, [pc, #116]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80033e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80033ec:	e00c      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3304      	adds	r3, #4
 80033f2:	2102      	movs	r1, #2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fef1 	bl	80041dc <RCCEx_PLL2_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80033fe:	e003      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	75fb      	strb	r3, [r7, #23]
      break;
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003408:	7dfb      	ldrb	r3, [r7, #23]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800340e:	4b13      	ldr	r3, [pc, #76]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003412:	f023 0203 	bic.w	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	4910      	ldr	r1, [pc, #64]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800341c:	4313      	orrs	r3, r2
 800341e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003420:	e001      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 808a 	beq.w	8003548 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003434:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a09      	ldr	r2, [pc, #36]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800343a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003440:	f7fd fec0 	bl	80011c4 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003446:	e00d      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003448:	f7fd febc 	bl	80011c4 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	; 0x64
 8003454:	d906      	bls.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	75fb      	strb	r3, [r7, #23]
        break;
 800345a:	e009      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800345c:	58024400 	.word	0x58024400
 8003460:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003464:	4bb9      	ldr	r3, [pc, #740]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0eb      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003470:	7dfb      	ldrb	r3, [r7, #23]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d166      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003476:	4bb6      	ldr	r3, [pc, #728]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003478:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003480:	4053      	eors	r3, r2
 8003482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003486:	2b00      	cmp	r3, #0
 8003488:	d013      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800348a:	4bb1      	ldr	r3, [pc, #708]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003492:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003494:	4bae      	ldr	r3, [pc, #696]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	4aad      	ldr	r2, [pc, #692]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800349a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034a0:	4bab      	ldr	r3, [pc, #684]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	4aaa      	ldr	r2, [pc, #680]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80034a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034aa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80034ac:	4aa8      	ldr	r2, [pc, #672]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034bc:	d115      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fd fe81 	bl	80011c4 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034c4:	e00b      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c6:	f7fd fe7d 	bl	80011c4 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d902      	bls.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	75fb      	strb	r3, [r7, #23]
            break;
 80034dc:	e005      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034de:	4b9c      	ldr	r3, [pc, #624]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0ed      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d126      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034fe:	d10d      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8003500:	4b93      	ldr	r3, [pc, #588]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800350e:	0919      	lsrs	r1, r3, #4
 8003510:	4b90      	ldr	r3, [pc, #576]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003512:	400b      	ands	r3, r1
 8003514:	498e      	ldr	r1, [pc, #568]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003516:	4313      	orrs	r3, r2
 8003518:	610b      	str	r3, [r1, #16]
 800351a:	e005      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800351c:	4b8c      	ldr	r3, [pc, #560]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	4a8b      	ldr	r2, [pc, #556]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003522:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003526:	6113      	str	r3, [r2, #16]
 8003528:	4b89      	ldr	r3, [pc, #548]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800352a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003536:	4986      	ldr	r1, [pc, #536]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003538:	4313      	orrs	r3, r2
 800353a:	670b      	str	r3, [r1, #112]	; 0x70
 800353c:	e004      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800353e:	7dfb      	ldrb	r3, [r7, #23]
 8003540:	75bb      	strb	r3, [r7, #22]
 8003542:	e001      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d07e      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	2b28      	cmp	r3, #40	; 0x28
 800355a:	d867      	bhi.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800355c:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	08003633 	.word	0x08003633
 8003568:	0800362d 	.word	0x0800362d
 800356c:	0800362d 	.word	0x0800362d
 8003570:	0800362d 	.word	0x0800362d
 8003574:	0800362d 	.word	0x0800362d
 8003578:	0800362d 	.word	0x0800362d
 800357c:	0800362d 	.word	0x0800362d
 8003580:	0800362d 	.word	0x0800362d
 8003584:	08003609 	.word	0x08003609
 8003588:	0800362d 	.word	0x0800362d
 800358c:	0800362d 	.word	0x0800362d
 8003590:	0800362d 	.word	0x0800362d
 8003594:	0800362d 	.word	0x0800362d
 8003598:	0800362d 	.word	0x0800362d
 800359c:	0800362d 	.word	0x0800362d
 80035a0:	0800362d 	.word	0x0800362d
 80035a4:	0800361b 	.word	0x0800361b
 80035a8:	0800362d 	.word	0x0800362d
 80035ac:	0800362d 	.word	0x0800362d
 80035b0:	0800362d 	.word	0x0800362d
 80035b4:	0800362d 	.word	0x0800362d
 80035b8:	0800362d 	.word	0x0800362d
 80035bc:	0800362d 	.word	0x0800362d
 80035c0:	0800362d 	.word	0x0800362d
 80035c4:	08003633 	.word	0x08003633
 80035c8:	0800362d 	.word	0x0800362d
 80035cc:	0800362d 	.word	0x0800362d
 80035d0:	0800362d 	.word	0x0800362d
 80035d4:	0800362d 	.word	0x0800362d
 80035d8:	0800362d 	.word	0x0800362d
 80035dc:	0800362d 	.word	0x0800362d
 80035e0:	0800362d 	.word	0x0800362d
 80035e4:	08003633 	.word	0x08003633
 80035e8:	0800362d 	.word	0x0800362d
 80035ec:	0800362d 	.word	0x0800362d
 80035f0:	0800362d 	.word	0x0800362d
 80035f4:	0800362d 	.word	0x0800362d
 80035f8:	0800362d 	.word	0x0800362d
 80035fc:	0800362d 	.word	0x0800362d
 8003600:	0800362d 	.word	0x0800362d
 8003604:	08003633 	.word	0x08003633
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	2101      	movs	r1, #1
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fde4 	bl	80041dc <RCCEx_PLL2_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003618:	e00c      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3324      	adds	r3, #36	; 0x24
 800361e:	2101      	movs	r1, #1
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fe8d 	bl	8004340 <RCCEx_PLL3_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800362a:	e003      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	75fb      	strb	r3, [r7, #23]
      break;
 8003630:	e000      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8003632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003634:	7dfb      	ldrb	r3, [r7, #23]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800363a:	4b45      	ldr	r3, [pc, #276]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800363c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003646:	4942      	ldr	r1, [pc, #264]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003648:	4313      	orrs	r3, r2
 800364a:	654b      	str	r3, [r1, #84]	; 0x54
 800364c:	e001      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364e:	7dfb      	ldrb	r3, [r7, #23]
 8003650:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d037      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	2b05      	cmp	r3, #5
 8003664:	d820      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003666:	a201      	add	r2, pc, #4	; (adr r2, 800366c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	080036af 	.word	0x080036af
 8003670:	08003685 	.word	0x08003685
 8003674:	08003697 	.word	0x08003697
 8003678:	080036af 	.word	0x080036af
 800367c:	080036af 	.word	0x080036af
 8003680:	080036af 	.word	0x080036af
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	2101      	movs	r1, #1
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fda6 	bl	80041dc <RCCEx_PLL2_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003694:	e00c      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3324      	adds	r3, #36	; 0x24
 800369a:	2101      	movs	r1, #1
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fe4f 	bl	8004340 <RCCEx_PLL3_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80036a6:	e003      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	75fb      	strb	r3, [r7, #23]
      break;
 80036ac:	e000      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80036ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80036b6:	4b26      	ldr	r3, [pc, #152]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ba:	f023 0207 	bic.w	r2, r3, #7
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	4923      	ldr	r1, [pc, #140]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	654b      	str	r3, [r1, #84]	; 0x54
 80036c8:	e001      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ca:	7dfb      	ldrb	r3, [r7, #23]
 80036cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d040      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e0:	2b05      	cmp	r3, #5
 80036e2:	d821      	bhi.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80036e4:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	0800372f 	.word	0x0800372f
 80036f0:	08003705 	.word	0x08003705
 80036f4:	08003717 	.word	0x08003717
 80036f8:	0800372f 	.word	0x0800372f
 80036fc:	0800372f 	.word	0x0800372f
 8003700:	0800372f 	.word	0x0800372f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	2101      	movs	r1, #1
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fd66 	bl	80041dc <RCCEx_PLL2_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003714:	e00c      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3324      	adds	r3, #36	; 0x24
 800371a:	2101      	movs	r1, #1
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fe0f 	bl	8004340 <RCCEx_PLL3_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003726:	e003      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	75fb      	strb	r3, [r7, #23]
      break;
 800372c:	e000      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800372e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d110      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	f023 0207 	bic.w	r2, r3, #7
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003744:	4902      	ldr	r1, [pc, #8]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003746:	4313      	orrs	r3, r2
 8003748:	658b      	str	r3, [r1, #88]	; 0x58
 800374a:	e007      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800374c:	58024800 	.word	0x58024800
 8003750:	58024400 	.word	0x58024400
 8003754:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d04b      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003772:	d02e      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003778:	d828      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377e:	d02a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003784:	d822      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003786:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800378a:	d026      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800378c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003790:	d81c      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003796:	d010      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800379c:	d816      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d01d      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x972>
 80037a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037a6:	d111      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3304      	adds	r3, #4
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fd14 	bl	80041dc <RCCEx_PLL2_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80037b8:	e012      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3324      	adds	r3, #36	; 0x24
 80037be:	2102      	movs	r1, #2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fdbd 	bl	8004340 <RCCEx_PLL3_Config>
 80037c6:	4603      	mov	r3, r0
 80037c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80037ca:	e009      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	75fb      	strb	r3, [r7, #23]
      break;
 80037d0:	e006      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80037d2:	bf00      	nop
 80037d4:	e004      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80037d6:	bf00      	nop
 80037d8:	e002      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80037de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10a      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037e6:	4bb2      	ldr	r3, [pc, #712]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	49ae      	ldr	r1, [pc, #696]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	654b      	str	r3, [r1, #84]	; 0x54
 80037fa:	e001      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d04b      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003812:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003816:	d02e      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003818:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800381c:	d828      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800381e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003822:	d02a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003828:	d822      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800382a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800382e:	d026      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003830:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003834:	d81c      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800383a:	d010      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800383c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003840:	d816      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d01d      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384a:	d111      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3304      	adds	r3, #4
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fcc2 	bl	80041dc <RCCEx_PLL2_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800385c:	e012      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3324      	adds	r3, #36	; 0x24
 8003862:	2102      	movs	r1, #2
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fd6b 	bl	8004340 <RCCEx_PLL3_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800386e:	e009      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	75fb      	strb	r3, [r7, #23]
      break;
 8003874:	e006      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003876:	bf00      	nop
 8003878:	e004      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800387a:	bf00      	nop
 800387c:	e002      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003882:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10a      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800388a:	4b89      	ldr	r3, [pc, #548]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003898:	4985      	ldr	r1, [pc, #532]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800389a:	4313      	orrs	r3, r2
 800389c:	658b      	str	r3, [r1, #88]	; 0x58
 800389e:	e001      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a0:	7dfb      	ldrb	r3, [r7, #23]
 80038a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d04b      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80038ba:	d02e      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80038bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80038c0:	d828      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80038c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c6:	d02a      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80038c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038cc:	d822      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80038ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80038d2:	d026      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80038d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80038d8:	d81c      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80038da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038de:	d010      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80038e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e4:	d816      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d01d      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80038ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ee:	d111      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3304      	adds	r3, #4
 80038f4:	2100      	movs	r1, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fc70 	bl	80041dc <RCCEx_PLL2_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003900:	e012      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3324      	adds	r3, #36	; 0x24
 8003906:	2102      	movs	r1, #2
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fd19 	bl	8004340 <RCCEx_PLL3_Config>
 800390e:	4603      	mov	r3, r0
 8003910:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003912:	e009      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	75fb      	strb	r3, [r7, #23]
      break;
 8003918:	e006      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800391a:	bf00      	nop
 800391c:	e004      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800391e:	bf00      	nop
 8003920:	e002      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003922:	bf00      	nop
 8003924:	e000      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003928:	7dfb      	ldrb	r3, [r7, #23]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800392e:	4b60      	ldr	r3, [pc, #384]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800393c:	495c      	ldr	r1, [pc, #368]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800393e:	4313      	orrs	r3, r2
 8003940:	658b      	str	r3, [r1, #88]	; 0x58
 8003942:	e001      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003944:	7dfb      	ldrb	r3, [r7, #23]
 8003946:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d018      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395c:	d10a      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3324      	adds	r3, #36	; 0x24
 8003962:	2102      	movs	r1, #2
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fceb 	bl	8004340 <RCCEx_PLL3_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003974:	4b4e      	ldr	r3, [pc, #312]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003980:	494b      	ldr	r1, [pc, #300]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003982:	4313      	orrs	r3, r2
 8003984:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b00      	cmp	r3, #0
 8003990:	d01a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800399c:	d10a      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3324      	adds	r3, #36	; 0x24
 80039a2:	2102      	movs	r1, #2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fccb 	bl	8004340 <RCCEx_PLL3_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039b4:	4b3e      	ldr	r3, [pc, #248]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	493b      	ldr	r1, [pc, #236]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d034      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039de:	d01d      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80039e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e4:	d817      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80039ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ee:	d009      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80039f0:	e011      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fbef 	bl	80041dc <RCCEx_PLL2_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003a02:	e00c      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3324      	adds	r3, #36	; 0x24
 8003a08:	2102      	movs	r1, #2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fc98 	bl	8004340 <RCCEx_PLL3_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003a14:	e003      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1a:	e000      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8003a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a24:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a32:	491f      	ldr	r1, [pc, #124]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	658b      	str	r3, [r1, #88]	; 0x58
 8003a38:	e001      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d036      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a54:	d01c      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003a56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a5a:	d816      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a60:	d003      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003a62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a66:	d007      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8003a68:	e00f      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a6a:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	4a10      	ldr	r2, [pc, #64]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003a76:	e00c      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3324      	adds	r3, #36	; 0x24
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fc5e 	bl	8004340 <RCCEx_PLL3_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003a88:	e003      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a8e:	e000      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8003a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10d      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aa6:	4902      	ldr	r1, [pc, #8]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	654b      	str	r3, [r1, #84]	; 0x54
 8003aac:	e004      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8003aae:	bf00      	nop
 8003ab0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
 8003ab6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d029      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad0:	d007      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003ad2:	e00f      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad4:	4b61      	ldr	r3, [pc, #388]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	4a60      	ldr	r2, [pc, #384]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ade:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ae0:	e00b      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fb77 	bl	80041dc <RCCEx_PLL2_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003af2:	e002      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	75fb      	strb	r3, [r7, #23]
      break;
 8003af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b00:	4b56      	ldr	r3, [pc, #344]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0c:	4953      	ldr	r1, [pc, #332]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b12:	e001      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
 8003b16:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3324      	adds	r3, #36	; 0x24
 8003b28:	2102      	movs	r1, #2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fc08 	bl	8004340 <RCCEx_PLL3_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d030      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b4e:	d017      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003b50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b54:	d811      	bhi.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b5a:	d013      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8003b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b60:	d80b      	bhi.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d010      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8003b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b6c:	4b3b      	ldr	r3, [pc, #236]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	4a3a      	ldr	r2, [pc, #232]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003b78:	e007      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b7e:	e004      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003b80:	bf00      	nop
 8003b82:	e002      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003b84:	bf00      	nop
 8003b86:	e000      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d109      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b90:	4b32      	ldr	r3, [pc, #200]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b9c:	492f      	ldr	r1, [pc, #188]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	654b      	str	r3, [r1, #84]	; 0x54
 8003ba2:	e001      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
 8003ba6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bb4:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc0:	4926      	ldr	r1, [pc, #152]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bd2:	4b22      	ldr	r3, [pc, #136]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bde:	491f      	ldr	r1, [pc, #124]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00d      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bf0:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	4a19      	ldr	r2, [pc, #100]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003bf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bfa:	6113      	str	r3, [r2, #16]
 8003bfc:	4b17      	ldr	r3, [pc, #92]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c06:	4915      	ldr	r1, [pc, #84]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	da08      	bge.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c20:	490e      	ldr	r1, [pc, #56]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c32:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c40:	4906      	ldr	r1, [pc, #24]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003c46:	7dbb      	ldrb	r3, [r7, #22]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	58024400 	.word	0x58024400

08003c60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003c64:	f7ff f8a6 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	4904      	ldr	r1, [pc, #16]	; (8003c88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003c76:	5ccb      	ldrb	r3, [r1, r3]
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	58024400 	.word	0x58024400
 8003c88:	08006100 	.word	0x08006100

08003c8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b089      	sub	sp, #36	; 0x24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c94:	4ba1      	ldr	r3, [pc, #644]	; (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003c9e:	4b9f      	ldr	r3, [pc, #636]	; (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	0b1b      	lsrs	r3, r3, #12
 8003ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ca8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003caa:	4b9c      	ldr	r3, [pc, #624]	; (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	091b      	lsrs	r3, r3, #4
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003cb6:	4b99      	ldr	r3, [pc, #612]	; (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	08db      	lsrs	r3, r3, #3
 8003cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8111 	beq.w	8003efc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	f000 8083 	beq.w	8003de8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	f200 80a1 	bhi.w	8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d056      	beq.n	8003da4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003cf6:	e099      	b.n	8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cf8:	4b88      	ldr	r3, [pc, #544]	; (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d02d      	beq.n	8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d04:	4b85      	ldr	r3, [pc, #532]	; (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	08db      	lsrs	r3, r3, #3
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	4a84      	ldr	r2, [pc, #528]	; (8003f20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
 8003d14:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	ee07 3a90 	vmov	s15, r3
 8003d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d2e:	4b7b      	ldr	r3, [pc, #492]	; (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003d5e:	e087      	b.n	8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d72:	4b6a      	ldr	r3, [pc, #424]	; (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003da2:	e065      	b.n	8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003db6:	4b59      	ldr	r3, [pc, #356]	; (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003de6:	e043      	b.n	8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	ee07 3a90 	vmov	s15, r3
 8003dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dfa:	4b48      	ldr	r3, [pc, #288]	; (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e02:	ee07 3a90 	vmov	s15, r3
 8003e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e2a:	e021      	b.n	8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e3e:	4b37      	ldr	r3, [pc, #220]	; (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e46:	ee07 3a90 	vmov	s15, r3
 8003e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003e70:	4b2a      	ldr	r3, [pc, #168]	; (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	0a5b      	lsrs	r3, r3, #9
 8003e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e96:	ee17 2a90 	vmov	r2, s15
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003e9e:	4b1f      	ldr	r3, [pc, #124]	; (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	0c1b      	lsrs	r3, r3, #16
 8003ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ea8:	ee07 3a90 	vmov	s15, r3
 8003eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec4:	ee17 2a90 	vmov	r2, s15
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003ecc:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed0:	0e1b      	lsrs	r3, r3, #24
 8003ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ee6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ef2:	ee17 2a90 	vmov	r2, s15
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003efa:	e008      	b.n	8003f0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	609a      	str	r2, [r3, #8]
}
 8003f0e:	bf00      	nop
 8003f10:	3724      	adds	r7, #36	; 0x24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	58024400 	.word	0x58024400
 8003f20:	03d09000 	.word	0x03d09000
 8003f24:	46000000 	.word	0x46000000
 8003f28:	4c742400 	.word	0x4c742400
 8003f2c:	4a742400 	.word	0x4a742400
 8003f30:	4af42400 	.word	0x4af42400

08003f34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b089      	sub	sp, #36	; 0x24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f3c:	4ba1      	ldr	r3, [pc, #644]	; (80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003f46:	4b9f      	ldr	r3, [pc, #636]	; (80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	0d1b      	lsrs	r3, r3, #20
 8003f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003f52:	4b9c      	ldr	r3, [pc, #624]	; (80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	0a1b      	lsrs	r3, r3, #8
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003f5e:	4b99      	ldr	r3, [pc, #612]	; (80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	08db      	lsrs	r3, r3, #3
 8003f64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	fb02 f303 	mul.w	r3, r2, r3
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8111 	beq.w	80041a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	f000 8083 	beq.w	8004090 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	f200 80a1 	bhi.w	80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d056      	beq.n	800404c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003f9e:	e099      	b.n	80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fa0:	4b88      	ldr	r3, [pc, #544]	; (80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d02d      	beq.n	8004008 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fac:	4b85      	ldr	r3, [pc, #532]	; (80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	08db      	lsrs	r3, r3, #3
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	4a84      	ldr	r2, [pc, #528]	; (80041c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	ee07 3a90 	vmov	s15, r3
 8003fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fd6:	4b7b      	ldr	r3, [pc, #492]	; (80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80041cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004002:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004006:	e087      	b.n	8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004012:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800401a:	4b6a      	ldr	r3, [pc, #424]	; (80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800402a:	ed97 6a03 	vldr	s12, [r7, #12]
 800402e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80041cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800403a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800403e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004046:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800404a:	e065      	b.n	8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004056:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80041d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800405a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800405e:	4b59      	ldr	r3, [pc, #356]	; (80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004072:	eddf 5a56 	vldr	s11, [pc, #344]	; 80041cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800407a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800407e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800408e:	e043      	b.n	8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80041d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800409e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a2:	4b48      	ldr	r3, [pc, #288]	; (80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80041cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040d2:	e021      	b.n	8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80041d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80040e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040e6:	4b37      	ldr	r3, [pc, #220]	; (80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80040fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80041cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800410a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800410e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004112:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004116:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004118:	4b2a      	ldr	r3, [pc, #168]	; (80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	0a5b      	lsrs	r3, r3, #9
 800411e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800412e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004132:	edd7 6a07 	vldr	s13, [r7, #28]
 8004136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800413a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800413e:	ee17 2a90 	vmov	r2, s15
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004146:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	0c1b      	lsrs	r3, r3, #16
 800414c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004150:	ee07 3a90 	vmov	s15, r3
 8004154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004158:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800415c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004160:	edd7 6a07 	vldr	s13, [r7, #28]
 8004164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800416c:	ee17 2a90 	vmov	r2, s15
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004174:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	0e1b      	lsrs	r3, r3, #24
 800417a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004186:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800418a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800418e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800419a:	ee17 2a90 	vmov	r2, s15
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80041a2:	e008      	b.n	80041b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	609a      	str	r2, [r3, #8]
}
 80041b6:	bf00      	nop
 80041b8:	3724      	adds	r7, #36	; 0x24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	58024400 	.word	0x58024400
 80041c8:	03d09000 	.word	0x03d09000
 80041cc:	46000000 	.word	0x46000000
 80041d0:	4c742400 	.word	0x4c742400
 80041d4:	4a742400 	.word	0x4a742400
 80041d8:	4af42400 	.word	0x4af42400

080041dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041ea:	4b53      	ldr	r3, [pc, #332]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d101      	bne.n	80041fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e099      	b.n	800432e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041fa:	4b4f      	ldr	r3, [pc, #316]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a4e      	ldr	r2, [pc, #312]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 8004200:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004206:	f7fc ffdd 	bl	80011c4 <HAL_GetTick>
 800420a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800420c:	e008      	b.n	8004220 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800420e:	f7fc ffd9 	bl	80011c4 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e086      	b.n	800432e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004220:	4b45      	ldr	r3, [pc, #276]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f0      	bne.n	800420e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800422c:	4b42      	ldr	r3, [pc, #264]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	031b      	lsls	r3, r3, #12
 800423a:	493f      	ldr	r1, [pc, #252]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	628b      	str	r3, [r1, #40]	; 0x28
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	3b01      	subs	r3, #1
 8004246:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	3b01      	subs	r3, #1
 8004250:	025b      	lsls	r3, r3, #9
 8004252:	b29b      	uxth	r3, r3
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	3b01      	subs	r3, #1
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	3b01      	subs	r3, #1
 800426a:	061b      	lsls	r3, r3, #24
 800426c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004270:	4931      	ldr	r1, [pc, #196]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 8004272:	4313      	orrs	r3, r2
 8004274:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004276:	4b30      	ldr	r3, [pc, #192]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	492d      	ldr	r1, [pc, #180]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 8004284:	4313      	orrs	r3, r2
 8004286:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004288:	4b2b      	ldr	r3, [pc, #172]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	f023 0220 	bic.w	r2, r3, #32
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	4928      	ldr	r1, [pc, #160]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 8004296:	4313      	orrs	r3, r2
 8004298:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800429a:	4b27      	ldr	r3, [pc, #156]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	4a26      	ldr	r2, [pc, #152]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 80042a0:	f023 0310 	bic.w	r3, r3, #16
 80042a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80042a6:	4b24      	ldr	r3, [pc, #144]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 80042a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042aa:	4b24      	ldr	r3, [pc, #144]	; (800433c <RCCEx_PLL2_Config+0x160>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	69d2      	ldr	r2, [r2, #28]
 80042b2:	00d2      	lsls	r2, r2, #3
 80042b4:	4920      	ldr	r1, [pc, #128]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80042ba:	4b1f      	ldr	r3, [pc, #124]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	4a1e      	ldr	r2, [pc, #120]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 80042c0:	f043 0310 	orr.w	r3, r3, #16
 80042c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80042cc:	4b1a      	ldr	r3, [pc, #104]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	4a19      	ldr	r2, [pc, #100]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 80042d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042d8:	e00f      	b.n	80042fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d106      	bne.n	80042ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80042e0:	4b15      	ldr	r3, [pc, #84]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	4a14      	ldr	r2, [pc, #80]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 80042e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042ec:	e005      	b.n	80042fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042ee:	4b12      	ldr	r3, [pc, #72]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	4a11      	ldr	r2, [pc, #68]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 80042f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042fa:	4b0f      	ldr	r3, [pc, #60]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a0e      	ldr	r2, [pc, #56]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 8004300:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004306:	f7fc ff5d 	bl	80011c4 <HAL_GetTick>
 800430a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800430c:	e008      	b.n	8004320 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800430e:	f7fc ff59 	bl	80011c4 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e006      	b.n	800432e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004320:	4b05      	ldr	r3, [pc, #20]	; (8004338 <RCCEx_PLL2_Config+0x15c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f0      	beq.n	800430e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	58024400 	.word	0x58024400
 800433c:	ffff0007 	.word	0xffff0007

08004340 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800434e:	4b53      	ldr	r3, [pc, #332]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b03      	cmp	r3, #3
 8004358:	d101      	bne.n	800435e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e099      	b.n	8004492 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800435e:	4b4f      	ldr	r3, [pc, #316]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a4e      	ldr	r2, [pc, #312]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436a:	f7fc ff2b 	bl	80011c4 <HAL_GetTick>
 800436e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004370:	e008      	b.n	8004384 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004372:	f7fc ff27 	bl	80011c4 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e086      	b.n	8004492 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004384:	4b45      	ldr	r3, [pc, #276]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f0      	bne.n	8004372 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004390:	4b42      	ldr	r3, [pc, #264]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	051b      	lsls	r3, r3, #20
 800439e:	493f      	ldr	r1, [pc, #252]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	628b      	str	r3, [r1, #40]	; 0x28
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	025b      	lsls	r3, r3, #9
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	3b01      	subs	r3, #1
 80043c0:	041b      	lsls	r3, r3, #16
 80043c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	061b      	lsls	r3, r3, #24
 80043d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043d4:	4931      	ldr	r1, [pc, #196]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043da:	4b30      	ldr	r3, [pc, #192]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	492d      	ldr	r1, [pc, #180]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043ec:	4b2b      	ldr	r3, [pc, #172]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	4928      	ldr	r1, [pc, #160]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043fe:	4b27      	ldr	r3, [pc, #156]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	4a26      	ldr	r2, [pc, #152]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004408:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800440a:	4b24      	ldr	r3, [pc, #144]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 800440c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800440e:	4b24      	ldr	r3, [pc, #144]	; (80044a0 <RCCEx_PLL3_Config+0x160>)
 8004410:	4013      	ands	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	69d2      	ldr	r2, [r2, #28]
 8004416:	00d2      	lsls	r2, r2, #3
 8004418:	4920      	ldr	r1, [pc, #128]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 800441a:	4313      	orrs	r3, r2
 800441c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800441e:	4b1f      	ldr	r3, [pc, #124]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	4a1e      	ldr	r2, [pc, #120]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004428:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004430:	4b1a      	ldr	r3, [pc, #104]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	4a19      	ldr	r2, [pc, #100]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004436:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800443a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800443c:	e00f      	b.n	800445e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d106      	bne.n	8004452 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004444:	4b15      	ldr	r3, [pc, #84]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	4a14      	ldr	r2, [pc, #80]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 800444a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800444e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004450:	e005      	b.n	800445e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004452:	4b12      	ldr	r3, [pc, #72]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	4a11      	ldr	r2, [pc, #68]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800445c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a0e      	ldr	r2, [pc, #56]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446a:	f7fc feab 	bl	80011c4 <HAL_GetTick>
 800446e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004470:	e008      	b.n	8004484 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004472:	f7fc fea7 	bl	80011c4 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e006      	b.n	8004492 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <RCCEx_PLL3_Config+0x15c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004490:	7bfb      	ldrb	r3, [r7, #15]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	58024400 	.word	0x58024400
 80044a0:	ffff0007 	.word	0xffff0007

080044a4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e0eb      	b.n	8004692 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a75      	ldr	r2, [pc, #468]	; (800469c <HAL_SPI_Init+0x1f8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00f      	beq.n	80044ea <HAL_SPI_Init+0x46>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a74      	ldr	r2, [pc, #464]	; (80046a0 <HAL_SPI_Init+0x1fc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00a      	beq.n	80044ea <HAL_SPI_Init+0x46>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a72      	ldr	r2, [pc, #456]	; (80046a4 <HAL_SPI_Init+0x200>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d005      	beq.n	80044ea <HAL_SPI_Init+0x46>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b0f      	cmp	r3, #15
 80044e4:	d901      	bls.n	80044ea <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e0d3      	b.n	8004692 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fc96 	bl	8004e1c <SPI_GetPacketSize>
 80044f0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a69      	ldr	r2, [pc, #420]	; (800469c <HAL_SPI_Init+0x1f8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00c      	beq.n	8004516 <HAL_SPI_Init+0x72>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a67      	ldr	r2, [pc, #412]	; (80046a0 <HAL_SPI_Init+0x1fc>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <HAL_SPI_Init+0x72>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a66      	ldr	r2, [pc, #408]	; (80046a4 <HAL_SPI_Init+0x200>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d002      	beq.n	8004516 <HAL_SPI_Init+0x72>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b08      	cmp	r3, #8
 8004514:	d811      	bhi.n	800453a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800451a:	4a60      	ldr	r2, [pc, #384]	; (800469c <HAL_SPI_Init+0x1f8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a5e      	ldr	r2, [pc, #376]	; (80046a0 <HAL_SPI_Init+0x1fc>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_SPI_Init+0x90>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a5d      	ldr	r2, [pc, #372]	; (80046a4 <HAL_SPI_Init+0x200>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d104      	bne.n	800453e <HAL_SPI_Init+0x9a>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b10      	cmp	r3, #16
 8004538:	d901      	bls.n	800453e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e0a9      	b.n	8004692 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fc fbf0 	bl	8000d38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0201 	bic.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004578:	d119      	bne.n	80045ae <HAL_SPI_Init+0x10a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004582:	d103      	bne.n	800458c <HAL_SPI_Init+0xe8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10c      	bne.n	80045ae <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800459c:	d107      	bne.n	80045ae <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69da      	ldr	r2, [r3, #28]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	431a      	orrs	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c0:	ea42 0103 	orr.w	r1, r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460e:	ea42 0103 	orr.w	r1, r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d113      	bne.n	800464e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004638:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800464c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0201 	bic.w	r2, r2, #1
 800465c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40013000 	.word	0x40013000
 80046a0:	40003800 	.word	0x40003800
 80046a4:	40003c00 	.word	0x40003c00

080046a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08e      	sub	sp, #56	; 0x38
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3320      	adds	r3, #32
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3330      	adds	r3, #48	; 0x30
 80046ca:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_SPI_TransmitReceive+0x32>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e2ce      	b.n	8004c78 <HAL_SPI_TransmitReceive+0x5d0>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046e2:	f7fc fd6f 	bl	80011c4 <HAL_GetTick>
 80046e6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80046e8:	887b      	ldrh	r3, [r7, #2]
 80046ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80046ec:	887b      	ldrh	r3, [r7, #2]
 80046ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80046f6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046fe:	7efb      	ldrb	r3, [r7, #27]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d014      	beq.n	800472e <HAL_SPI_TransmitReceive+0x86>
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800470a:	d106      	bne.n	800471a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <HAL_SPI_TransmitReceive+0x72>
 8004714:	7efb      	ldrb	r3, [r7, #27]
 8004716:	2b04      	cmp	r3, #4
 8004718:	d009      	beq.n	800472e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800471a:	2302      	movs	r3, #2
 800471c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004728:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800472c:	e2a4      	b.n	8004c78 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x98>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x98>
 800473a:	887b      	ldrh	r3, [r7, #2]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d109      	bne.n	8004754 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800474e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004752:	e291      	b.n	8004c78 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b04      	cmp	r3, #4
 800475e:	d003      	beq.n	8004768 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2205      	movs	r2, #5
 8004764:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	887a      	ldrh	r2, [r7, #2]
 800477a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	887a      	ldrh	r2, [r7, #2]
 8004782:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	887a      	ldrh	r2, [r7, #2]
 8004790:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	887a      	ldrh	r2, [r7, #2]
 8004798:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	4b9f      	ldr	r3, [pc, #636]	; (8004a2c <HAL_SPI_TransmitReceive+0x384>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	8879      	ldrh	r1, [r7, #2]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	430b      	orrs	r3, r1
 80047ba:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d4:	d107      	bne.n	80047e6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2b0f      	cmp	r3, #15
 80047ec:	d970      	bls.n	80048d0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80047ee:	e068      	b.n	80048c2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d11a      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x18c>
 80047fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004800:	2b00      	cmp	r3, #0
 8004802:	d017      	beq.n	8004834 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004814:	1d1a      	adds	r2, r3, #4
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004832:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	f248 0308 	movw	r3, #32776	; 0x8008
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01a      	beq.n	800487a <HAL_SPI_TransmitReceive+0x1d2>
 8004844:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d017      	beq.n	800487a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004852:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004854:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800485a:	1d1a      	adds	r2, r3, #4
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004878:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800487a:	f7fc fca3 	bl	80011c4 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004886:	429a      	cmp	r2, r3
 8004888:	d803      	bhi.n	8004892 <HAL_SPI_TransmitReceive+0x1ea>
 800488a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	d102      	bne.n	8004898 <HAL_SPI_TransmitReceive+0x1f0>
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	2b00      	cmp	r3, #0
 8004896:	d114      	bne.n	80048c2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 f9f1 	bl	8004c80 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e1da      	b.n	8004c78 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80048c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d193      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0x148>
 80048c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d190      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0x148>
 80048ce:	e1ac      	b.n	8004c2a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b07      	cmp	r3, #7
 80048d6:	f240 81a0 	bls.w	8004c1a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80048da:	e0a9      	b.n	8004a30 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d139      	bne.n	800495e <HAL_SPI_TransmitReceive+0x2b6>
 80048ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d036      	beq.n	800495e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80048f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d91c      	bls.n	8004930 <HAL_SPI_TransmitReceive+0x288>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d018      	beq.n	8004930 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490e:	1d1a      	adds	r2, r3, #4
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b02      	subs	r3, #2
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800492c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800492e:	e016      	b.n	800495e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004934:	881a      	ldrh	r2, [r3, #0]
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493e:	1c9a      	adds	r2, r3, #2
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800495c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d03a      	beq.n	80049e2 <HAL_SPI_TransmitReceive+0x33a>
 800496c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d037      	beq.n	80049e2 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d018      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004988:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800498a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004990:	1d1a      	adds	r2, r3, #4
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b02      	subs	r3, #2
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80049ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80049b0:	e017      	b.n	80049e2 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b6:	6a3a      	ldr	r2, [r7, #32]
 80049b8:	8812      	ldrh	r2, [r2, #0]
 80049ba:	b292      	uxth	r2, r2
 80049bc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049c2:	1c9a      	adds	r2, r3, #2
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80049e0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049e2:	f7fc fbef 	bl	80011c4 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d803      	bhi.n	80049fa <HAL_SPI_TransmitReceive+0x352>
 80049f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f8:	d102      	bne.n	8004a00 <HAL_SPI_TransmitReceive+0x358>
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d117      	bne.n	8004a30 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f93d 	bl	8004c80 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e126      	b.n	8004c78 <HAL_SPI_TransmitReceive+0x5d0>
 8004a2a:	bf00      	nop
 8004a2c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004a30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f47f af52 	bne.w	80048dc <HAL_SPI_TransmitReceive+0x234>
 8004a38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f47f af4e 	bne.w	80048dc <HAL_SPI_TransmitReceive+0x234>
 8004a40:	e0f3      	b.n	8004c2a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d15a      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x45e>
 8004a50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d057      	beq.n	8004b06 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004a56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d91c      	bls.n	8004a96 <HAL_SPI_TransmitReceive+0x3ee>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d918      	bls.n	8004a96 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a74:	1d1a      	adds	r2, r3, #4
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b04      	subs	r3, #4
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a92:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a94:	e037      	b.n	8004b06 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004a96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d91b      	bls.n	8004ad4 <HAL_SPI_TransmitReceive+0x42c>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d017      	beq.n	8004ad4 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa8:	881a      	ldrh	r2, [r3, #0]
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab2:	1c9a      	adds	r2, r3, #2
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b02      	subs	r3, #2
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004ad0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ad2:	e018      	b.n	8004b06 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3320      	adds	r3, #32
 8004ade:	7812      	ldrb	r2, [r2, #0]
 8004ae0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b04:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d05e      	beq.n	8004bd2 <HAL_SPI_TransmitReceive+0x52a>
 8004b14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d05b      	beq.n	8004bd2 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d018      	beq.n	8004b5a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b32:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b38:	1d1a      	adds	r2, r3, #4
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b04      	subs	r3, #4
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004b56:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004b58:	e03b      	b.n	8004bd2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8004b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b68:	d918      	bls.n	8004b9c <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b6e:	6a3a      	ldr	r2, [r7, #32]
 8004b70:	8812      	ldrh	r2, [r2, #0]
 8004b72:	b292      	uxth	r2, r2
 8004b74:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b7a:	1c9a      	adds	r2, r3, #2
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b02      	subs	r3, #2
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004b98:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004b9a:	e01a      	b.n	8004bd2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ba8:	7812      	ldrb	r2, [r2, #0]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004bd0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bd2:	f7fc faf7 	bl	80011c4 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d803      	bhi.n	8004bea <HAL_SPI_TransmitReceive+0x542>
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be8:	d102      	bne.n	8004bf0 <HAL_SPI_TransmitReceive+0x548>
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d114      	bne.n	8004c1a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f845 	bl	8004c80 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e02e      	b.n	8004c78 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004c1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f47f af10 	bne.w	8004a42 <HAL_SPI_TransmitReceive+0x39a>
 8004c22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f47f af0c 	bne.w	8004a42 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	2200      	movs	r2, #0
 8004c32:	2108      	movs	r1, #8
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f8c3 	bl	8004dc0 <SPI_WaitOnFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c46:	f043 0220 	orr.w	r2, r3, #32
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f815 	bl	8004c80 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e001      	b.n	8004c78 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8004c74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3730      	adds	r7, #48	; 0x30
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0208 	orr.w	r2, r2, #8
 8004c9e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0210 	orr.w	r2, r2, #16
 8004cae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0201 	bic.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6919      	ldr	r1, [r3, #16]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4b3c      	ldr	r3, [pc, #240]	; (8004dbc <SPI_CloseTransfer+0x13c>)
 8004ccc:	400b      	ands	r3, r1
 8004cce:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004cde:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d014      	beq.n	8004d16 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00f      	beq.n	8004d16 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699a      	ldr	r2, [r3, #24]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0220 	orr.w	r2, r2, #32
 8004d14:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d014      	beq.n	8004d4c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00f      	beq.n	8004d4c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d32:	f043 0204 	orr.w	r2, r3, #4
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d4a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00f      	beq.n	8004d76 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d5c:	f043 0201 	orr.w	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699a      	ldr	r2, [r3, #24]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d74:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00f      	beq.n	8004da0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d86:	f043 0208 	orr.w	r2, r3, #8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d9e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8004db0:	bf00      	nop
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	fffffc90 	.word	0xfffffc90

08004dc0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004dd0:	e010      	b.n	8004df4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dd2:	f7fc f9f7 	bl	80011c4 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d803      	bhi.n	8004dea <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de8:	d102      	bne.n	8004df0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e00f      	b.n	8004e14 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d0df      	beq.n	8004dd2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	3301      	adds	r3, #1
 8004e34:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	3307      	adds	r3, #7
 8004e3a:	08db      	lsrs	r3, r3, #3
 8004e3c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e042      	b.n	8004eea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fb ffe8 	bl	8000e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2224      	movs	r2, #36	; 0x24
 8004e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0201 	bic.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f82d 	bl	8004ef4 <UART_SetConfig>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e022      	b.n	8004eea <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fe7f 	bl	8005bb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ec0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ed0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 0201 	orr.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 ff06 	bl	8005cf4 <UART_CheckIdleState>
 8004ee8:	4603      	mov	r3, r0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef4:	b5b0      	push	{r4, r5, r7, lr}
 8004ef6:	b08e      	sub	sp, #56	; 0x38
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4bbf      	ldr	r3, [pc, #764]	; (8005220 <UART_SetConfig+0x32c>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f2a:	430b      	orrs	r3, r1
 8004f2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4ab5      	ldr	r2, [pc, #724]	; (8005224 <UART_SetConfig+0x330>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	4bb0      	ldr	r3, [pc, #704]	; (8005228 <UART_SetConfig+0x334>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	f023 010f 	bic.w	r1, r3, #15
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4aa7      	ldr	r2, [pc, #668]	; (800522c <UART_SetConfig+0x338>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d176      	bne.n	8005080 <UART_SetConfig+0x18c>
 8004f92:	4ba7      	ldr	r3, [pc, #668]	; (8005230 <UART_SetConfig+0x33c>)
 8004f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f9a:	2b28      	cmp	r3, #40	; 0x28
 8004f9c:	d86c      	bhi.n	8005078 <UART_SetConfig+0x184>
 8004f9e:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <UART_SetConfig+0xb0>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08005049 	.word	0x08005049
 8004fa8:	08005079 	.word	0x08005079
 8004fac:	08005079 	.word	0x08005079
 8004fb0:	08005079 	.word	0x08005079
 8004fb4:	08005079 	.word	0x08005079
 8004fb8:	08005079 	.word	0x08005079
 8004fbc:	08005079 	.word	0x08005079
 8004fc0:	08005079 	.word	0x08005079
 8004fc4:	08005051 	.word	0x08005051
 8004fc8:	08005079 	.word	0x08005079
 8004fcc:	08005079 	.word	0x08005079
 8004fd0:	08005079 	.word	0x08005079
 8004fd4:	08005079 	.word	0x08005079
 8004fd8:	08005079 	.word	0x08005079
 8004fdc:	08005079 	.word	0x08005079
 8004fe0:	08005079 	.word	0x08005079
 8004fe4:	08005059 	.word	0x08005059
 8004fe8:	08005079 	.word	0x08005079
 8004fec:	08005079 	.word	0x08005079
 8004ff0:	08005079 	.word	0x08005079
 8004ff4:	08005079 	.word	0x08005079
 8004ff8:	08005079 	.word	0x08005079
 8004ffc:	08005079 	.word	0x08005079
 8005000:	08005079 	.word	0x08005079
 8005004:	08005061 	.word	0x08005061
 8005008:	08005079 	.word	0x08005079
 800500c:	08005079 	.word	0x08005079
 8005010:	08005079 	.word	0x08005079
 8005014:	08005079 	.word	0x08005079
 8005018:	08005079 	.word	0x08005079
 800501c:	08005079 	.word	0x08005079
 8005020:	08005079 	.word	0x08005079
 8005024:	08005069 	.word	0x08005069
 8005028:	08005079 	.word	0x08005079
 800502c:	08005079 	.word	0x08005079
 8005030:	08005079 	.word	0x08005079
 8005034:	08005079 	.word	0x08005079
 8005038:	08005079 	.word	0x08005079
 800503c:	08005079 	.word	0x08005079
 8005040:	08005079 	.word	0x08005079
 8005044:	08005071 	.word	0x08005071
 8005048:	2301      	movs	r3, #1
 800504a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800504e:	e326      	b.n	800569e <UART_SetConfig+0x7aa>
 8005050:	2304      	movs	r3, #4
 8005052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005056:	e322      	b.n	800569e <UART_SetConfig+0x7aa>
 8005058:	2308      	movs	r3, #8
 800505a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800505e:	e31e      	b.n	800569e <UART_SetConfig+0x7aa>
 8005060:	2310      	movs	r3, #16
 8005062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005066:	e31a      	b.n	800569e <UART_SetConfig+0x7aa>
 8005068:	2320      	movs	r3, #32
 800506a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800506e:	e316      	b.n	800569e <UART_SetConfig+0x7aa>
 8005070:	2340      	movs	r3, #64	; 0x40
 8005072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005076:	e312      	b.n	800569e <UART_SetConfig+0x7aa>
 8005078:	2380      	movs	r3, #128	; 0x80
 800507a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800507e:	e30e      	b.n	800569e <UART_SetConfig+0x7aa>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a6b      	ldr	r2, [pc, #428]	; (8005234 <UART_SetConfig+0x340>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d130      	bne.n	80050ec <UART_SetConfig+0x1f8>
 800508a:	4b69      	ldr	r3, [pc, #420]	; (8005230 <UART_SetConfig+0x33c>)
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	2b05      	cmp	r3, #5
 8005094:	d826      	bhi.n	80050e4 <UART_SetConfig+0x1f0>
 8005096:	a201      	add	r2, pc, #4	; (adr r2, 800509c <UART_SetConfig+0x1a8>)
 8005098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509c:	080050b5 	.word	0x080050b5
 80050a0:	080050bd 	.word	0x080050bd
 80050a4:	080050c5 	.word	0x080050c5
 80050a8:	080050cd 	.word	0x080050cd
 80050ac:	080050d5 	.word	0x080050d5
 80050b0:	080050dd 	.word	0x080050dd
 80050b4:	2300      	movs	r3, #0
 80050b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ba:	e2f0      	b.n	800569e <UART_SetConfig+0x7aa>
 80050bc:	2304      	movs	r3, #4
 80050be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050c2:	e2ec      	b.n	800569e <UART_SetConfig+0x7aa>
 80050c4:	2308      	movs	r3, #8
 80050c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ca:	e2e8      	b.n	800569e <UART_SetConfig+0x7aa>
 80050cc:	2310      	movs	r3, #16
 80050ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050d2:	e2e4      	b.n	800569e <UART_SetConfig+0x7aa>
 80050d4:	2320      	movs	r3, #32
 80050d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050da:	e2e0      	b.n	800569e <UART_SetConfig+0x7aa>
 80050dc:	2340      	movs	r3, #64	; 0x40
 80050de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050e2:	e2dc      	b.n	800569e <UART_SetConfig+0x7aa>
 80050e4:	2380      	movs	r3, #128	; 0x80
 80050e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ea:	e2d8      	b.n	800569e <UART_SetConfig+0x7aa>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a51      	ldr	r2, [pc, #324]	; (8005238 <UART_SetConfig+0x344>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d130      	bne.n	8005158 <UART_SetConfig+0x264>
 80050f6:	4b4e      	ldr	r3, [pc, #312]	; (8005230 <UART_SetConfig+0x33c>)
 80050f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	2b05      	cmp	r3, #5
 8005100:	d826      	bhi.n	8005150 <UART_SetConfig+0x25c>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <UART_SetConfig+0x214>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	08005121 	.word	0x08005121
 800510c:	08005129 	.word	0x08005129
 8005110:	08005131 	.word	0x08005131
 8005114:	08005139 	.word	0x08005139
 8005118:	08005141 	.word	0x08005141
 800511c:	08005149 	.word	0x08005149
 8005120:	2300      	movs	r3, #0
 8005122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005126:	e2ba      	b.n	800569e <UART_SetConfig+0x7aa>
 8005128:	2304      	movs	r3, #4
 800512a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800512e:	e2b6      	b.n	800569e <UART_SetConfig+0x7aa>
 8005130:	2308      	movs	r3, #8
 8005132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005136:	e2b2      	b.n	800569e <UART_SetConfig+0x7aa>
 8005138:	2310      	movs	r3, #16
 800513a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800513e:	e2ae      	b.n	800569e <UART_SetConfig+0x7aa>
 8005140:	2320      	movs	r3, #32
 8005142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005146:	e2aa      	b.n	800569e <UART_SetConfig+0x7aa>
 8005148:	2340      	movs	r3, #64	; 0x40
 800514a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800514e:	e2a6      	b.n	800569e <UART_SetConfig+0x7aa>
 8005150:	2380      	movs	r3, #128	; 0x80
 8005152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005156:	e2a2      	b.n	800569e <UART_SetConfig+0x7aa>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a37      	ldr	r2, [pc, #220]	; (800523c <UART_SetConfig+0x348>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d130      	bne.n	80051c4 <UART_SetConfig+0x2d0>
 8005162:	4b33      	ldr	r3, [pc, #204]	; (8005230 <UART_SetConfig+0x33c>)
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b05      	cmp	r3, #5
 800516c:	d826      	bhi.n	80051bc <UART_SetConfig+0x2c8>
 800516e:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <UART_SetConfig+0x280>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	0800518d 	.word	0x0800518d
 8005178:	08005195 	.word	0x08005195
 800517c:	0800519d 	.word	0x0800519d
 8005180:	080051a5 	.word	0x080051a5
 8005184:	080051ad 	.word	0x080051ad
 8005188:	080051b5 	.word	0x080051b5
 800518c:	2300      	movs	r3, #0
 800518e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005192:	e284      	b.n	800569e <UART_SetConfig+0x7aa>
 8005194:	2304      	movs	r3, #4
 8005196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800519a:	e280      	b.n	800569e <UART_SetConfig+0x7aa>
 800519c:	2308      	movs	r3, #8
 800519e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051a2:	e27c      	b.n	800569e <UART_SetConfig+0x7aa>
 80051a4:	2310      	movs	r3, #16
 80051a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051aa:	e278      	b.n	800569e <UART_SetConfig+0x7aa>
 80051ac:	2320      	movs	r3, #32
 80051ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051b2:	e274      	b.n	800569e <UART_SetConfig+0x7aa>
 80051b4:	2340      	movs	r3, #64	; 0x40
 80051b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ba:	e270      	b.n	800569e <UART_SetConfig+0x7aa>
 80051bc:	2380      	movs	r3, #128	; 0x80
 80051be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051c2:	e26c      	b.n	800569e <UART_SetConfig+0x7aa>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1d      	ldr	r2, [pc, #116]	; (8005240 <UART_SetConfig+0x34c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d142      	bne.n	8005254 <UART_SetConfig+0x360>
 80051ce:	4b18      	ldr	r3, [pc, #96]	; (8005230 <UART_SetConfig+0x33c>)
 80051d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	2b05      	cmp	r3, #5
 80051d8:	d838      	bhi.n	800524c <UART_SetConfig+0x358>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <UART_SetConfig+0x2ec>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	080051f9 	.word	0x080051f9
 80051e4:	08005201 	.word	0x08005201
 80051e8:	08005209 	.word	0x08005209
 80051ec:	08005211 	.word	0x08005211
 80051f0:	08005219 	.word	0x08005219
 80051f4:	08005245 	.word	0x08005245
 80051f8:	2300      	movs	r3, #0
 80051fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051fe:	e24e      	b.n	800569e <UART_SetConfig+0x7aa>
 8005200:	2304      	movs	r3, #4
 8005202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005206:	e24a      	b.n	800569e <UART_SetConfig+0x7aa>
 8005208:	2308      	movs	r3, #8
 800520a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800520e:	e246      	b.n	800569e <UART_SetConfig+0x7aa>
 8005210:	2310      	movs	r3, #16
 8005212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005216:	e242      	b.n	800569e <UART_SetConfig+0x7aa>
 8005218:	2320      	movs	r3, #32
 800521a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800521e:	e23e      	b.n	800569e <UART_SetConfig+0x7aa>
 8005220:	cfff69f3 	.word	0xcfff69f3
 8005224:	58000c00 	.word	0x58000c00
 8005228:	11fff4ff 	.word	0x11fff4ff
 800522c:	40011000 	.word	0x40011000
 8005230:	58024400 	.word	0x58024400
 8005234:	40004400 	.word	0x40004400
 8005238:	40004800 	.word	0x40004800
 800523c:	40004c00 	.word	0x40004c00
 8005240:	40005000 	.word	0x40005000
 8005244:	2340      	movs	r3, #64	; 0x40
 8005246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800524a:	e228      	b.n	800569e <UART_SetConfig+0x7aa>
 800524c:	2380      	movs	r3, #128	; 0x80
 800524e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005252:	e224      	b.n	800569e <UART_SetConfig+0x7aa>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4ab1      	ldr	r2, [pc, #708]	; (8005520 <UART_SetConfig+0x62c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d176      	bne.n	800534c <UART_SetConfig+0x458>
 800525e:	4bb1      	ldr	r3, [pc, #708]	; (8005524 <UART_SetConfig+0x630>)
 8005260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005266:	2b28      	cmp	r3, #40	; 0x28
 8005268:	d86c      	bhi.n	8005344 <UART_SetConfig+0x450>
 800526a:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <UART_SetConfig+0x37c>)
 800526c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005270:	08005315 	.word	0x08005315
 8005274:	08005345 	.word	0x08005345
 8005278:	08005345 	.word	0x08005345
 800527c:	08005345 	.word	0x08005345
 8005280:	08005345 	.word	0x08005345
 8005284:	08005345 	.word	0x08005345
 8005288:	08005345 	.word	0x08005345
 800528c:	08005345 	.word	0x08005345
 8005290:	0800531d 	.word	0x0800531d
 8005294:	08005345 	.word	0x08005345
 8005298:	08005345 	.word	0x08005345
 800529c:	08005345 	.word	0x08005345
 80052a0:	08005345 	.word	0x08005345
 80052a4:	08005345 	.word	0x08005345
 80052a8:	08005345 	.word	0x08005345
 80052ac:	08005345 	.word	0x08005345
 80052b0:	08005325 	.word	0x08005325
 80052b4:	08005345 	.word	0x08005345
 80052b8:	08005345 	.word	0x08005345
 80052bc:	08005345 	.word	0x08005345
 80052c0:	08005345 	.word	0x08005345
 80052c4:	08005345 	.word	0x08005345
 80052c8:	08005345 	.word	0x08005345
 80052cc:	08005345 	.word	0x08005345
 80052d0:	0800532d 	.word	0x0800532d
 80052d4:	08005345 	.word	0x08005345
 80052d8:	08005345 	.word	0x08005345
 80052dc:	08005345 	.word	0x08005345
 80052e0:	08005345 	.word	0x08005345
 80052e4:	08005345 	.word	0x08005345
 80052e8:	08005345 	.word	0x08005345
 80052ec:	08005345 	.word	0x08005345
 80052f0:	08005335 	.word	0x08005335
 80052f4:	08005345 	.word	0x08005345
 80052f8:	08005345 	.word	0x08005345
 80052fc:	08005345 	.word	0x08005345
 8005300:	08005345 	.word	0x08005345
 8005304:	08005345 	.word	0x08005345
 8005308:	08005345 	.word	0x08005345
 800530c:	08005345 	.word	0x08005345
 8005310:	0800533d 	.word	0x0800533d
 8005314:	2301      	movs	r3, #1
 8005316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800531a:	e1c0      	b.n	800569e <UART_SetConfig+0x7aa>
 800531c:	2304      	movs	r3, #4
 800531e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005322:	e1bc      	b.n	800569e <UART_SetConfig+0x7aa>
 8005324:	2308      	movs	r3, #8
 8005326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800532a:	e1b8      	b.n	800569e <UART_SetConfig+0x7aa>
 800532c:	2310      	movs	r3, #16
 800532e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005332:	e1b4      	b.n	800569e <UART_SetConfig+0x7aa>
 8005334:	2320      	movs	r3, #32
 8005336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800533a:	e1b0      	b.n	800569e <UART_SetConfig+0x7aa>
 800533c:	2340      	movs	r3, #64	; 0x40
 800533e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005342:	e1ac      	b.n	800569e <UART_SetConfig+0x7aa>
 8005344:	2380      	movs	r3, #128	; 0x80
 8005346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800534a:	e1a8      	b.n	800569e <UART_SetConfig+0x7aa>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a75      	ldr	r2, [pc, #468]	; (8005528 <UART_SetConfig+0x634>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d130      	bne.n	80053b8 <UART_SetConfig+0x4c4>
 8005356:	4b73      	ldr	r3, [pc, #460]	; (8005524 <UART_SetConfig+0x630>)
 8005358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	2b05      	cmp	r3, #5
 8005360:	d826      	bhi.n	80053b0 <UART_SetConfig+0x4bc>
 8005362:	a201      	add	r2, pc, #4	; (adr r2, 8005368 <UART_SetConfig+0x474>)
 8005364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005368:	08005381 	.word	0x08005381
 800536c:	08005389 	.word	0x08005389
 8005370:	08005391 	.word	0x08005391
 8005374:	08005399 	.word	0x08005399
 8005378:	080053a1 	.word	0x080053a1
 800537c:	080053a9 	.word	0x080053a9
 8005380:	2300      	movs	r3, #0
 8005382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005386:	e18a      	b.n	800569e <UART_SetConfig+0x7aa>
 8005388:	2304      	movs	r3, #4
 800538a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800538e:	e186      	b.n	800569e <UART_SetConfig+0x7aa>
 8005390:	2308      	movs	r3, #8
 8005392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005396:	e182      	b.n	800569e <UART_SetConfig+0x7aa>
 8005398:	2310      	movs	r3, #16
 800539a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800539e:	e17e      	b.n	800569e <UART_SetConfig+0x7aa>
 80053a0:	2320      	movs	r3, #32
 80053a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053a6:	e17a      	b.n	800569e <UART_SetConfig+0x7aa>
 80053a8:	2340      	movs	r3, #64	; 0x40
 80053aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ae:	e176      	b.n	800569e <UART_SetConfig+0x7aa>
 80053b0:	2380      	movs	r3, #128	; 0x80
 80053b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b6:	e172      	b.n	800569e <UART_SetConfig+0x7aa>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a5b      	ldr	r2, [pc, #364]	; (800552c <UART_SetConfig+0x638>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d130      	bne.n	8005424 <UART_SetConfig+0x530>
 80053c2:	4b58      	ldr	r3, [pc, #352]	; (8005524 <UART_SetConfig+0x630>)
 80053c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	2b05      	cmp	r3, #5
 80053cc:	d826      	bhi.n	800541c <UART_SetConfig+0x528>
 80053ce:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <UART_SetConfig+0x4e0>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	080053ed 	.word	0x080053ed
 80053d8:	080053f5 	.word	0x080053f5
 80053dc:	080053fd 	.word	0x080053fd
 80053e0:	08005405 	.word	0x08005405
 80053e4:	0800540d 	.word	0x0800540d
 80053e8:	08005415 	.word	0x08005415
 80053ec:	2300      	movs	r3, #0
 80053ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053f2:	e154      	b.n	800569e <UART_SetConfig+0x7aa>
 80053f4:	2304      	movs	r3, #4
 80053f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053fa:	e150      	b.n	800569e <UART_SetConfig+0x7aa>
 80053fc:	2308      	movs	r3, #8
 80053fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005402:	e14c      	b.n	800569e <UART_SetConfig+0x7aa>
 8005404:	2310      	movs	r3, #16
 8005406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800540a:	e148      	b.n	800569e <UART_SetConfig+0x7aa>
 800540c:	2320      	movs	r3, #32
 800540e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005412:	e144      	b.n	800569e <UART_SetConfig+0x7aa>
 8005414:	2340      	movs	r3, #64	; 0x40
 8005416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800541a:	e140      	b.n	800569e <UART_SetConfig+0x7aa>
 800541c:	2380      	movs	r3, #128	; 0x80
 800541e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005422:	e13c      	b.n	800569e <UART_SetConfig+0x7aa>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a41      	ldr	r2, [pc, #260]	; (8005530 <UART_SetConfig+0x63c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	f040 8082 	bne.w	8005534 <UART_SetConfig+0x640>
 8005430:	4b3c      	ldr	r3, [pc, #240]	; (8005524 <UART_SetConfig+0x630>)
 8005432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005438:	2b28      	cmp	r3, #40	; 0x28
 800543a:	d86d      	bhi.n	8005518 <UART_SetConfig+0x624>
 800543c:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <UART_SetConfig+0x550>)
 800543e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005442:	bf00      	nop
 8005444:	080054e9 	.word	0x080054e9
 8005448:	08005519 	.word	0x08005519
 800544c:	08005519 	.word	0x08005519
 8005450:	08005519 	.word	0x08005519
 8005454:	08005519 	.word	0x08005519
 8005458:	08005519 	.word	0x08005519
 800545c:	08005519 	.word	0x08005519
 8005460:	08005519 	.word	0x08005519
 8005464:	080054f1 	.word	0x080054f1
 8005468:	08005519 	.word	0x08005519
 800546c:	08005519 	.word	0x08005519
 8005470:	08005519 	.word	0x08005519
 8005474:	08005519 	.word	0x08005519
 8005478:	08005519 	.word	0x08005519
 800547c:	08005519 	.word	0x08005519
 8005480:	08005519 	.word	0x08005519
 8005484:	080054f9 	.word	0x080054f9
 8005488:	08005519 	.word	0x08005519
 800548c:	08005519 	.word	0x08005519
 8005490:	08005519 	.word	0x08005519
 8005494:	08005519 	.word	0x08005519
 8005498:	08005519 	.word	0x08005519
 800549c:	08005519 	.word	0x08005519
 80054a0:	08005519 	.word	0x08005519
 80054a4:	08005501 	.word	0x08005501
 80054a8:	08005519 	.word	0x08005519
 80054ac:	08005519 	.word	0x08005519
 80054b0:	08005519 	.word	0x08005519
 80054b4:	08005519 	.word	0x08005519
 80054b8:	08005519 	.word	0x08005519
 80054bc:	08005519 	.word	0x08005519
 80054c0:	08005519 	.word	0x08005519
 80054c4:	08005509 	.word	0x08005509
 80054c8:	08005519 	.word	0x08005519
 80054cc:	08005519 	.word	0x08005519
 80054d0:	08005519 	.word	0x08005519
 80054d4:	08005519 	.word	0x08005519
 80054d8:	08005519 	.word	0x08005519
 80054dc:	08005519 	.word	0x08005519
 80054e0:	08005519 	.word	0x08005519
 80054e4:	08005511 	.word	0x08005511
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ee:	e0d6      	b.n	800569e <UART_SetConfig+0x7aa>
 80054f0:	2304      	movs	r3, #4
 80054f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054f6:	e0d2      	b.n	800569e <UART_SetConfig+0x7aa>
 80054f8:	2308      	movs	r3, #8
 80054fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054fe:	e0ce      	b.n	800569e <UART_SetConfig+0x7aa>
 8005500:	2310      	movs	r3, #16
 8005502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005506:	e0ca      	b.n	800569e <UART_SetConfig+0x7aa>
 8005508:	2320      	movs	r3, #32
 800550a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800550e:	e0c6      	b.n	800569e <UART_SetConfig+0x7aa>
 8005510:	2340      	movs	r3, #64	; 0x40
 8005512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005516:	e0c2      	b.n	800569e <UART_SetConfig+0x7aa>
 8005518:	2380      	movs	r3, #128	; 0x80
 800551a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800551e:	e0be      	b.n	800569e <UART_SetConfig+0x7aa>
 8005520:	40011400 	.word	0x40011400
 8005524:	58024400 	.word	0x58024400
 8005528:	40007800 	.word	0x40007800
 800552c:	40007c00 	.word	0x40007c00
 8005530:	40011800 	.word	0x40011800
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4aad      	ldr	r2, [pc, #692]	; (80057f0 <UART_SetConfig+0x8fc>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d176      	bne.n	800562c <UART_SetConfig+0x738>
 800553e:	4bad      	ldr	r3, [pc, #692]	; (80057f4 <UART_SetConfig+0x900>)
 8005540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005546:	2b28      	cmp	r3, #40	; 0x28
 8005548:	d86c      	bhi.n	8005624 <UART_SetConfig+0x730>
 800554a:	a201      	add	r2, pc, #4	; (adr r2, 8005550 <UART_SetConfig+0x65c>)
 800554c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005550:	080055f5 	.word	0x080055f5
 8005554:	08005625 	.word	0x08005625
 8005558:	08005625 	.word	0x08005625
 800555c:	08005625 	.word	0x08005625
 8005560:	08005625 	.word	0x08005625
 8005564:	08005625 	.word	0x08005625
 8005568:	08005625 	.word	0x08005625
 800556c:	08005625 	.word	0x08005625
 8005570:	080055fd 	.word	0x080055fd
 8005574:	08005625 	.word	0x08005625
 8005578:	08005625 	.word	0x08005625
 800557c:	08005625 	.word	0x08005625
 8005580:	08005625 	.word	0x08005625
 8005584:	08005625 	.word	0x08005625
 8005588:	08005625 	.word	0x08005625
 800558c:	08005625 	.word	0x08005625
 8005590:	08005605 	.word	0x08005605
 8005594:	08005625 	.word	0x08005625
 8005598:	08005625 	.word	0x08005625
 800559c:	08005625 	.word	0x08005625
 80055a0:	08005625 	.word	0x08005625
 80055a4:	08005625 	.word	0x08005625
 80055a8:	08005625 	.word	0x08005625
 80055ac:	08005625 	.word	0x08005625
 80055b0:	0800560d 	.word	0x0800560d
 80055b4:	08005625 	.word	0x08005625
 80055b8:	08005625 	.word	0x08005625
 80055bc:	08005625 	.word	0x08005625
 80055c0:	08005625 	.word	0x08005625
 80055c4:	08005625 	.word	0x08005625
 80055c8:	08005625 	.word	0x08005625
 80055cc:	08005625 	.word	0x08005625
 80055d0:	08005615 	.word	0x08005615
 80055d4:	08005625 	.word	0x08005625
 80055d8:	08005625 	.word	0x08005625
 80055dc:	08005625 	.word	0x08005625
 80055e0:	08005625 	.word	0x08005625
 80055e4:	08005625 	.word	0x08005625
 80055e8:	08005625 	.word	0x08005625
 80055ec:	08005625 	.word	0x08005625
 80055f0:	0800561d 	.word	0x0800561d
 80055f4:	2301      	movs	r3, #1
 80055f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055fa:	e050      	b.n	800569e <UART_SetConfig+0x7aa>
 80055fc:	2304      	movs	r3, #4
 80055fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005602:	e04c      	b.n	800569e <UART_SetConfig+0x7aa>
 8005604:	2308      	movs	r3, #8
 8005606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800560a:	e048      	b.n	800569e <UART_SetConfig+0x7aa>
 800560c:	2310      	movs	r3, #16
 800560e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005612:	e044      	b.n	800569e <UART_SetConfig+0x7aa>
 8005614:	2320      	movs	r3, #32
 8005616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800561a:	e040      	b.n	800569e <UART_SetConfig+0x7aa>
 800561c:	2340      	movs	r3, #64	; 0x40
 800561e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005622:	e03c      	b.n	800569e <UART_SetConfig+0x7aa>
 8005624:	2380      	movs	r3, #128	; 0x80
 8005626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800562a:	e038      	b.n	800569e <UART_SetConfig+0x7aa>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a71      	ldr	r2, [pc, #452]	; (80057f8 <UART_SetConfig+0x904>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d130      	bne.n	8005698 <UART_SetConfig+0x7a4>
 8005636:	4b6f      	ldr	r3, [pc, #444]	; (80057f4 <UART_SetConfig+0x900>)
 8005638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	2b05      	cmp	r3, #5
 8005640:	d826      	bhi.n	8005690 <UART_SetConfig+0x79c>
 8005642:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <UART_SetConfig+0x754>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	08005661 	.word	0x08005661
 800564c:	08005669 	.word	0x08005669
 8005650:	08005671 	.word	0x08005671
 8005654:	08005679 	.word	0x08005679
 8005658:	08005681 	.word	0x08005681
 800565c:	08005689 	.word	0x08005689
 8005660:	2302      	movs	r3, #2
 8005662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005666:	e01a      	b.n	800569e <UART_SetConfig+0x7aa>
 8005668:	2304      	movs	r3, #4
 800566a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800566e:	e016      	b.n	800569e <UART_SetConfig+0x7aa>
 8005670:	2308      	movs	r3, #8
 8005672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005676:	e012      	b.n	800569e <UART_SetConfig+0x7aa>
 8005678:	2310      	movs	r3, #16
 800567a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800567e:	e00e      	b.n	800569e <UART_SetConfig+0x7aa>
 8005680:	2320      	movs	r3, #32
 8005682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005686:	e00a      	b.n	800569e <UART_SetConfig+0x7aa>
 8005688:	2340      	movs	r3, #64	; 0x40
 800568a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800568e:	e006      	b.n	800569e <UART_SetConfig+0x7aa>
 8005690:	2380      	movs	r3, #128	; 0x80
 8005692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005696:	e002      	b.n	800569e <UART_SetConfig+0x7aa>
 8005698:	2380      	movs	r3, #128	; 0x80
 800569a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a55      	ldr	r2, [pc, #340]	; (80057f8 <UART_SetConfig+0x904>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	f040 80f0 	bne.w	800588a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	dc46      	bgt.n	8005740 <UART_SetConfig+0x84c>
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	db75      	blt.n	80057a2 <UART_SetConfig+0x8ae>
 80056b6:	3b02      	subs	r3, #2
 80056b8:	2b1e      	cmp	r3, #30
 80056ba:	d872      	bhi.n	80057a2 <UART_SetConfig+0x8ae>
 80056bc:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <UART_SetConfig+0x7d0>)
 80056be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c2:	bf00      	nop
 80056c4:	08005747 	.word	0x08005747
 80056c8:	080057a3 	.word	0x080057a3
 80056cc:	0800574f 	.word	0x0800574f
 80056d0:	080057a3 	.word	0x080057a3
 80056d4:	080057a3 	.word	0x080057a3
 80056d8:	080057a3 	.word	0x080057a3
 80056dc:	0800575f 	.word	0x0800575f
 80056e0:	080057a3 	.word	0x080057a3
 80056e4:	080057a3 	.word	0x080057a3
 80056e8:	080057a3 	.word	0x080057a3
 80056ec:	080057a3 	.word	0x080057a3
 80056f0:	080057a3 	.word	0x080057a3
 80056f4:	080057a3 	.word	0x080057a3
 80056f8:	080057a3 	.word	0x080057a3
 80056fc:	0800576f 	.word	0x0800576f
 8005700:	080057a3 	.word	0x080057a3
 8005704:	080057a3 	.word	0x080057a3
 8005708:	080057a3 	.word	0x080057a3
 800570c:	080057a3 	.word	0x080057a3
 8005710:	080057a3 	.word	0x080057a3
 8005714:	080057a3 	.word	0x080057a3
 8005718:	080057a3 	.word	0x080057a3
 800571c:	080057a3 	.word	0x080057a3
 8005720:	080057a3 	.word	0x080057a3
 8005724:	080057a3 	.word	0x080057a3
 8005728:	080057a3 	.word	0x080057a3
 800572c:	080057a3 	.word	0x080057a3
 8005730:	080057a3 	.word	0x080057a3
 8005734:	080057a3 	.word	0x080057a3
 8005738:	080057a3 	.word	0x080057a3
 800573c:	08005795 	.word	0x08005795
 8005740:	2b40      	cmp	r3, #64	; 0x40
 8005742:	d02a      	beq.n	800579a <UART_SetConfig+0x8a6>
 8005744:	e02d      	b.n	80057a2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005746:	f7fe fa8b 	bl	8003c60 <HAL_RCCEx_GetD3PCLK1Freq>
 800574a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800574c:	e02f      	b.n	80057ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800574e:	f107 0314 	add.w	r3, r7, #20
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe fa9a 	bl	8003c8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800575c:	e027      	b.n	80057ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800575e:	f107 0308 	add.w	r3, r7, #8
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe fbe6 	bl	8003f34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800576c:	e01f      	b.n	80057ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800576e:	4b21      	ldr	r3, [pc, #132]	; (80057f4 <UART_SetConfig+0x900>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d009      	beq.n	800578e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800577a:	4b1e      	ldr	r3, [pc, #120]	; (80057f4 <UART_SetConfig+0x900>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	08db      	lsrs	r3, r3, #3
 8005780:	f003 0303 	and.w	r3, r3, #3
 8005784:	4a1d      	ldr	r2, [pc, #116]	; (80057fc <UART_SetConfig+0x908>)
 8005786:	fa22 f303 	lsr.w	r3, r2, r3
 800578a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800578c:	e00f      	b.n	80057ae <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800578e:	4b1b      	ldr	r3, [pc, #108]	; (80057fc <UART_SetConfig+0x908>)
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005792:	e00c      	b.n	80057ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005794:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <UART_SetConfig+0x90c>)
 8005796:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005798:	e009      	b.n	80057ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800579e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057a0:	e005      	b.n	80057ae <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80057ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 81e6 	beq.w	8005b82 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	4a12      	ldr	r2, [pc, #72]	; (8005804 <UART_SetConfig+0x910>)
 80057bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057c0:	461a      	mov	r2, r3
 80057c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80057c8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	4413      	add	r3, r2
 80057d4:	6a3a      	ldr	r2, [r7, #32]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d305      	bcc.n	80057e6 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057e0:	6a3a      	ldr	r2, [r7, #32]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d910      	bls.n	8005808 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80057ec:	e1c9      	b.n	8005b82 <UART_SetConfig+0xc8e>
 80057ee:	bf00      	nop
 80057f0:	40011c00 	.word	0x40011c00
 80057f4:	58024400 	.word	0x58024400
 80057f8:	58000c00 	.word	0x58000c00
 80057fc:	03d09000 	.word	0x03d09000
 8005800:	003d0900 	.word	0x003d0900
 8005804:	08006110 	.word	0x08006110
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	4618      	mov	r0, r3
 800580c:	f04f 0100 	mov.w	r1, #0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	4ac1      	ldr	r2, [pc, #772]	; (8005b1c <UART_SetConfig+0xc28>)
 8005816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800581a:	b29a      	uxth	r2, r3
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	f7fa fd74 	bl	800030c <__aeabi_uldivmod>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4610      	mov	r0, r2
 800582a:	4619      	mov	r1, r3
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	020b      	lsls	r3, r1, #8
 8005836:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800583a:	0202      	lsls	r2, r0, #8
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	6849      	ldr	r1, [r1, #4]
 8005840:	0849      	lsrs	r1, r1, #1
 8005842:	4608      	mov	r0, r1
 8005844:	f04f 0100 	mov.w	r1, #0
 8005848:	1814      	adds	r4, r2, r0
 800584a:	eb43 0501 	adc.w	r5, r3, r1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	461a      	mov	r2, r3
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	4620      	mov	r0, r4
 800585a:	4629      	mov	r1, r5
 800585c:	f7fa fd56 	bl	800030c <__aeabi_uldivmod>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4613      	mov	r3, r2
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800586e:	d308      	bcc.n	8005882 <UART_SetConfig+0x98e>
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005876:	d204      	bcs.n	8005882 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800587e:	60da      	str	r2, [r3, #12]
 8005880:	e17f      	b.n	8005b82 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005888:	e17b      	b.n	8005b82 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005892:	f040 80be 	bne.w	8005a12 <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 8005896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800589a:	2b20      	cmp	r3, #32
 800589c:	dc48      	bgt.n	8005930 <UART_SetConfig+0xa3c>
 800589e:	2b00      	cmp	r3, #0
 80058a0:	db7b      	blt.n	800599a <UART_SetConfig+0xaa6>
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	d879      	bhi.n	800599a <UART_SetConfig+0xaa6>
 80058a6:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <UART_SetConfig+0x9b8>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	08005937 	.word	0x08005937
 80058b0:	0800593f 	.word	0x0800593f
 80058b4:	0800599b 	.word	0x0800599b
 80058b8:	0800599b 	.word	0x0800599b
 80058bc:	08005947 	.word	0x08005947
 80058c0:	0800599b 	.word	0x0800599b
 80058c4:	0800599b 	.word	0x0800599b
 80058c8:	0800599b 	.word	0x0800599b
 80058cc:	08005957 	.word	0x08005957
 80058d0:	0800599b 	.word	0x0800599b
 80058d4:	0800599b 	.word	0x0800599b
 80058d8:	0800599b 	.word	0x0800599b
 80058dc:	0800599b 	.word	0x0800599b
 80058e0:	0800599b 	.word	0x0800599b
 80058e4:	0800599b 	.word	0x0800599b
 80058e8:	0800599b 	.word	0x0800599b
 80058ec:	08005967 	.word	0x08005967
 80058f0:	0800599b 	.word	0x0800599b
 80058f4:	0800599b 	.word	0x0800599b
 80058f8:	0800599b 	.word	0x0800599b
 80058fc:	0800599b 	.word	0x0800599b
 8005900:	0800599b 	.word	0x0800599b
 8005904:	0800599b 	.word	0x0800599b
 8005908:	0800599b 	.word	0x0800599b
 800590c:	0800599b 	.word	0x0800599b
 8005910:	0800599b 	.word	0x0800599b
 8005914:	0800599b 	.word	0x0800599b
 8005918:	0800599b 	.word	0x0800599b
 800591c:	0800599b 	.word	0x0800599b
 8005920:	0800599b 	.word	0x0800599b
 8005924:	0800599b 	.word	0x0800599b
 8005928:	0800599b 	.word	0x0800599b
 800592c:	0800598d 	.word	0x0800598d
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d02e      	beq.n	8005992 <UART_SetConfig+0xa9e>
 8005934:	e031      	b.n	800599a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005936:	f7fd fa6d 	bl	8002e14 <HAL_RCC_GetPCLK1Freq>
 800593a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800593c:	e033      	b.n	80059a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800593e:	f7fd fa7f 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 8005942:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005944:	e02f      	b.n	80059a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005946:	f107 0314 	add.w	r3, r7, #20
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe f99e 	bl	8003c8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005954:	e027      	b.n	80059a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005956:	f107 0308 	add.w	r3, r7, #8
 800595a:	4618      	mov	r0, r3
 800595c:	f7fe faea 	bl	8003f34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005964:	e01f      	b.n	80059a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005966:	4b6e      	ldr	r3, [pc, #440]	; (8005b20 <UART_SetConfig+0xc2c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005972:	4b6b      	ldr	r3, [pc, #428]	; (8005b20 <UART_SetConfig+0xc2c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	08db      	lsrs	r3, r3, #3
 8005978:	f003 0303 	and.w	r3, r3, #3
 800597c:	4a69      	ldr	r2, [pc, #420]	; (8005b24 <UART_SetConfig+0xc30>)
 800597e:	fa22 f303 	lsr.w	r3, r2, r3
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005984:	e00f      	b.n	80059a6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8005986:	4b67      	ldr	r3, [pc, #412]	; (8005b24 <UART_SetConfig+0xc30>)
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800598a:	e00c      	b.n	80059a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800598c:	4b66      	ldr	r3, [pc, #408]	; (8005b28 <UART_SetConfig+0xc34>)
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005990:	e009      	b.n	80059a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005996:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005998:	e005      	b.n	80059a6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80059a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 80ea 	beq.w	8005b82 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	4a5a      	ldr	r2, [pc, #360]	; (8005b1c <UART_SetConfig+0xc28>)
 80059b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059b8:	461a      	mov	r2, r3
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80059c0:	005a      	lsls	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	441a      	add	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	2b0f      	cmp	r3, #15
 80059da:	d916      	bls.n	8005a0a <UART_SetConfig+0xb16>
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e2:	d212      	bcs.n	8005a0a <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f023 030f 	bic.w	r3, r3, #15
 80059ec:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	085b      	lsrs	r3, r3, #1
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059fc:	4313      	orrs	r3, r2
 80059fe:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a06:	60da      	str	r2, [r3, #12]
 8005a08:	e0bb      	b.n	8005b82 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a10:	e0b7      	b.n	8005b82 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	dc4a      	bgt.n	8005ab0 <UART_SetConfig+0xbbc>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f2c0 8086 	blt.w	8005b2c <UART_SetConfig+0xc38>
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	f200 8083 	bhi.w	8005b2c <UART_SetConfig+0xc38>
 8005a26:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <UART_SetConfig+0xb38>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005ab7 	.word	0x08005ab7
 8005a30:	08005abf 	.word	0x08005abf
 8005a34:	08005b2d 	.word	0x08005b2d
 8005a38:	08005b2d 	.word	0x08005b2d
 8005a3c:	08005ac7 	.word	0x08005ac7
 8005a40:	08005b2d 	.word	0x08005b2d
 8005a44:	08005b2d 	.word	0x08005b2d
 8005a48:	08005b2d 	.word	0x08005b2d
 8005a4c:	08005ad7 	.word	0x08005ad7
 8005a50:	08005b2d 	.word	0x08005b2d
 8005a54:	08005b2d 	.word	0x08005b2d
 8005a58:	08005b2d 	.word	0x08005b2d
 8005a5c:	08005b2d 	.word	0x08005b2d
 8005a60:	08005b2d 	.word	0x08005b2d
 8005a64:	08005b2d 	.word	0x08005b2d
 8005a68:	08005b2d 	.word	0x08005b2d
 8005a6c:	08005ae7 	.word	0x08005ae7
 8005a70:	08005b2d 	.word	0x08005b2d
 8005a74:	08005b2d 	.word	0x08005b2d
 8005a78:	08005b2d 	.word	0x08005b2d
 8005a7c:	08005b2d 	.word	0x08005b2d
 8005a80:	08005b2d 	.word	0x08005b2d
 8005a84:	08005b2d 	.word	0x08005b2d
 8005a88:	08005b2d 	.word	0x08005b2d
 8005a8c:	08005b2d 	.word	0x08005b2d
 8005a90:	08005b2d 	.word	0x08005b2d
 8005a94:	08005b2d 	.word	0x08005b2d
 8005a98:	08005b2d 	.word	0x08005b2d
 8005a9c:	08005b2d 	.word	0x08005b2d
 8005aa0:	08005b2d 	.word	0x08005b2d
 8005aa4:	08005b2d 	.word	0x08005b2d
 8005aa8:	08005b2d 	.word	0x08005b2d
 8005aac:	08005b0d 	.word	0x08005b0d
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d02e      	beq.n	8005b12 <UART_SetConfig+0xc1e>
 8005ab4:	e03a      	b.n	8005b2c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab6:	f7fd f9ad 	bl	8002e14 <HAL_RCC_GetPCLK1Freq>
 8005aba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005abc:	e03c      	b.n	8005b38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005abe:	f7fd f9bf 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 8005ac2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005ac4:	e038      	b.n	8005b38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ac6:	f107 0314 	add.w	r3, r7, #20
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe f8de 	bl	8003c8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ad4:	e030      	b.n	8005b38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ad6:	f107 0308 	add.w	r3, r7, #8
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fe fa2a 	bl	8003f34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ae4:	e028      	b.n	8005b38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ae6:	4b0e      	ldr	r3, [pc, #56]	; (8005b20 <UART_SetConfig+0xc2c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005af2:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <UART_SetConfig+0xc2c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	08db      	lsrs	r3, r3, #3
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	4a09      	ldr	r2, [pc, #36]	; (8005b24 <UART_SetConfig+0xc30>)
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b04:	e018      	b.n	8005b38 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8005b06:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <UART_SetConfig+0xc30>)
 8005b08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b0a:	e015      	b.n	8005b38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b0c:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <UART_SetConfig+0xc34>)
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b10:	e012      	b.n	8005b38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b18:	e00e      	b.n	8005b38 <UART_SetConfig+0xc44>
 8005b1a:	bf00      	nop
 8005b1c:	08006110 	.word	0x08006110
 8005b20:	58024400 	.word	0x58024400
 8005b24:	03d09000 	.word	0x03d09000
 8005b28:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005b36:	bf00      	nop
    }

    if (pclk != 0U)
 8005b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d021      	beq.n	8005b82 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	4a1a      	ldr	r2, [pc, #104]	; (8005bac <UART_SetConfig+0xcb8>)
 8005b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	441a      	add	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b66:	2b0f      	cmp	r3, #15
 8005b68:	d908      	bls.n	8005b7c <UART_SetConfig+0xc88>
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b70:	d204      	bcs.n	8005b7c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b78:	60da      	str	r2, [r3, #12]
 8005b7a:	e002      	b.n	8005b82 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005b9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3738      	adds	r7, #56	; 0x38
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8005baa:	bf00      	nop
 8005bac:	08006110 	.word	0x08006110

08005bb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c44:	f003 0310 	and.w	r3, r3, #16
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01a      	beq.n	8005cc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cae:	d10a      	bne.n	8005cc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	605a      	str	r2, [r3, #4]
  }
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d04:	f7fb fa5e 	bl	80011c4 <HAL_GetTick>
 8005d08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0308 	and.w	r3, r3, #8
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d10e      	bne.n	8005d36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f82f 	bl	8005d8a <UART_WaitOnFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e025      	b.n	8005d82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d10e      	bne.n	8005d62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f819 	bl	8005d8a <UART_WaitOnFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e00f      	b.n	8005d82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	603b      	str	r3, [r7, #0]
 8005d96:	4613      	mov	r3, r2
 8005d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d9a:	e062      	b.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	d05e      	beq.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da4:	f7fb fa0e 	bl	80011c4 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d302      	bcc.n	8005dba <UART_WaitOnFlagUntilTimeout+0x30>
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d11d      	bne.n	8005df6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005dc8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0201 	bic.w	r2, r2, #1
 8005dd8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e045      	b.n	8005e82 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d02e      	beq.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e12:	d126      	bne.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e2c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0201 	bic.w	r2, r2, #1
 8005e3c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e00f      	b.n	8005e82 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	bf0c      	ite	eq
 8005e72:	2301      	moveq	r3, #1
 8005e74:	2300      	movne	r3, #0
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	461a      	mov	r2, r3
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d08d      	beq.n	8005d9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b085      	sub	sp, #20
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e027      	b.n	8005ef0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2224      	movs	r2, #36	; 0x24
 8005eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0201 	bic.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ece:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e02d      	b.n	8005f70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2224      	movs	r2, #36	; 0x24
 8005f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0201 	bic.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f84f 	bl	8005ff4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e02d      	b.n	8005fec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2224      	movs	r2, #36	; 0x24
 8005f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0201 	bic.w	r2, r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f811 	bl	8005ff4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006000:	2b00      	cmp	r3, #0
 8006002:	d108      	bne.n	8006016 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006014:	e031      	b.n	800607a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006016:	2310      	movs	r3, #16
 8006018:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800601a:	2310      	movs	r3, #16
 800601c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	0e5b      	lsrs	r3, r3, #25
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	0f5b      	lsrs	r3, r3, #29
 8006036:	b2db      	uxtb	r3, r3
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800603e:	7bbb      	ldrb	r3, [r7, #14]
 8006040:	7b3a      	ldrb	r2, [r7, #12]
 8006042:	4911      	ldr	r1, [pc, #68]	; (8006088 <UARTEx_SetNbDataToProcess+0x94>)
 8006044:	5c8a      	ldrb	r2, [r1, r2]
 8006046:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800604a:	7b3a      	ldrb	r2, [r7, #12]
 800604c:	490f      	ldr	r1, [pc, #60]	; (800608c <UARTEx_SetNbDataToProcess+0x98>)
 800604e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006050:	fb93 f3f2 	sdiv	r3, r3, r2
 8006054:	b29a      	uxth	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	7b7a      	ldrb	r2, [r7, #13]
 8006060:	4909      	ldr	r1, [pc, #36]	; (8006088 <UARTEx_SetNbDataToProcess+0x94>)
 8006062:	5c8a      	ldrb	r2, [r1, r2]
 8006064:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006068:	7b7a      	ldrb	r2, [r7, #13]
 800606a:	4908      	ldr	r1, [pc, #32]	; (800608c <UARTEx_SetNbDataToProcess+0x98>)
 800606c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800606e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006072:	b29a      	uxth	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	08006128 	.word	0x08006128
 800608c:	08006130 	.word	0x08006130

08006090 <__libc_init_array>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	4d0d      	ldr	r5, [pc, #52]	; (80060c8 <__libc_init_array+0x38>)
 8006094:	4c0d      	ldr	r4, [pc, #52]	; (80060cc <__libc_init_array+0x3c>)
 8006096:	1b64      	subs	r4, r4, r5
 8006098:	10a4      	asrs	r4, r4, #2
 800609a:	2600      	movs	r6, #0
 800609c:	42a6      	cmp	r6, r4
 800609e:	d109      	bne.n	80060b4 <__libc_init_array+0x24>
 80060a0:	4d0b      	ldr	r5, [pc, #44]	; (80060d0 <__libc_init_array+0x40>)
 80060a2:	4c0c      	ldr	r4, [pc, #48]	; (80060d4 <__libc_init_array+0x44>)
 80060a4:	f000 f820 	bl	80060e8 <_init>
 80060a8:	1b64      	subs	r4, r4, r5
 80060aa:	10a4      	asrs	r4, r4, #2
 80060ac:	2600      	movs	r6, #0
 80060ae:	42a6      	cmp	r6, r4
 80060b0:	d105      	bne.n	80060be <__libc_init_array+0x2e>
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b8:	4798      	blx	r3
 80060ba:	3601      	adds	r6, #1
 80060bc:	e7ee      	b.n	800609c <__libc_init_array+0xc>
 80060be:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c2:	4798      	blx	r3
 80060c4:	3601      	adds	r6, #1
 80060c6:	e7f2      	b.n	80060ae <__libc_init_array+0x1e>
 80060c8:	08006140 	.word	0x08006140
 80060cc:	08006140 	.word	0x08006140
 80060d0:	08006140 	.word	0x08006140
 80060d4:	08006144 	.word	0x08006144

080060d8 <memset>:
 80060d8:	4402      	add	r2, r0
 80060da:	4603      	mov	r3, r0
 80060dc:	4293      	cmp	r3, r2
 80060de:	d100      	bne.n	80060e2 <memset+0xa>
 80060e0:	4770      	bx	lr
 80060e2:	f803 1b01 	strb.w	r1, [r3], #1
 80060e6:	e7f9      	b.n	80060dc <memset+0x4>

080060e8 <_init>:
 80060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ea:	bf00      	nop
 80060ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ee:	bc08      	pop	{r3}
 80060f0:	469e      	mov	lr, r3
 80060f2:	4770      	bx	lr

080060f4 <_fini>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	bf00      	nop
 80060f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fa:	bc08      	pop	{r3}
 80060fc:	469e      	mov	lr, r3
 80060fe:	4770      	bx	lr
