
STM32_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008810  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008adc  08008adc  00018adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008b14  08008b14  00018b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008b1c  08008b1c  00018b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008b20  08008b20  00018b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08008b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08008b34  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08008b94  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  240000d0  08008bf4  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000388  08008bf4  00020388  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000294ee  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c2  00000000  00000000  000495ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  0004ceb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d0  00000000  00000000  0004e688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036638  00000000  00000000  0004fd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba13  00000000  00000000  00086390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016b901  00000000  00000000  000a1da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020d6a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006860  00000000  00000000  0020d6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08008ac4 	.word	0x08008ac4

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	08008ac4 	.word	0x08008ac4

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96e 	b.w	8000600 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468c      	mov	ip, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8083 	bne.w	8000452 <__udivmoddi4+0x116>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d947      	bls.n	80003e2 <__udivmoddi4+0xa6>
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b142      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000358:	f1c2 0020 	rsb	r0, r2, #32
 800035c:	fa24 f000 	lsr.w	r0, r4, r0
 8000360:	4091      	lsls	r1, r2
 8000362:	4097      	lsls	r7, r2
 8000364:	ea40 0c01 	orr.w	ip, r0, r1
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbbc f6f8 	udiv	r6, ip, r8
 8000374:	fa1f fe87 	uxth.w	lr, r7
 8000378:	fb08 c116 	mls	r1, r8, r6, ip
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f10e 	mul.w	r1, r6, lr
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295
 800038e:	f080 8119 	bcs.w	80005c4 <__udivmoddi4+0x288>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8116 	bls.w	80005c4 <__udivmoddi4+0x288>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	f080 8105 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8102 	bls.w	80005c8 <__udivmoddi4+0x28c>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xaa>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d150      	bne.n	8000490 <__udivmoddi4+0x154>
 80003ee:	1bcb      	subs	r3, r1, r7
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	2601      	movs	r6, #1
 80003fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fe:	0c21      	lsrs	r1, r4, #16
 8000400:	fb0e 331c 	mls	r3, lr, ip, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb08 f30c 	mul.w	r3, r8, ip
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0xe2>
 8000418:	428b      	cmp	r3, r1
 800041a:	f200 80e9 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 800041e:	4684      	mov	ip, r0
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	b2a3      	uxth	r3, r4
 8000424:	fbb1 f0fe 	udiv	r0, r1, lr
 8000428:	fb0e 1110 	mls	r1, lr, r0, r1
 800042c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000430:	fb08 f800 	mul.w	r8, r8, r0
 8000434:	45a0      	cmp	r8, r4
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x10c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x10a>
 8000440:	45a0      	cmp	r8, r4
 8000442:	f200 80d9 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 8000446:	4618      	mov	r0, r3
 8000448:	eba4 0408 	sub.w	r4, r4, r8
 800044c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000450:	e7bf      	b.n	80003d2 <__udivmoddi4+0x96>
 8000452:	428b      	cmp	r3, r1
 8000454:	d909      	bls.n	800046a <__udivmoddi4+0x12e>
 8000456:	2d00      	cmp	r5, #0
 8000458:	f000 80b1 	beq.w	80005be <__udivmoddi4+0x282>
 800045c:	2600      	movs	r6, #0
 800045e:	e9c5 0100 	strd	r0, r1, [r5]
 8000462:	4630      	mov	r0, r6
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	fab3 f683 	clz	r6, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d14a      	bne.n	8000508 <__udivmoddi4+0x1cc>
 8000472:	428b      	cmp	r3, r1
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0x140>
 8000476:	4282      	cmp	r2, r0
 8000478:	f200 80b8 	bhi.w	80005ec <__udivmoddi4+0x2b0>
 800047c:	1a84      	subs	r4, r0, r2
 800047e:	eb61 0103 	sbc.w	r1, r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	468c      	mov	ip, r1
 8000486:	2d00      	cmp	r5, #0
 8000488:	d0a8      	beq.n	80003dc <__udivmoddi4+0xa0>
 800048a:	e9c5 4c00 	strd	r4, ip, [r5]
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f603 	lsr.w	r6, r0, r3
 8000498:	4097      	lsls	r7, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a2:	40d9      	lsrs	r1, r3
 80004a4:	4330      	orrs	r0, r6
 80004a6:	0c03      	lsrs	r3, r0, #16
 80004a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f108 	mul.w	r1, r6, r8
 80004bc:	4299      	cmp	r1, r3
 80004be:	fa04 f402 	lsl.w	r4, r4, r2
 80004c2:	d909      	bls.n	80004d8 <__udivmoddi4+0x19c>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ca:	f080 808d 	bcs.w	80005e8 <__udivmoddi4+0x2ac>
 80004ce:	4299      	cmp	r1, r3
 80004d0:	f240 808a 	bls.w	80005e8 <__udivmoddi4+0x2ac>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	443b      	add	r3, r7
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b281      	uxth	r1, r0
 80004dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb00 f308 	mul.w	r3, r0, r8
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x1c4>
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f6:	d273      	bcs.n	80005e0 <__udivmoddi4+0x2a4>
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d971      	bls.n	80005e0 <__udivmoddi4+0x2a4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4439      	add	r1, r7
 8000500:	1acb      	subs	r3, r1, r3
 8000502:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000506:	e778      	b.n	80003fa <__udivmoddi4+0xbe>
 8000508:	f1c6 0c20 	rsb	ip, r6, #32
 800050c:	fa03 f406 	lsl.w	r4, r3, r6
 8000510:	fa22 f30c 	lsr.w	r3, r2, ip
 8000514:	431c      	orrs	r4, r3
 8000516:	fa20 f70c 	lsr.w	r7, r0, ip
 800051a:	fa01 f306 	lsl.w	r3, r1, r6
 800051e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000522:	fa21 f10c 	lsr.w	r1, r1, ip
 8000526:	431f      	orrs	r7, r3
 8000528:	0c3b      	lsrs	r3, r7, #16
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fa1f f884 	uxth.w	r8, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053a:	fb09 fa08 	mul.w	sl, r9, r8
 800053e:	458a      	cmp	sl, r1
 8000540:	fa02 f206 	lsl.w	r2, r2, r6
 8000544:	fa00 f306 	lsl.w	r3, r0, r6
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x220>
 800054a:	1861      	adds	r1, r4, r1
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	d248      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 8000552:	458a      	cmp	sl, r1
 8000554:	d946      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	4421      	add	r1, r4
 800055c:	eba1 010a 	sub.w	r1, r1, sl
 8000560:	b2bf      	uxth	r7, r7
 8000562:	fbb1 f0fe 	udiv	r0, r1, lr
 8000566:	fb0e 1110 	mls	r1, lr, r0, r1
 800056a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45b8      	cmp	r8, r7
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x24a>
 8000576:	19e7      	adds	r7, r4, r7
 8000578:	f100 31ff 	add.w	r1, r0, #4294967295
 800057c:	d22e      	bcs.n	80005dc <__udivmoddi4+0x2a0>
 800057e:	45b8      	cmp	r8, r7
 8000580:	d92c      	bls.n	80005dc <__udivmoddi4+0x2a0>
 8000582:	3802      	subs	r0, #2
 8000584:	4427      	add	r7, r4
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba7 0708 	sub.w	r7, r7, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454f      	cmp	r7, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	4649      	mov	r1, r9
 8000598:	d31a      	bcc.n	80005d0 <__udivmoddi4+0x294>
 800059a:	d017      	beq.n	80005cc <__udivmoddi4+0x290>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x27a>
 800059e:	ebb3 020e 	subs.w	r2, r3, lr
 80005a2:	eb67 0701 	sbc.w	r7, r7, r1
 80005a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005aa:	40f2      	lsrs	r2, r6
 80005ac:	ea4c 0202 	orr.w	r2, ip, r2
 80005b0:	40f7      	lsrs	r7, r6
 80005b2:	e9c5 2700 	strd	r2, r7, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e70b      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e9      	b.n	800039c <__udivmoddi4+0x60>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6fd      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005cc:	4543      	cmp	r3, r8
 80005ce:	d2e5      	bcs.n	800059c <__udivmoddi4+0x260>
 80005d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d4:	eb69 0104 	sbc.w	r1, r9, r4
 80005d8:	3801      	subs	r0, #1
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0x260>
 80005dc:	4608      	mov	r0, r1
 80005de:	e7d2      	b.n	8000586 <__udivmoddi4+0x24a>
 80005e0:	4660      	mov	r0, ip
 80005e2:	e78d      	b.n	8000500 <__udivmoddi4+0x1c4>
 80005e4:	4681      	mov	r9, r0
 80005e6:	e7b9      	b.n	800055c <__udivmoddi4+0x220>
 80005e8:	4666      	mov	r6, ip
 80005ea:	e775      	b.n	80004d8 <__udivmoddi4+0x19c>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e74a      	b.n	8000486 <__udivmoddi4+0x14a>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	4439      	add	r1, r7
 80005f6:	e713      	b.n	8000420 <__udivmoddi4+0xe4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e724      	b.n	8000448 <__udivmoddi4+0x10c>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <AS5247U_Initialize>:
uint8_t AS5247U_Initialize(AS5247U *enc,
                           SPI_HandleTypeDef *spiHandle,
                           GPIO_TypeDef *csPinBankTop,
                           GPIO_TypeDef *csPinBankBottom,
                           uint16_t csPinTop,
                           uint16_t csPinBottom) {
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
 8000610:	603b      	str	r3, [r7, #0]
    enc->spiHandle = spiHandle;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	601a      	str	r2, [r3, #0]
    enc->csPinBankTop = csPinBankTop;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	605a      	str	r2, [r3, #4]
    enc->csPinBankBottom = csPinBankBottom;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	683a      	ldr	r2, [r7, #0]
 8000622:	609a      	str	r2, [r3, #8]
    enc->csPinTop = csPinTop;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	8b3a      	ldrh	r2, [r7, #24]
 8000628:	819a      	strh	r2, [r3, #12]
    enc->csPinBottom = csPinBottom;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	8bba      	ldrh	r2, [r7, #28]
 800062e:	81da      	strh	r2, [r3, #14]
    enc->rawPosition = 0;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2200      	movs	r2, #0
 8000634:	829a      	strh	r2, [r3, #20]
    enc->velocity = 0;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	2200      	movs	r2, #0
 800063a:	82da      	strh	r2, [r3, #22]

    //Todo: create the initialization step along with testing the encoder to see if we are reading values correctly.

    return 0;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <AS5247U_ReadSPI>:

uint16_t AS5247U_ReadSPI(AS5247U *enc, uint16_t addr) {
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af02      	add	r7, sp, #8
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	460b      	mov	r3, r1
 8000654:	807b      	strh	r3, [r7, #2]
    enc->txData = 0x4000 | addr;
 8000656:	887b      	ldrh	r3, [r7, #2]
 8000658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065c:	b29a      	uxth	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	821a      	strh	r2, [r3, #16]

    HAL_GPIO_WritePin(enc->csPinBankBottom, enc->csPinBottom, GPIO_PIN_RESET);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6898      	ldr	r0, [r3, #8]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	89db      	ldrh	r3, [r3, #14]
 800066a:	2200      	movs	r2, #0
 800066c:	4619      	mov	r1, r3
 800066e:	f003 fa1f 	bl	8003ab0 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6818      	ldr	r0, [r3, #0]
            enc->spiHandle,
            (uint8_t*) enc->txBuf,
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f103 0110 	add.w	r1, r3, #16
            (uint8_t*) enc->rxBuf,
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f103 0212 	add.w	r2, r3, #18
    HAL_SPI_TransmitReceive(
 8000682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2301      	movs	r3, #1
 800068a:	f006 fb13 	bl	8006cb4 <HAL_SPI_TransmitReceive>
            1, TIMEOUT);

    HAL_GPIO_WritePin(enc->csPinBankBottom, enc->csPinBottom, GPIO_PIN_SET);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6898      	ldr	r0, [r3, #8]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	89db      	ldrh	r3, [r3, #14]
 8000696:	2201      	movs	r2, #1
 8000698:	4619      	mov	r1, r3
 800069a:	f003 fa09 	bl	8003ab0 <HAL_GPIO_WritePin>

    return enc->rxData;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	8a5b      	ldrh	r3, [r3, #18]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <AS5247U_GetErrorReg>:

uint16_t AS5247U_GetPosition(AS5247U *enc) {
	return AS5247U_ReadSPI(enc, ANGLECOM);
}

uint16_t AS5247U_GetErrorReg(AS5247U *enc) {
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
	return AS5247U_ReadSPI(enc, ERRFL);
 80006b2:	2101      	movs	r1, #1
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff ffc8 	bl	800064a <AS5247U_ReadSPI>
 80006ba:	4603      	mov	r3, r0
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 ff17 	bl	80014fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f827 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 fa69 	bl	8000ba8 <MX_GPIO_Init>
  MX_ETH_Init();
 80006d6:	f000 f915 	bl	8000904 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006da:	f000 fa11 	bl	8000b00 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006de:	f000 fa5b 	bl	8000b98 <MX_USB_OTG_HS_USB_Init>
  MX_SPI1_Init();
 80006e2:	f000 f95b 	bl	800099c <MX_SPI1_Init>
  MX_ADC1_Init();
 80006e6:	f000 f895 	bl	8000814 <MX_ADC1_Init>
  MX_TIM1_Init();
 80006ea:	f000 f9af 	bl	8000a4c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  AS5247U enc;
  AS5247U_Initialize(&enc, &hspi1, NULL,DRV_NCS_GPIO_Port, 0, DRV_NCS_Pin);
 80006ee:	1d38      	adds	r0, r7, #4
 80006f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	2300      	movs	r3, #0
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <main+0x54>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	4907      	ldr	r1, [pc, #28]	; (800071c <main+0x58>)
 8000700:	f7ff ff80 	bl	8000604 <AS5247U_Initialize>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//      HAL_GPIO_WritePin(AS5247_NCS_GPIO_Port, AS5247_NCS_Pin, GPIO_PIN_SET);
//      HAL_Delay(100);
	  uint16_t data = AS5247U_GetErrorReg(&enc);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ffcf 	bl	80006aa <AS5247U_GetErrorReg>
 800070c:	4603      	mov	r3, r0
 800070e:	83fb      	strh	r3, [r7, #30]
      HAL_Delay(100);
 8000710:	2064      	movs	r0, #100	; 0x64
 8000712:	f000 ff85 	bl	8001620 <HAL_Delay>
  {
 8000716:	e7f5      	b.n	8000704 <main+0x40>
 8000718:	58020c00 	.word	0x58020c00
 800071c:	24000240 	.word	0x24000240

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b09c      	sub	sp, #112	; 0x70
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072a:	224c      	movs	r2, #76	; 0x4c
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f008 f9c0 	bl	8008ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2220      	movs	r2, #32
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f008 f9ba 	bl	8008ab4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000740:	2002      	movs	r0, #2
 8000742:	f003 f9cf 	bl	8003ae4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b30      	ldr	r3, [pc, #192]	; (800080c <SystemClock_Config+0xec>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a2f      	ldr	r2, [pc, #188]	; (800080c <SystemClock_Config+0xec>)
 8000750:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <SystemClock_Config+0xec>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000762:	bf00      	nop
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <SystemClock_Config+0xec>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800076c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000770:	d1f8      	bne.n	8000764 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000772:	4b27      	ldr	r3, [pc, #156]	; (8000810 <SystemClock_Config+0xf0>)
 8000774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000776:	f023 0303 	bic.w	r3, r3, #3
 800077a:	4a25      	ldr	r2, [pc, #148]	; (8000810 <SystemClock_Config+0xf0>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000782:	2321      	movs	r3, #33	; 0x21
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000786:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000794:	2302      	movs	r3, #2
 8000796:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800079c:	f240 1313 	movw	r3, #275	; 0x113
 80007a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a6:	2304      	movs	r3, #4
 80007a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80007ae:	2304      	movs	r3, #4
 80007b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 f9ca 	bl	8003b58 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007ca:	f000 fb0f 	bl	8000dec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	233f      	movs	r3, #63	; 0x3f
 80007d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2303      	movs	r3, #3
 80007d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007da:	2308      	movs	r3, #8
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007de:	2340      	movs	r3, #64	; 0x40
 80007e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007e2:	2340      	movs	r3, #64	; 0x40
 80007e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007ec:	2340      	movs	r3, #64	; 0x40
 80007ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2103      	movs	r1, #3
 80007f4:	4618      	mov	r0, r3
 80007f6:	f003 fd3d 	bl	8004274 <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000800:	f000 faf4 	bl	8000dec <Error_Handler>
  }
}
 8000804:	bf00      	nop
 8000806:	3770      	adds	r7, #112	; 0x70
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	58024800 	.word	0x58024800
 8000810:	58024400 	.word	0x58024400

08000814 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000826:	463b      	mov	r3, r7
 8000828:	2224      	movs	r2, #36	; 0x24
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f008 f941 	bl	8008ab4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000832:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000834:	4a31      	ldr	r2, [pc, #196]	; (80008fc <MX_ADC1_Init+0xe8>)
 8000836:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000838:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <MX_ADC1_Init+0xe4>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800083e:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000844:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800084a:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <MX_ADC1_Init+0xe4>)
 800084c:	2204      	movs	r2, #4
 800084e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000850:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000852:	2215      	movs	r2, #21
 8000854:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000858:	2215      	movs	r2, #21
 800085a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_ADC1_Init+0xe4>)
 800085e:	2201      	movs	r2, #1
 8000860:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000864:	2215      	movs	r2, #21
 8000866:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_ADC1_Init+0xe4>)
 800086c:	2200      	movs	r2, #0
 800086e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000872:	2200      	movs	r2, #0
 8000874:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000878:	2200      	movs	r2, #0
 800087a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_ADC1_Init+0xe4>)
 800087e:	2200      	movs	r2, #0
 8000880:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000884:	2200      	movs	r2, #0
 8000886:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_ADC1_Init+0xe4>)
 800088a:	2215      	movs	r2, #21
 800088c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000890:	4819      	ldr	r0, [pc, #100]	; (80008f8 <MX_ADC1_Init+0xe4>)
 8000892:	f001 f943 	bl	8001b1c <HAL_ADC_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800089c:	f000 faa6 	bl	8000dec <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a8:	4619      	mov	r1, r3
 80008aa:	4813      	ldr	r0, [pc, #76]	; (80008f8 <MX_ADC1_Init+0xe4>)
 80008ac:	f002 f97c 	bl	8002ba8 <HAL_ADCEx_MultiModeConfigChannel>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80008b6:	f000 fa99 	bl	8000dec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_ADC1_Init+0xec>)
 80008bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008be:	2306      	movs	r3, #6
 80008c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008ca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008cc:	2304      	movs	r3, #4
 80008ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008d4:	2315      	movs	r3, #21
 80008d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008da:	463b      	mov	r3, r7
 80008dc:	4619      	mov	r1, r3
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <MX_ADC1_Init+0xe4>)
 80008e0:	f001 fb24 	bl	8001f2c <HAL_ADC_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80008ea:	f000 fa7f 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	3730      	adds	r7, #48	; 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	24000184 	.word	0x24000184
 80008fc:	40022000 	.word	0x40022000
 8000900:	08600004 	.word	0x08600004

08000904 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000908:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <MX_ETH_Init+0x80>)
 800090a:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <MX_ETH_Init+0x84>)
 800090c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800090e:	4b1f      	ldr	r3, [pc, #124]	; (800098c <MX_ETH_Init+0x88>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_ETH_Init+0x88>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_ETH_Init+0x88>)
 800091c:	22e1      	movs	r2, #225	; 0xe1
 800091e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_ETH_Init+0x88>)
 8000922:	2200      	movs	r2, #0
 8000924:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_ETH_Init+0x88>)
 8000928:	2200      	movs	r2, #0
 800092a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_ETH_Init+0x88>)
 800092e:	2200      	movs	r2, #0
 8000930:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_ETH_Init+0x80>)
 8000934:	4a15      	ldr	r2, [pc, #84]	; (800098c <MX_ETH_Init+0x88>)
 8000936:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_ETH_Init+0x80>)
 800093a:	2201      	movs	r2, #1
 800093c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_ETH_Init+0x80>)
 8000940:	4a13      	ldr	r2, [pc, #76]	; (8000990 <MX_ETH_Init+0x8c>)
 8000942:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_ETH_Init+0x80>)
 8000946:	4a13      	ldr	r2, [pc, #76]	; (8000994 <MX_ETH_Init+0x90>)
 8000948:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_ETH_Init+0x80>)
 800094c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000950:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000952:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_ETH_Init+0x80>)
 8000954:	f002 faee 	bl	8002f34 <HAL_ETH_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800095e:	f000 fa45 	bl	8000dec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000962:	2234      	movs	r2, #52	; 0x34
 8000964:	2100      	movs	r1, #0
 8000966:	480c      	ldr	r0, [pc, #48]	; (8000998 <MX_ETH_Init+0x94>)
 8000968:	f008 f8a4 	bl	8008ab4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_ETH_Init+0x94>)
 800096e:	2221      	movs	r2, #33	; 0x21
 8000970:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_ETH_Init+0x94>)
 8000974:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000978:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_ETH_Init+0x94>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	240002c8 	.word	0x240002c8
 8000988:	40028000 	.word	0x40028000
 800098c:	240000ec 	.word	0x240000ec
 8000990:	24000070 	.word	0x24000070
 8000994:	24000010 	.word	0x24000010
 8000998:	24000350 	.word	0x24000350

0800099c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009a0:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <MX_SPI1_Init+0xa8>)
 80009a2:	4a29      	ldr	r2, [pc, #164]	; (8000a48 <MX_SPI1_Init+0xac>)
 80009a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009a6:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <MX_SPI1_Init+0xa8>)
 80009a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <MX_SPI1_Init+0xa8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <MX_SPI1_Init+0xa8>)
 80009b6:	220f      	movs	r2, #15
 80009b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ba:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <MX_SPI1_Init+0xa8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009c0:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <MX_SPI1_Init+0xa8>)
 80009c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <MX_SPI1_Init+0xa8>)
 80009ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <MX_SPI1_Init+0xa8>)
 80009d2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80009d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_SPI1_Init+0xa8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_SPI1_Init+0xa8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_SPI1_Init+0xa8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_SPI1_Init+0xa8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_SPI1_Init+0xa8>)
 80009f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_SPI1_Init+0xa8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_SPI1_Init+0xa8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_SPI1_Init+0xa8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_SPI1_Init+0xa8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_SPI1_Init+0xa8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_SPI1_Init+0xa8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_SPI1_Init+0xa8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_SPI1_Init+0xa8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_SPI1_Init+0xa8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_SPI1_Init+0xa8>)
 8000a30:	f006 f83e 	bl	8006ab0 <HAL_SPI_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000a3a:	f000 f9d7 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	24000240 	.word	0x24000240
 8000a48:	40013000 	.word	0x40013000

08000a4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	2224      	movs	r2, #36	; 0x24
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f008 f82a 	bl	8008ab4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	463b      	mov	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a6a:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <MX_TIM1_Init+0xac>)
 8000a6c:	4a23      	ldr	r2, [pc, #140]	; (8000afc <MX_TIM1_Init+0xb0>)
 8000a6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_TIM1_Init+0xac>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <MX_TIM1_Init+0xac>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <MX_TIM1_Init+0xac>)
 8000a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_TIM1_Init+0xac>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_TIM1_Init+0xac>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_TIM1_Init+0xac>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_TIM1_Init+0xac>)
 8000ac2:	f006 fccd 	bl	8007460 <HAL_TIM_Encoder_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000acc:	f000 f98e 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_TIM1_Init+0xac>)
 8000ae2:	f006 fe09 	bl	80076f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000aec:	f000 f97e 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3730      	adds	r7, #48	; 0x30
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	240001f4 	.word	0x240001f4
 8000afc:	40010000 	.word	0x40010000

08000b00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b04:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b06:	4a23      	ldr	r2, [pc, #140]	; (8000b94 <MX_USART3_UART_Init+0x94>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b0a:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b48:	4811      	ldr	r0, [pc, #68]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b4a:	f006 fe71 	bl	8007830 <HAL_UART_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b54:	f000 f94a 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	480d      	ldr	r0, [pc, #52]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b5c:	f007 febc 	bl	80088d8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b66:	f000 f941 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4808      	ldr	r0, [pc, #32]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b6e:	f007 fef1 	bl	8008954 <HAL_UARTEx_SetRxFifoThreshold>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b78:	f000 f938 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b7e:	f007 fe72 	bl	8008866 <HAL_UARTEx_DisableFifoMode>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b88:	f000 f930 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	240000f4 	.word	0x240000f4
 8000b94:	40004800 	.word	0x40004800

08000b98 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b82      	ldr	r3, [pc, #520]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	4a80      	ldr	r2, [pc, #512]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bce:	4b7e      	ldr	r3, [pc, #504]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	623b      	str	r3, [r7, #32]
 8000bda:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bdc:	4b7a      	ldr	r3, [pc, #488]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	4a79      	ldr	r2, [pc, #484]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000be4:	f043 0320 	orr.w	r3, r3, #32
 8000be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bec:	4b76      	ldr	r3, [pc, #472]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	f003 0320 	and.w	r3, r3, #32
 8000bf6:	61fb      	str	r3, [r7, #28]
 8000bf8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfa:	4b73      	ldr	r3, [pc, #460]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c00:	4a71      	ldr	r2, [pc, #452]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0a:	4b6f      	ldr	r3, [pc, #444]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c14:	61bb      	str	r3, [r7, #24]
 8000c16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	4b6b      	ldr	r3, [pc, #428]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1e:	4a6a      	ldr	r2, [pc, #424]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c28:	4b67      	ldr	r3, [pc, #412]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b64      	ldr	r3, [pc, #400]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	4a62      	ldr	r2, [pc, #392]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c46:	4b60      	ldr	r3, [pc, #384]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c54:	4b5c      	ldr	r3, [pc, #368]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	4a5b      	ldr	r2, [pc, #364]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000c5c:	f043 0310 	orr.w	r3, r3, #16
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c64:	4b58      	ldr	r3, [pc, #352]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	f003 0310 	and.w	r3, r3, #16
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	4b55      	ldr	r3, [pc, #340]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	4a53      	ldr	r2, [pc, #332]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c82:	4b51      	ldr	r3, [pc, #324]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	f003 0308 	and.w	r3, r3, #8
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c90:	4b4d      	ldr	r3, [pc, #308]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	4a4c      	ldr	r2, [pc, #304]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca0:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <MX_GPIO_Init+0x220>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AS5247_NCS_GPIO_Port, AS5247_NCS_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb4:	4845      	ldr	r0, [pc, #276]	; (8000dcc <MX_GPIO_Init+0x224>)
 8000cb6:	f002 fefb 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cc0:	4843      	ldr	r0, [pc, #268]	; (8000dd0 <MX_GPIO_Init+0x228>)
 8000cc2:	f002 fef5 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|DRV_NCS_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 8000ccc:	4841      	ldr	r0, [pc, #260]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000cce:	f002 feef 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4840      	ldr	r0, [pc, #256]	; (8000dd8 <MX_GPIO_Init+0x230>)
 8000cd8:	f002 feea 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	483a      	ldr	r0, [pc, #232]	; (8000ddc <MX_GPIO_Init+0x234>)
 8000cf2:	f002 fd35 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pin : AS5247_NCS_Pin */
  GPIO_InitStruct.Pin = AS5247_NCS_Pin;
 8000cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(AS5247_NCS_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	482f      	ldr	r0, [pc, #188]	; (8000dcc <MX_GPIO_Init+0x224>)
 8000d10:	f002 fd26 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000d14:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4828      	ldr	r0, [pc, #160]	; (8000dd0 <MX_GPIO_Init+0x228>)
 8000d2e:	f002 fd17 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 DRV_NCS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|DRV_NCS_Pin;
 8000d32:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4822      	ldr	r0, [pc, #136]	; (8000dd4 <MX_GPIO_Init+0x22c>)
 8000d4c:	f002 fd08 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <MX_GPIO_Init+0x238>)
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	4820      	ldr	r0, [pc, #128]	; (8000de4 <MX_GPIO_Init+0x23c>)
 8000d64:	f002 fcfc 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	481a      	ldr	r0, [pc, #104]	; (8000de8 <MX_GPIO_Init+0x240>)
 8000d7e:	f002 fcef 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d94:	230a      	movs	r3, #10
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4812      	ldr	r0, [pc, #72]	; (8000de8 <MX_GPIO_Init+0x240>)
 8000da0:	f002 fcde 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000da4:	2302      	movs	r3, #2
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db8:	4619      	mov	r1, r3
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <MX_GPIO_Init+0x230>)
 8000dbc:	f002 fcd0 	bl	8003760 <HAL_GPIO_Init>

}
 8000dc0:	bf00      	nop
 8000dc2:	3738      	adds	r7, #56	; 0x38
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	58021400 	.word	0x58021400
 8000dd0:	58020400 	.word	0x58020400
 8000dd4:	58020c00 	.word	0x58020c00
 8000dd8:	58021000 	.word	0x58021000
 8000ddc:	58020800 	.word	0x58020800
 8000de0:	11110000 	.word	0x11110000
 8000de4:	58021800 	.word	0x58021800
 8000de8:	58020000 	.word	0x58020000

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <Error_Handler+0x8>
	...

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_MspInit+0x30>)
 8000e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e04:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <HAL_MspInit+0x30>)
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_MspInit+0x30>)
 8000e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	58024400 	.word	0x58024400

08000e2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0b8      	sub	sp, #224	; 0xe0
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e44:	f107 0318 	add.w	r3, r7, #24
 8000e48:	22b4      	movs	r2, #180	; 0xb4
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f007 fe31 	bl	8008ab4 <memset>
  if(hadc->Instance==ADC1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a39      	ldr	r2, [pc, #228]	; (8000f3c <HAL_ADC_MspInit+0x110>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d16b      	bne.n	8000f34 <HAL_ADC_MspInit+0x108>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e60:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000e66:	2318      	movs	r3, #24
 8000e68:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e72:	2302      	movs	r3, #2
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e76:	23c0      	movs	r3, #192	; 0xc0
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e88:	f107 0318 	add.w	r3, r7, #24
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fd7d 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000e98:	f7ff ffa8 	bl	8000dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e9c:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <HAL_ADC_MspInit+0x114>)
 8000e9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea2:	4a27      	ldr	r2, [pc, #156]	; (8000f40 <HAL_ADC_MspInit+0x114>)
 8000ea4:	f043 0320 	orr.w	r3, r3, #32
 8000ea8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eac:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <HAL_ADC_MspInit+0x114>)
 8000eae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb2:	f003 0320 	and.w	r3, r3, #32
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <HAL_ADC_MspInit+0x114>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	4a1f      	ldr	r2, [pc, #124]	; (8000f40 <HAL_ADC_MspInit+0x114>)
 8000ec2:	f043 0302 	orr.w	r3, r3, #2
 8000ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_ADC_MspInit+0x114>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_ADC_MspInit+0x114>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <HAL_ADC_MspInit+0x114>)
 8000ee0:	f043 0320 	orr.w	r3, r3, #32
 8000ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_ADC_MspInit+0x114>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eee:	f003 0320 	and.w	r3, r3, #32
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = I_SenseB_Pin;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efc:	2303      	movs	r3, #3
 8000efe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(I_SenseB_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480d      	ldr	r0, [pc, #52]	; (8000f44 <HAL_ADC_MspInit+0x118>)
 8000f10:	f002 fc26 	bl	8003760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_SenseA_Pin;
 8000f14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(I_SenseA_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <HAL_ADC_MspInit+0x11c>)
 8000f30:	f002 fc16 	bl	8003760 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f34:	bf00      	nop
 8000f36:	37e0      	adds	r7, #224	; 0xe0
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40022000 	.word	0x40022000
 8000f40:	58024400 	.word	0x58024400
 8000f44:	58020400 	.word	0x58020400
 8000f48:	58021400 	.word	0x58021400

08000f4c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	; 0x38
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a59      	ldr	r2, [pc, #356]	; (80010d0 <HAL_ETH_MspInit+0x184>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	f040 80ab 	bne.w	80010c6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f70:	4b58      	ldr	r3, [pc, #352]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8000f72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f76:	4a57      	ldr	r2, [pc, #348]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8000f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f7c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f80:	4b54      	ldr	r3, [pc, #336]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8000f82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f8a:	623b      	str	r3, [r7, #32]
 8000f8c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f8e:	4b51      	ldr	r3, [pc, #324]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8000f90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f94:	4a4f      	ldr	r2, [pc, #316]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8000f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f9e:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8000fa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000fac:	4b49      	ldr	r3, [pc, #292]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8000fae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb2:	4a48      	ldr	r2, [pc, #288]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fbc:	4b45      	ldr	r3, [pc, #276]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8000fbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	61bb      	str	r3, [r7, #24]
 8000fc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	4b42      	ldr	r3, [pc, #264]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd0:	4a40      	ldr	r2, [pc, #256]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fda:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b3a      	ldr	r3, [pc, #232]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fee:	4a39      	ldr	r2, [pc, #228]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff8:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100c:	4a31      	ldr	r2, [pc, #196]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001016:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8001026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102a:	4a2a      	ldr	r2, [pc, #168]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 800102c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001030:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <HAL_ETH_MspInit+0x188>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001042:	2332      	movs	r3, #50	; 0x32
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001052:	230b      	movs	r3, #11
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	481e      	ldr	r0, [pc, #120]	; (80010d8 <HAL_ETH_MspInit+0x18c>)
 800105e:	f002 fb7f 	bl	8003760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001062:	2386      	movs	r3, #134	; 0x86
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001072:	230b      	movs	r3, #11
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107a:	4619      	mov	r1, r3
 800107c:	4817      	ldr	r0, [pc, #92]	; (80010dc <HAL_ETH_MspInit+0x190>)
 800107e:	f002 fb6f 	bl	8003760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001094:	230b      	movs	r3, #11
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109c:	4619      	mov	r1, r3
 800109e:	4810      	ldr	r0, [pc, #64]	; (80010e0 <HAL_ETH_MspInit+0x194>)
 80010a0:	f002 fb5e 	bl	8003760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b6:	230b      	movs	r3, #11
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010be:	4619      	mov	r1, r3
 80010c0:	4808      	ldr	r0, [pc, #32]	; (80010e4 <HAL_ETH_MspInit+0x198>)
 80010c2:	f002 fb4d 	bl	8003760 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	3738      	adds	r7, #56	; 0x38
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40028000 	.word	0x40028000
 80010d4:	58024400 	.word	0x58024400
 80010d8:	58020800 	.word	0x58020800
 80010dc:	58020000 	.word	0x58020000
 80010e0:	58020400 	.word	0x58020400
 80010e4:	58021800 	.word	0x58021800

080010e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0b8      	sub	sp, #224	; 0xe0
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001100:	f107 0318 	add.w	r3, r7, #24
 8001104:	22b4      	movs	r2, #180	; 0xb4
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f007 fcd3 	bl	8008ab4 <memset>
  if(hspi->Instance==SPI1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a36      	ldr	r2, [pc, #216]	; (80011ec <HAL_SPI_MspInit+0x104>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d165      	bne.n	80011e4 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800111e:	2300      	movs	r3, #0
 8001120:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001122:	f107 0318 	add.w	r3, r7, #24
 8001126:	4618      	mov	r0, r3
 8001128:	f003 fc30 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001132:	f7ff fe5b 	bl	8000dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001136:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <HAL_SPI_MspInit+0x108>)
 8001138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800113c:	4a2c      	ldr	r2, [pc, #176]	; (80011f0 <HAL_SPI_MspInit+0x108>)
 800113e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001142:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001146:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <HAL_SPI_MspInit+0x108>)
 8001148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800114c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <HAL_SPI_MspInit+0x108>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115a:	4a25      	ldr	r2, [pc, #148]	; (80011f0 <HAL_SPI_MspInit+0x108>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001164:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <HAL_SPI_MspInit+0x108>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <HAL_SPI_MspInit+0x108>)
 8001174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001178:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <HAL_SPI_MspInit+0x108>)
 800117a:	f043 0302 	orr.w	r3, r3, #2
 800117e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <HAL_SPI_MspInit+0x108>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001190:	2360      	movs	r3, #96	; 0x60
 8001192:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011a8:	2305      	movs	r3, #5
 80011aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011b2:	4619      	mov	r1, r3
 80011b4:	480f      	ldr	r0, [pc, #60]	; (80011f4 <HAL_SPI_MspInit+0x10c>)
 80011b6:	f002 fad3 	bl	8003760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011ba:	2320      	movs	r3, #32
 80011bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011d2:	2305      	movs	r3, #5
 80011d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <HAL_SPI_MspInit+0x110>)
 80011e0:	f002 fabe 	bl	8003760 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011e4:	bf00      	nop
 80011e6:	37e0      	adds	r7, #224	; 0xe0
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40013000 	.word	0x40013000
 80011f0:	58024400 	.word	0x58024400
 80011f4:	58020000 	.word	0x58020000
 80011f8:	58020400 	.word	0x58020400

080011fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <HAL_TIM_Encoder_MspInit+0x88>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d12e      	bne.n	800127c <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001224:	4a18      	ldr	r2, [pc, #96]	; (8001288 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_TIM_Encoder_MspInit+0x8c>)
 800123e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001242:	4a11      	ldr	r2, [pc, #68]	; (8001288 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_TIM_Encoder_MspInit+0x8c>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800125a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800125e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800126c:	2301      	movs	r3, #1
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_TIM_Encoder_MspInit+0x90>)
 8001278:	f002 fa72 	bl	8003760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40010000 	.word	0x40010000
 8001288:	58024400 	.word	0x58024400
 800128c:	58021000 	.word	0x58021000

08001290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b0b6      	sub	sp, #216	; 0xd8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	22b4      	movs	r2, #180	; 0xb4
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f007 fbff 	bl	8008ab4 <memset>
  if(huart->Instance==USART3)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a25      	ldr	r2, [pc, #148]	; (8001350 <HAL_UART_MspInit+0xc0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d142      	bne.n	8001346 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012c0:	2302      	movs	r3, #2
 80012c2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 fb5c 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012da:	f7ff fd87 	bl	8000dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <HAL_UART_MspInit+0xc4>)
 80012e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012e4:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <HAL_UART_MspInit+0xc4>)
 80012e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_UART_MspInit+0xc4>)
 80012f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_UART_MspInit+0xc4>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001302:	4a14      	ldr	r2, [pc, #80]	; (8001354 <HAL_UART_MspInit+0xc4>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_UART_MspInit+0xc4>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800131a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800131e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001334:	2307      	movs	r3, #7
 8001336:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800133e:	4619      	mov	r1, r3
 8001340:	4805      	ldr	r0, [pc, #20]	; (8001358 <HAL_UART_MspInit+0xc8>)
 8001342:	f002 fa0d 	bl	8003760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001346:	bf00      	nop
 8001348:	37d8      	adds	r7, #216	; 0xd8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40004800 	.word	0x40004800
 8001354:	58024400 	.word	0x58024400
 8001358:	58020c00 	.word	0x58020c00

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <NMI_Handler+0x4>

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a8:	f000 f91a 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013b4:	4b34      	ldr	r3, [pc, #208]	; (8001488 <SystemInit+0xd8>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ba:	4a33      	ldr	r2, [pc, #204]	; (8001488 <SystemInit+0xd8>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013c4:	4b31      	ldr	r3, [pc, #196]	; (800148c <SystemInit+0xdc>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	2b06      	cmp	r3, #6
 80013ce:	d807      	bhi.n	80013e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013d0:	4b2e      	ldr	r3, [pc, #184]	; (800148c <SystemInit+0xdc>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 030f 	bic.w	r3, r3, #15
 80013d8:	4a2c      	ldr	r2, [pc, #176]	; (800148c <SystemInit+0xdc>)
 80013da:	f043 0307 	orr.w	r3, r3, #7
 80013de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013e0:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <SystemInit+0xe0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a2a      	ldr	r2, [pc, #168]	; (8001490 <SystemInit+0xe0>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013ec:	4b28      	ldr	r3, [pc, #160]	; (8001490 <SystemInit+0xe0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013f2:	4b27      	ldr	r3, [pc, #156]	; (8001490 <SystemInit+0xe0>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4926      	ldr	r1, [pc, #152]	; (8001490 <SystemInit+0xe0>)
 80013f8:	4b26      	ldr	r3, [pc, #152]	; (8001494 <SystemInit+0xe4>)
 80013fa:	4013      	ands	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <SystemInit+0xdc>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <SystemInit+0xdc>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 030f 	bic.w	r3, r3, #15
 8001412:	4a1e      	ldr	r2, [pc, #120]	; (800148c <SystemInit+0xdc>)
 8001414:	f043 0307 	orr.w	r3, r3, #7
 8001418:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <SystemInit+0xe0>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <SystemInit+0xe0>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <SystemInit+0xe0>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <SystemInit+0xe0>)
 800142e:	4a1a      	ldr	r2, [pc, #104]	; (8001498 <SystemInit+0xe8>)
 8001430:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <SystemInit+0xe0>)
 8001434:	4a19      	ldr	r2, [pc, #100]	; (800149c <SystemInit+0xec>)
 8001436:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <SystemInit+0xe0>)
 800143a:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <SystemInit+0xf0>)
 800143c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <SystemInit+0xe0>)
 8001440:	2200      	movs	r2, #0
 8001442:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <SystemInit+0xe0>)
 8001446:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <SystemInit+0xf0>)
 8001448:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <SystemInit+0xe0>)
 800144c:	2200      	movs	r2, #0
 800144e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <SystemInit+0xe0>)
 8001452:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <SystemInit+0xf0>)
 8001454:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <SystemInit+0xe0>)
 8001458:	2200      	movs	r2, #0
 800145a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <SystemInit+0xe0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <SystemInit+0xe0>)
 8001462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001466:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <SystemInit+0xe0>)
 800146a:	2200      	movs	r2, #0
 800146c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <SystemInit+0xf4>)
 8001470:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001474:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SystemInit+0xd8>)
 8001478:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800147c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00
 800148c:	52002000 	.word	0x52002000
 8001490:	58024400 	.word	0x58024400
 8001494:	eaf6ed7f 	.word	0xeaf6ed7f
 8001498:	02020200 	.word	0x02020200
 800149c:	01ff0000 	.word	0x01ff0000
 80014a0:	01010280 	.word	0x01010280
 80014a4:	52004000 	.word	0x52004000

080014a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014ac:	f7ff ff80 	bl	80013b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014b2:	490d      	ldr	r1, [pc, #52]	; (80014e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c8:	4c0a      	ldr	r4, [pc, #40]	; (80014f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d6:	f007 fac9 	bl	8008a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014da:	f7ff f8f3 	bl	80006c4 <main>
  bx  lr
 80014de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80014e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014e8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80014ec:	08008b24 	.word	0x08008b24
  ldr r2, =_sbss
 80014f0:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80014f4:	24000388 	.word	0x24000388

080014f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC3_IRQHandler>
	...

080014fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001502:	2003      	movs	r0, #3
 8001504:	f001 fce4 	bl	8002ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001508:	f003 f86a 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 800150c:	4602      	mov	r2, r0
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_Init+0x68>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	4913      	ldr	r1, [pc, #76]	; (8001568 <HAL_Init+0x6c>)
 800151a:	5ccb      	ldrb	r3, [r1, r3]
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	fa22 f303 	lsr.w	r3, r2, r3
 8001524:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_Init+0x68>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_Init+0x6c>)
 8001530:	5cd3      	ldrb	r3, [r2, r3]
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
 800153c:	4a0b      	ldr	r2, [pc, #44]	; (800156c <HAL_Init+0x70>)
 800153e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001540:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <HAL_Init+0x74>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001546:	2000      	movs	r0, #0
 8001548:	f000 f814 	bl	8001574 <HAL_InitTick>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e002      	b.n	800155c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001556:	f7ff fc4f 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	58024400 	.word	0x58024400
 8001568:	08008adc 	.word	0x08008adc
 800156c:	24000004 	.word	0x24000004
 8001570:	24000000 	.word	0x24000000

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_InitTick+0x60>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e021      	b.n	80015cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <HAL_InitTick+0x64>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_InitTick+0x60>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f001 fcbb 	bl	8002f1a <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f001 fc93 	bl	8002ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <HAL_InitTick+0x68>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2400000c 	.word	0x2400000c
 80015d8:	24000000 	.word	0x24000000
 80015dc:	24000008 	.word	0x24000008

080015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	2400000c 	.word	0x2400000c
 8001604:	24000384 	.word	0x24000384

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	24000384 	.word	0x24000384

08001620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ffee 	bl	8001608 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001638:	d005      	beq.n	8001646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_Delay+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001646:	bf00      	nop
 8001648:	f7ff ffde 	bl	8001608 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f7      	bhi.n	8001648 <HAL_Delay+0x28>
  {
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2400000c 	.word	0x2400000c

08001668 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001678:	4904      	ldr	r1, [pc, #16]	; (800168c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	58000400 	.word	0x58000400

08001690 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	609a      	str	r2, [r3, #8]
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	609a      	str	r2, [r3, #8]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3360      	adds	r3, #96	; 0x60
 800170a:	461a      	mov	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <LL_ADC_SetOffset+0x60>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d10b      	bne.n	8001734 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	4313      	orrs	r3, r2
 800172a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001732:	e00b      	b.n	800174c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	430b      	orrs	r3, r1
 8001746:	431a      	orrs	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	601a      	str	r2, [r3, #0]
}
 800174c:	bf00      	nop
 800174e:	371c      	adds	r7, #28
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	58026000 	.word	0x58026000

0800175c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3360      	adds	r3, #96	; 0x60
 800176a:	461a      	mov	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	431a      	orrs	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	611a      	str	r2, [r3, #16]
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00e      	beq.n	80017ee <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	3360      	adds	r3, #96	; 0x60
 80017d4:	461a      	mov	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	431a      	orrs	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	601a      	str	r2, [r3, #0]
  }
}
 80017ee:	bf00      	nop
 80017f0:	371c      	adds	r7, #28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	58026000 	.word	0x58026000

08001800 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4a0c      	ldr	r2, [pc, #48]	; (8001840 <LL_ADC_SetOffsetSaturation+0x40>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d10e      	bne.n	8001832 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3360      	adds	r3, #96	; 0x60
 8001818:	461a      	mov	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	431a      	orrs	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001832:	bf00      	nop
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	58026000 	.word	0x58026000

08001844 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <LL_ADC_SetOffsetSign+0x40>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d10e      	bne.n	8001876 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	3360      	adds	r3, #96	; 0x60
 800185c:	461a      	mov	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	431a      	orrs	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001876:	bf00      	nop
 8001878:	371c      	adds	r7, #28
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	58026000 	.word	0x58026000

08001888 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3360      	adds	r3, #96	; 0x60
 8001898:	461a      	mov	r2, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4a0c      	ldr	r2, [pc, #48]	; (80018d8 <LL_ADC_SetOffsetState+0x50>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d108      	bne.n	80018bc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80018ba:	e007      	b.n	80018cc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	601a      	str	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	58026000 	.word	0x58026000

080018dc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	3330      	adds	r3, #48	; 0x30
 80018ec:	461a      	mov	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	4413      	add	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f003 031f 	and.w	r3, r3, #31
 8001906:	211f      	movs	r1, #31
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	0e9b      	lsrs	r3, r3, #26
 8001914:	f003 011f 	and.w	r1, r3, #31
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	431a      	orrs	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001928:	bf00      	nop
 800192a:	371c      	adds	r7, #28
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3314      	adds	r3, #20
 8001944:	461a      	mov	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	0e5b      	lsrs	r3, r3, #25
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	4413      	add	r3, r2
 8001952:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	0d1b      	lsrs	r3, r3, #20
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	2107      	movs	r1, #7
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	401a      	ands	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	0d1b      	lsrs	r3, r3, #20
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4a1a      	ldr	r2, [pc, #104]	; (8001a04 <LL_ADC_SetChannelSingleDiff+0x78>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d115      	bne.n	80019cc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f003 0318 	and.w	r3, r3, #24
 80019b6:	4914      	ldr	r1, [pc, #80]	; (8001a08 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80019b8:	40d9      	lsrs	r1, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	400b      	ands	r3, r1
 80019be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019c2:	431a      	orrs	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80019ca:	e014      	b.n	80019f6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019d8:	43db      	mvns	r3, r3
 80019da:	401a      	ands	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0318 	and.w	r3, r3, #24
 80019e2:	4909      	ldr	r1, [pc, #36]	; (8001a08 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80019e4:	40d9      	lsrs	r1, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	400b      	ands	r3, r1
 80019ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019ee:	431a      	orrs	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	58026000 	.word	0x58026000
 8001a08:	000fffff 	.word	0x000fffff

08001a0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6093      	str	r3, [r2, #8]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	5fffffc0 	.word	0x5fffffc0

08001a30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a44:	d101      	bne.n	8001a4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <LL_ADC_EnableInternalRegulator+0x24>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	6fffffc0 	.word	0x6fffffc0

08001a80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a94:	d101      	bne.n	8001a9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <LL_ADC_IsEnabled+0x18>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <LL_ADC_IsEnabled+0x1a>
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d101      	bne.n	8001ae6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d101      	bne.n	8001b0c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e1ee      	b.n	8001f14 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d109      	bne.n	8001b58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff f971 	bl	8000e2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff67 	bl	8001a30 <LL_ADC_IsDeepPowerDownEnabled>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d004      	beq.n	8001b72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff4d 	bl	8001a0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff82 	bl	8001a80 <LL_ADC_IsInternalRegulatorEnabled>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d114      	bne.n	8001bac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff66 	bl	8001a58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b8c:	4b8e      	ldr	r3, [pc, #568]	; (8001dc8 <HAL_ADC_Init+0x2ac>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	099b      	lsrs	r3, r3, #6
 8001b92:	4a8e      	ldr	r2, [pc, #568]	; (8001dcc <HAL_ADC_Init+0x2b0>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	099b      	lsrs	r3, r3, #6
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b9e:	e002      	b.n	8001ba6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f9      	bne.n	8001ba0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff65 	bl	8001a80 <LL_ADC_IsInternalRegulatorEnabled>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10d      	bne.n	8001bd8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc0:	f043 0210 	orr.w	r2, r3, #16
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bcc:	f043 0201 	orr.w	r2, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff76 	bl	8001ace <LL_ADC_REG_IsConversionOngoing>
 8001be2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f040 8188 	bne.w	8001f02 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f040 8184 	bne.w	8001f02 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c02:	f043 0202 	orr.w	r2, r3, #2
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff4a 	bl	8001aa8 <LL_ADC_IsEnabled>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d136      	bne.n	8001c88 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a6c      	ldr	r2, [pc, #432]	; (8001dd0 <HAL_ADC_Init+0x2b4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d004      	beq.n	8001c2e <HAL_ADC_Init+0x112>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a6a      	ldr	r2, [pc, #424]	; (8001dd4 <HAL_ADC_Init+0x2b8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d10e      	bne.n	8001c4c <HAL_ADC_Init+0x130>
 8001c2e:	4868      	ldr	r0, [pc, #416]	; (8001dd0 <HAL_ADC_Init+0x2b4>)
 8001c30:	f7ff ff3a 	bl	8001aa8 <LL_ADC_IsEnabled>
 8001c34:	4604      	mov	r4, r0
 8001c36:	4867      	ldr	r0, [pc, #412]	; (8001dd4 <HAL_ADC_Init+0x2b8>)
 8001c38:	f7ff ff36 	bl	8001aa8 <LL_ADC_IsEnabled>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4323      	orrs	r3, r4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bf0c      	ite	eq
 8001c44:	2301      	moveq	r3, #1
 8001c46:	2300      	movne	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	e008      	b.n	8001c5e <HAL_ADC_Init+0x142>
 8001c4c:	4862      	ldr	r0, [pc, #392]	; (8001dd8 <HAL_ADC_Init+0x2bc>)
 8001c4e:	f7ff ff2b 	bl	8001aa8 <LL_ADC_IsEnabled>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf0c      	ite	eq
 8001c58:	2301      	moveq	r3, #1
 8001c5a:	2300      	movne	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d012      	beq.n	8001c88 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a5a      	ldr	r2, [pc, #360]	; (8001dd0 <HAL_ADC_Init+0x2b4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d004      	beq.n	8001c76 <HAL_ADC_Init+0x15a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <HAL_ADC_Init+0x2b8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_ADC_Init+0x15e>
 8001c76:	4a59      	ldr	r2, [pc, #356]	; (8001ddc <HAL_ADC_Init+0x2c0>)
 8001c78:	e000      	b.n	8001c7c <HAL_ADC_Init+0x160>
 8001c7a:	4a59      	ldr	r2, [pc, #356]	; (8001de0 <HAL_ADC_Init+0x2c4>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4619      	mov	r1, r3
 8001c82:	4610      	mov	r0, r2
 8001c84:	f7ff fd04 	bl	8001690 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a52      	ldr	r2, [pc, #328]	; (8001dd8 <HAL_ADC_Init+0x2bc>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d129      	bne.n	8001ce6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7e5b      	ldrb	r3, [r3, #25]
 8001c96:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001c9c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001ca2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d013      	beq.n	8001cd4 <HAL_ADC_Init+0x1b8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b0c      	cmp	r3, #12
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_ADC_Init+0x1b4>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b1c      	cmp	r3, #28
 8001cba:	d007      	beq.n	8001ccc <HAL_ADC_Init+0x1b0>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b18      	cmp	r3, #24
 8001cc2:	d101      	bne.n	8001cc8 <HAL_ADC_Init+0x1ac>
 8001cc4:	2318      	movs	r3, #24
 8001cc6:	e006      	b.n	8001cd6 <HAL_ADC_Init+0x1ba>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e004      	b.n	8001cd6 <HAL_ADC_Init+0x1ba>
 8001ccc:	2310      	movs	r3, #16
 8001cce:	e002      	b.n	8001cd6 <HAL_ADC_Init+0x1ba>
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	e000      	b.n	8001cd6 <HAL_ADC_Init+0x1ba>
 8001cd4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001cd6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cde:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	e00e      	b.n	8001d04 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7e5b      	ldrb	r3, [r3, #25]
 8001cea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cf0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001cf6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d106      	bne.n	8001d1c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	3b01      	subs	r3, #1
 8001d14:	045b      	lsls	r3, r3, #17
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d009      	beq.n	8001d38 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a26      	ldr	r2, [pc, #152]	; (8001dd8 <HAL_ADC_Init+0x2bc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d115      	bne.n	8001d6e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_ADC_Init+0x2c8>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	69b9      	ldr	r1, [r7, #24]
 8001d52:	430b      	orrs	r3, r1
 8001d54:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	611a      	str	r2, [r3, #16]
 8001d6c:	e009      	b.n	8001d82 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HAL_ADC_Init+0x2cc>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	69b9      	ldr	r1, [r7, #24]
 8001d7e:	430b      	orrs	r3, r1
 8001d80:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fea1 	bl	8001ace <LL_ADC_REG_IsConversionOngoing>
 8001d8c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff feae 	bl	8001af4 <LL_ADC_INJ_IsConversionOngoing>
 8001d98:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f040 808e 	bne.w	8001ebe <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 808a 	bne.w	8001ebe <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <HAL_ADC_Init+0x2bc>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d11b      	bne.n	8001dec <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7e1b      	ldrb	r3, [r3, #24]
 8001db8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dc0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	e018      	b.n	8001dfa <HAL_ADC_Init+0x2de>
 8001dc8:	24000000 	.word	0x24000000
 8001dcc:	053e2d63 	.word	0x053e2d63
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	40022100 	.word	0x40022100
 8001dd8:	58026000 	.word	0x58026000
 8001ddc:	40022300 	.word	0x40022300
 8001de0:	58026300 	.word	0x58026300
 8001de4:	fff04007 	.word	0xfff04007
 8001de8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	7e1b      	ldrb	r3, [r3, #24]
 8001df0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	4b46      	ldr	r3, [pc, #280]	; (8001f1c <HAL_ADC_Init+0x400>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	69b9      	ldr	r1, [r7, #24]
 8001e0a:	430b      	orrs	r3, r1
 8001e0c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d137      	bne.n	8001e88 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a3f      	ldr	r2, [pc, #252]	; (8001f20 <HAL_ADC_Init+0x404>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d116      	bne.n	8001e56 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <HAL_ADC_Init+0x408>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e40:	4311      	orrs	r1, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001e46:	430a      	orrs	r2, r1
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	611a      	str	r2, [r3, #16]
 8001e54:	e020      	b.n	8001e98 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	4b32      	ldr	r3, [pc, #200]	; (8001f28 <HAL_ADC_Init+0x40c>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e64:	3a01      	subs	r2, #1
 8001e66:	0411      	lsls	r1, r2, #16
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e6c:	4311      	orrs	r1, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e72:	4311      	orrs	r1, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	611a      	str	r2, [r3, #16]
 8001e86:	e007      	b.n	8001e98 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1b      	ldr	r2, [pc, #108]	; (8001f20 <HAL_ADC_Init+0x404>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d002      	beq.n	8001ebe <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 fd63 	bl	8002984 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	f023 010f 	bic.w	r1, r3, #15
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	1e5a      	subs	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ede:	e007      	b.n	8001ef0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 020f 	bic.w	r2, r2, #15
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef4:	f023 0303 	bic.w	r3, r3, #3
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	661a      	str	r2, [r3, #96]	; 0x60
 8001f00:	e007      	b.n	8001f12 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f06:	f043 0210 	orr.w	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f12:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3724      	adds	r7, #36	; 0x24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd90      	pop	{r4, r7, pc}
 8001f1c:	ffffbffc 	.word	0xffffbffc
 8001f20:	58026000 	.word	0x58026000
 8001f24:	fc00f81f 	.word	0xfc00f81f
 8001f28:	fc00f81e 	.word	0xfc00f81e

08001f2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f2c:	b590      	push	{r4, r7, lr}
 8001f2e:	b0b9      	sub	sp, #228	; 0xe4
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f46:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4ab3      	ldr	r2, [pc, #716]	; (800221c <HAL_ADC_ConfigChannel+0x2f0>)
 8001f4e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d102      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x34>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	f000 bcfa 	b.w	8002954 <HAL_ADC_ConfigChannel+0xa28>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fdae 	bl	8001ace <LL_ADC_REG_IsConversionOngoing>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f040 84de 	bne.w	8002936 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4aa8      	ldr	r2, [pc, #672]	; (8002220 <HAL_ADC_ConfigChannel+0x2f4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d033      	beq.n	8001fec <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d108      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x76>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	0e9b      	lsrs	r3, r3, #26
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	e01d      	b.n	8001fde <HAL_ADC_ConfigChannel+0xb2>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e004      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8001fca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	2201      	movs	r2, #1
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	69d1      	ldr	r1, [r2, #28]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f7ff fc6f 	bl	80018dc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fd63 	bl	8001ace <LL_ADC_REG_IsConversionOngoing>
 8002008:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fd6f 	bl	8001af4 <LL_ADC_INJ_IsConversionOngoing>
 8002016:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800201a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 8270 	bne.w	8002504 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002024:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002028:	2b00      	cmp	r3, #0
 800202a:	f040 826b 	bne.w	8002504 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	6819      	ldr	r1, [r3, #0]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	461a      	mov	r2, r3
 800203c:	f7ff fc7a 	bl	8001934 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a76      	ldr	r2, [pc, #472]	; (8002220 <HAL_ADC_ConfigChannel+0x2f4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10d      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	695a      	ldr	r2, [r3, #20]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002064:	e032      	b.n	80020cc <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002066:	4b6f      	ldr	r3, [pc, #444]	; (8002224 <HAL_ADC_ConfigChannel+0x2f8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800206e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002072:	d10b      	bne.n	800208c <HAL_ADC_ConfigChannel+0x160>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	e01d      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x19c>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10b      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x186>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	e00a      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x19c>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d048      	beq.n	8002166 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	6919      	ldr	r1, [r3, #16]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020e4:	f7ff fb08 	bl	80016f8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a4c      	ldr	r2, [pc, #304]	; (8002220 <HAL_ADC_ConfigChannel+0x2f4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d119      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6919      	ldr	r1, [r3, #16]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	461a      	mov	r2, r3
 8002100:	f7ff fba0 	bl	8001844 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6919      	ldr	r1, [r3, #16]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d102      	bne.n	800211c <HAL_ADC_ConfigChannel+0x1f0>
 8002116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800211a:	e000      	b.n	800211e <HAL_ADC_ConfigChannel+0x1f2>
 800211c:	2300      	movs	r3, #0
 800211e:	461a      	mov	r2, r3
 8002120:	f7ff fb6e 	bl	8001800 <LL_ADC_SetOffsetSaturation>
 8002124:	e1ee      	b.n	8002504 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6919      	ldr	r1, [r3, #16]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002134:	2b01      	cmp	r3, #1
 8002136:	d102      	bne.n	800213e <HAL_ADC_ConfigChannel+0x212>
 8002138:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800213c:	e000      	b.n	8002140 <HAL_ADC_ConfigChannel+0x214>
 800213e:	2300      	movs	r3, #0
 8002140:	461a      	mov	r2, r3
 8002142:	f7ff fb3b 	bl	80017bc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6919      	ldr	r1, [r3, #16]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	7e1b      	ldrb	r3, [r3, #24]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d102      	bne.n	800215c <HAL_ADC_ConfigChannel+0x230>
 8002156:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800215a:	e000      	b.n	800215e <HAL_ADC_ConfigChannel+0x232>
 800215c:	2300      	movs	r3, #0
 800215e:	461a      	mov	r2, r3
 8002160:	f7ff fb12 	bl	8001788 <LL_ADC_SetDataRightShift>
 8002164:	e1ce      	b.n	8002504 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a2d      	ldr	r2, [pc, #180]	; (8002220 <HAL_ADC_ConfigChannel+0x2f4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	f040 8181 	bne.w	8002474 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff faef 	bl	800175c <LL_ADC_GetOffsetChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10a      	bne.n	800219e <HAL_ADC_ConfigChannel+0x272>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fae4 	bl	800175c <LL_ADC_GetOffsetChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	0e9b      	lsrs	r3, r3, #26
 8002198:	f003 021f 	and.w	r2, r3, #31
 800219c:	e01e      	b.n	80021dc <HAL_ADC_ConfigChannel+0x2b0>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fad9 	bl	800175c <LL_ADC_GetOffsetChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80021bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80021c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e004      	b.n	80021da <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80021d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x2c8>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	0e9b      	lsrs	r3, r3, #26
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	e01e      	b.n	8002232 <HAL_ADC_ConfigChannel+0x306>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002208:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800220c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002210:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d107      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e00a      	b.n	8002232 <HAL_ADC_ConfigChannel+0x306>
 800221c:	47ff0000 	.word	0x47ff0000
 8002220:	58026000 	.word	0x58026000
 8002224:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8002228:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	429a      	cmp	r2, r3
 8002234:	d106      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fb22 	bl	8001888 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2101      	movs	r1, #1
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fa86 	bl	800175c <LL_ADC_GetOffsetChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10a      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x344>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2101      	movs	r1, #1
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fa7b 	bl	800175c <LL_ADC_GetOffsetChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	0e9b      	lsrs	r3, r3, #26
 800226a:	f003 021f 	and.w	r2, r3, #31
 800226e:	e01e      	b.n	80022ae <HAL_ADC_ConfigChannel+0x382>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2101      	movs	r1, #1
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fa70 	bl	800175c <LL_ADC_GetOffsetChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800228e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002296:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800229e:	2320      	movs	r3, #32
 80022a0:	e004      	b.n	80022ac <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80022a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d105      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x39a>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	0e9b      	lsrs	r3, r3, #26
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	e018      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x3cc>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80022da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80022e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80022ea:	2320      	movs	r3, #32
 80022ec:	e004      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80022ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d106      	bne.n	800230a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2200      	movs	r2, #0
 8002302:	2101      	movs	r1, #1
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fabf 	bl	8001888 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2102      	movs	r1, #2
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fa23 	bl	800175c <LL_ADC_GetOffsetChannel>
 8002316:	4603      	mov	r3, r0
 8002318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10a      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x40a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2102      	movs	r1, #2
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fa18 	bl	800175c <LL_ADC_GetOffsetChannel>
 800232c:	4603      	mov	r3, r0
 800232e:	0e9b      	lsrs	r3, r3, #26
 8002330:	f003 021f 	and.w	r2, r3, #31
 8002334:	e01e      	b.n	8002374 <HAL_ADC_ConfigChannel+0x448>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2102      	movs	r1, #2
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fa0d 	bl	800175c <LL_ADC_GetOffsetChannel>
 8002342:	4603      	mov	r3, r0
 8002344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002354:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002358:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800235c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e004      	b.n	8002372 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8002368:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800237c:	2b00      	cmp	r3, #0
 800237e:	d105      	bne.n	800238c <HAL_ADC_ConfigChannel+0x460>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0e9b      	lsrs	r3, r3, #26
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	e014      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x48a>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800239a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800239c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80023a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80023a8:	2320      	movs	r3, #32
 80023aa:	e004      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80023ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d106      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	2102      	movs	r1, #2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fa60 	bl	8001888 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2103      	movs	r1, #3
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff f9c4 	bl	800175c <LL_ADC_GetOffsetChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10a      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x4c8>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2103      	movs	r1, #3
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff f9b9 	bl	800175c <LL_ADC_GetOffsetChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	0e9b      	lsrs	r3, r3, #26
 80023ee:	f003 021f 	and.w	r2, r3, #31
 80023f2:	e017      	b.n	8002424 <HAL_ADC_ConfigChannel+0x4f8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2103      	movs	r1, #3
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff f9ae 	bl	800175c <LL_ADC_GetOffsetChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800240c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002416:	2320      	movs	r3, #32
 8002418:	e003      	b.n	8002422 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800241a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800241c:	fab3 f383 	clz	r3, r3
 8002420:	b2db      	uxtb	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <HAL_ADC_ConfigChannel+0x510>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0e9b      	lsrs	r3, r3, #26
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	e011      	b.n	8002460 <HAL_ADC_ConfigChannel+0x534>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800244a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800244c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800244e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e003      	b.n	8002460 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8002458:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	429a      	cmp	r2, r3
 8002462:	d14f      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2200      	movs	r2, #0
 800246a:	2103      	movs	r1, #3
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fa0b 	bl	8001888 <LL_ADC_SetOffsetState>
 8002472:	e047      	b.n	8002504 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	069b      	lsls	r3, r3, #26
 8002484:	429a      	cmp	r2, r3
 8002486:	d107      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002496:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800249e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	069b      	lsls	r3, r3, #26
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d107      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024ba:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	069b      	lsls	r3, r3, #26
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d107      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024de:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	069b      	lsls	r3, r3, #26
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002502:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff facd 	bl	8001aa8 <LL_ADC_IsEnabled>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	f040 8219 	bne.w	8002948 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6819      	ldr	r1, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	461a      	mov	r2, r3
 8002524:	f7ff fa32 	bl	800198c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4aa1      	ldr	r2, [pc, #644]	; (80027b4 <HAL_ADC_ConfigChannel+0x888>)
 800252e:	4293      	cmp	r3, r2
 8002530:	f040 812e 	bne.w	8002790 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10b      	bne.n	800255c <HAL_ADC_ConfigChannel+0x630>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	3301      	adds	r3, #1
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	2b09      	cmp	r3, #9
 8002552:	bf94      	ite	ls
 8002554:	2301      	movls	r3, #1
 8002556:	2300      	movhi	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e019      	b.n	8002590 <HAL_ADC_ConfigChannel+0x664>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800256a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800256e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e003      	b.n	8002580 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8002578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3301      	adds	r3, #1
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	2b09      	cmp	r3, #9
 8002588:	bf94      	ite	ls
 800258a:	2301      	movls	r3, #1
 800258c:	2300      	movhi	r3, #0
 800258e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002590:	2b00      	cmp	r3, #0
 8002592:	d079      	beq.n	8002688 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800259c:	2b00      	cmp	r3, #0
 800259e:	d107      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x684>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0e9b      	lsrs	r3, r3, #26
 80025a6:	3301      	adds	r3, #1
 80025a8:	069b      	lsls	r3, r3, #26
 80025aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ae:	e015      	b.n	80025dc <HAL_ADC_ConfigChannel+0x6b0>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80025be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80025c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80025c8:	2320      	movs	r3, #32
 80025ca:	e003      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80025cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	3301      	adds	r3, #1
 80025d6:	069b      	lsls	r3, r3, #26
 80025d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x6d0>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0e9b      	lsrs	r3, r3, #26
 80025ee:	3301      	adds	r3, #1
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2101      	movs	r1, #1
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	e017      	b.n	800262c <HAL_ADC_ConfigChannel+0x700>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800260a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800260e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002614:	2320      	movs	r3, #32
 8002616:	e003      	b.n	8002620 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	3301      	adds	r3, #1
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	2101      	movs	r1, #1
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	ea42 0103 	orr.w	r1, r2, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x726>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0e9b      	lsrs	r3, r3, #26
 8002642:	3301      	adds	r3, #1
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	051b      	lsls	r3, r3, #20
 8002650:	e018      	b.n	8002684 <HAL_ADC_ConfigChannel+0x758>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800266a:	2320      	movs	r3, #32
 800266c:	e003      	b.n	8002676 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002684:	430b      	orrs	r3, r1
 8002686:	e07e      	b.n	8002786 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002690:	2b00      	cmp	r3, #0
 8002692:	d107      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x778>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0e9b      	lsrs	r3, r3, #26
 800269a:	3301      	adds	r3, #1
 800269c:	069b      	lsls	r3, r3, #26
 800269e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026a2:	e015      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x7a4>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80026bc:	2320      	movs	r3, #32
 80026be:	e003      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80026c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	3301      	adds	r3, #1
 80026ca:	069b      	lsls	r3, r3, #26
 80026cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x7c4>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0e9b      	lsrs	r3, r3, #26
 80026e2:	3301      	adds	r3, #1
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	e017      	b.n	8002720 <HAL_ADC_ConfigChannel+0x7f4>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	61bb      	str	r3, [r7, #24]
  return result;
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e003      	b.n	8002714 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	3301      	adds	r3, #1
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f303 	lsl.w	r3, r1, r3
 8002720:	ea42 0103 	orr.w	r1, r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10d      	bne.n	800274c <HAL_ADC_ConfigChannel+0x820>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0e9b      	lsrs	r3, r3, #26
 8002736:	3301      	adds	r3, #1
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	3b1e      	subs	r3, #30
 8002744:	051b      	lsls	r3, r3, #20
 8002746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800274a:	e01b      	b.n	8002784 <HAL_ADC_ConfigChannel+0x858>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	60fb      	str	r3, [r7, #12]
  return result;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8002764:	2320      	movs	r3, #32
 8002766:	e003      	b.n	8002770 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fab3 f383 	clz	r3, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	3301      	adds	r3, #1
 8002772:	f003 021f 	and.w	r2, r3, #31
 8002776:	4613      	mov	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	3b1e      	subs	r3, #30
 800277e:	051b      	lsls	r3, r3, #20
 8002780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002784:	430b      	orrs	r3, r1
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	6892      	ldr	r2, [r2, #8]
 800278a:	4619      	mov	r1, r3
 800278c:	f7ff f8d2 	bl	8001934 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	f280 80d7 	bge.w	8002948 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <HAL_ADC_ConfigChannel+0x88c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_ADC_ConfigChannel+0x882>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a04      	ldr	r2, [pc, #16]	; (80027bc <HAL_ADC_ConfigChannel+0x890>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d10a      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x898>
 80027ae:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <HAL_ADC_ConfigChannel+0x894>)
 80027b0:	e009      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x89a>
 80027b2:	bf00      	nop
 80027b4:	47ff0000 	.word	0x47ff0000
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40022100 	.word	0x40022100
 80027c0:	40022300 	.word	0x40022300
 80027c4:	4b65      	ldr	r3, [pc, #404]	; (800295c <HAL_ADC_ConfigChannel+0xa30>)
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe ff88 	bl	80016dc <LL_ADC_GetCommonPathInternalCh>
 80027cc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a62      	ldr	r2, [pc, #392]	; (8002960 <HAL_ADC_ConfigChannel+0xa34>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d004      	beq.n	80027e4 <HAL_ADC_ConfigChannel+0x8b8>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a61      	ldr	r2, [pc, #388]	; (8002964 <HAL_ADC_ConfigChannel+0xa38>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d10e      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x8d6>
 80027e4:	485e      	ldr	r0, [pc, #376]	; (8002960 <HAL_ADC_ConfigChannel+0xa34>)
 80027e6:	f7ff f95f 	bl	8001aa8 <LL_ADC_IsEnabled>
 80027ea:	4604      	mov	r4, r0
 80027ec:	485d      	ldr	r0, [pc, #372]	; (8002964 <HAL_ADC_ConfigChannel+0xa38>)
 80027ee:	f7ff f95b 	bl	8001aa8 <LL_ADC_IsEnabled>
 80027f2:	4603      	mov	r3, r0
 80027f4:	4323      	orrs	r3, r4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bf0c      	ite	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	2300      	movne	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	e008      	b.n	8002814 <HAL_ADC_ConfigChannel+0x8e8>
 8002802:	4859      	ldr	r0, [pc, #356]	; (8002968 <HAL_ADC_ConfigChannel+0xa3c>)
 8002804:	f7ff f950 	bl	8001aa8 <LL_ADC_IsEnabled>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	bf0c      	ite	eq
 800280e:	2301      	moveq	r3, #1
 8002810:	2300      	movne	r3, #0
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8084 	beq.w	8002922 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a53      	ldr	r2, [pc, #332]	; (800296c <HAL_ADC_ConfigChannel+0xa40>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d132      	bne.n	800288a <HAL_ADC_ConfigChannel+0x95e>
 8002824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d12c      	bne.n	800288a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a4c      	ldr	r2, [pc, #304]	; (8002968 <HAL_ADC_ConfigChannel+0xa3c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	f040 8086 	bne.w	8002948 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a47      	ldr	r2, [pc, #284]	; (8002960 <HAL_ADC_ConfigChannel+0xa34>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d004      	beq.n	8002850 <HAL_ADC_ConfigChannel+0x924>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a46      	ldr	r2, [pc, #280]	; (8002964 <HAL_ADC_ConfigChannel+0xa38>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d101      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x928>
 8002850:	4a47      	ldr	r2, [pc, #284]	; (8002970 <HAL_ADC_ConfigChannel+0xa44>)
 8002852:	e000      	b.n	8002856 <HAL_ADC_ConfigChannel+0x92a>
 8002854:	4a41      	ldr	r2, [pc, #260]	; (800295c <HAL_ADC_ConfigChannel+0xa30>)
 8002856:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800285a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800285e:	4619      	mov	r1, r3
 8002860:	4610      	mov	r0, r2
 8002862:	f7fe ff28 	bl	80016b6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002866:	4b43      	ldr	r3, [pc, #268]	; (8002974 <HAL_ADC_ConfigChannel+0xa48>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	099b      	lsrs	r3, r3, #6
 800286c:	4a42      	ldr	r2, [pc, #264]	; (8002978 <HAL_ADC_ConfigChannel+0xa4c>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	099b      	lsrs	r3, r3, #6
 8002874:	3301      	adds	r3, #1
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800287a:	e002      	b.n	8002882 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	3b01      	subs	r3, #1
 8002880:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f9      	bne.n	800287c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002888:	e05e      	b.n	8002948 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a3b      	ldr	r2, [pc, #236]	; (800297c <HAL_ADC_ConfigChannel+0xa50>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d120      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x9aa>
 8002894:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d11a      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a30      	ldr	r2, [pc, #192]	; (8002968 <HAL_ADC_ConfigChannel+0xa3c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d14e      	bne.n	8002948 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a2c      	ldr	r2, [pc, #176]	; (8002960 <HAL_ADC_ConfigChannel+0xa34>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d004      	beq.n	80028be <HAL_ADC_ConfigChannel+0x992>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a2a      	ldr	r2, [pc, #168]	; (8002964 <HAL_ADC_ConfigChannel+0xa38>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x996>
 80028be:	4a2c      	ldr	r2, [pc, #176]	; (8002970 <HAL_ADC_ConfigChannel+0xa44>)
 80028c0:	e000      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x998>
 80028c2:	4a26      	ldr	r2, [pc, #152]	; (800295c <HAL_ADC_ConfigChannel+0xa30>)
 80028c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f7fe fef1 	bl	80016b6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028d4:	e038      	b.n	8002948 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a29      	ldr	r2, [pc, #164]	; (8002980 <HAL_ADC_ConfigChannel+0xa54>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d133      	bne.n	8002948 <HAL_ADC_ConfigChannel+0xa1c>
 80028e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d12d      	bne.n	8002948 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1d      	ldr	r2, [pc, #116]	; (8002968 <HAL_ADC_ConfigChannel+0xa3c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d128      	bne.n	8002948 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a19      	ldr	r2, [pc, #100]	; (8002960 <HAL_ADC_ConfigChannel+0xa34>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d004      	beq.n	800290a <HAL_ADC_ConfigChannel+0x9de>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a17      	ldr	r2, [pc, #92]	; (8002964 <HAL_ADC_ConfigChannel+0xa38>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d101      	bne.n	800290e <HAL_ADC_ConfigChannel+0x9e2>
 800290a:	4a19      	ldr	r2, [pc, #100]	; (8002970 <HAL_ADC_ConfigChannel+0xa44>)
 800290c:	e000      	b.n	8002910 <HAL_ADC_ConfigChannel+0x9e4>
 800290e:	4a13      	ldr	r2, [pc, #76]	; (800295c <HAL_ADC_ConfigChannel+0xa30>)
 8002910:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002918:	4619      	mov	r1, r3
 800291a:	4610      	mov	r0, r2
 800291c:	f7fe fecb 	bl	80016b6 <LL_ADC_SetCommonPathInternalCh>
 8002920:	e012      	b.n	8002948 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002926:	f043 0220 	orr.w	r2, r3, #32
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8002934:	e008      	b.n	8002948 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293a:	f043 0220 	orr.w	r2, r3, #32
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002950:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8002954:	4618      	mov	r0, r3
 8002956:	37e4      	adds	r7, #228	; 0xe4
 8002958:	46bd      	mov	sp, r7
 800295a:	bd90      	pop	{r4, r7, pc}
 800295c:	58026300 	.word	0x58026300
 8002960:	40022000 	.word	0x40022000
 8002964:	40022100 	.word	0x40022100
 8002968:	58026000 	.word	0x58026000
 800296c:	c7520000 	.word	0xc7520000
 8002970:	40022300 	.word	0x40022300
 8002974:	24000000 	.word	0x24000000
 8002978:	053e2d63 	.word	0x053e2d63
 800297c:	c3210000 	.word	0xc3210000
 8002980:	cb840000 	.word	0xcb840000

08002984 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a6b      	ldr	r2, [pc, #428]	; (8002b40 <ADC_ConfigureBoostMode+0x1bc>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d004      	beq.n	80029a0 <ADC_ConfigureBoostMode+0x1c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a6a      	ldr	r2, [pc, #424]	; (8002b44 <ADC_ConfigureBoostMode+0x1c0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d109      	bne.n	80029b4 <ADC_ConfigureBoostMode+0x30>
 80029a0:	4b69      	ldr	r3, [pc, #420]	; (8002b48 <ADC_ConfigureBoostMode+0x1c4>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	e008      	b.n	80029c6 <ADC_ConfigureBoostMode+0x42>
 80029b4:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <ADC_ConfigureBoostMode+0x1c8>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf14      	ite	ne
 80029c0:	2301      	movne	r3, #1
 80029c2:	2300      	moveq	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01c      	beq.n	8002a04 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80029ca:	f001 ff83 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 80029ce:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029d8:	d010      	beq.n	80029fc <ADC_ConfigureBoostMode+0x78>
 80029da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029de:	d871      	bhi.n	8002ac4 <ADC_ConfigureBoostMode+0x140>
 80029e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e4:	d002      	beq.n	80029ec <ADC_ConfigureBoostMode+0x68>
 80029e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029ea:	d16b      	bne.n	8002ac4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	0c1b      	lsrs	r3, r3, #16
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f8:	60fb      	str	r3, [r7, #12]
        break;
 80029fa:	e066      	b.n	8002aca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	60fb      	str	r3, [r7, #12]
        break;
 8002a02:	e062      	b.n	8002aca <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002a04:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002a08:	f002 feba 	bl	8005780 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a0c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002a16:	d051      	beq.n	8002abc <ADC_ConfigureBoostMode+0x138>
 8002a18:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002a1c:	d854      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x144>
 8002a1e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002a22:	d047      	beq.n	8002ab4 <ADC_ConfigureBoostMode+0x130>
 8002a24:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002a28:	d84e      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x144>
 8002a2a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a2e:	d03d      	beq.n	8002aac <ADC_ConfigureBoostMode+0x128>
 8002a30:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a34:	d848      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x144>
 8002a36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a3a:	d033      	beq.n	8002aa4 <ADC_ConfigureBoostMode+0x120>
 8002a3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a40:	d842      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x144>
 8002a42:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a46:	d029      	beq.n	8002a9c <ADC_ConfigureBoostMode+0x118>
 8002a48:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a4c:	d83c      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x144>
 8002a4e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002a52:	d01a      	beq.n	8002a8a <ADC_ConfigureBoostMode+0x106>
 8002a54:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002a58:	d836      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x144>
 8002a5a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a5e:	d014      	beq.n	8002a8a <ADC_ConfigureBoostMode+0x106>
 8002a60:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a64:	d830      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x144>
 8002a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a6a:	d00e      	beq.n	8002a8a <ADC_ConfigureBoostMode+0x106>
 8002a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a70:	d82a      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x144>
 8002a72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a76:	d008      	beq.n	8002a8a <ADC_ConfigureBoostMode+0x106>
 8002a78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a7c:	d824      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x144>
 8002a7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a82:	d002      	beq.n	8002a8a <ADC_ConfigureBoostMode+0x106>
 8002a84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a88:	d11e      	bne.n	8002ac8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	0c9b      	lsrs	r3, r3, #18
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	60fb      	str	r3, [r7, #12]
        break;
 8002a9a:	e016      	b.n	8002aca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	60fb      	str	r3, [r7, #12]
        break;
 8002aa2:	e012      	b.n	8002aca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	60fb      	str	r3, [r7, #12]
        break;
 8002aaa:	e00e      	b.n	8002aca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	099b      	lsrs	r3, r3, #6
 8002ab0:	60fb      	str	r3, [r7, #12]
        break;
 8002ab2:	e00a      	b.n	8002aca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	09db      	lsrs	r3, r3, #7
 8002ab8:	60fb      	str	r3, [r7, #12]
        break;
 8002aba:	e006      	b.n	8002aca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	0a1b      	lsrs	r3, r3, #8
 8002ac0:	60fb      	str	r3, [r7, #12]
        break;
 8002ac2:	e002      	b.n	8002aca <ADC_ConfigureBoostMode+0x146>
        break;
 8002ac4:	bf00      	nop
 8002ac6:	e000      	b.n	8002aca <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002ac8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	085b      	lsrs	r3, r3, #1
 8002ace:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <ADC_ConfigureBoostMode+0x1cc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d808      	bhi.n	8002aea <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ae6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002ae8:	e025      	b.n	8002b36 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a19      	ldr	r2, [pc, #100]	; (8002b54 <ADC_ConfigureBoostMode+0x1d0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d80a      	bhi.n	8002b08 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b04:	609a      	str	r2, [r3, #8]
}
 8002b06:	e016      	b.n	8002b36 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4a13      	ldr	r2, [pc, #76]	; (8002b58 <ADC_ConfigureBoostMode+0x1d4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d80a      	bhi.n	8002b26 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b22:	609a      	str	r2, [r3, #8]
}
 8002b24:	e007      	b.n	8002b36 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002b34:	609a      	str	r2, [r3, #8]
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40022000 	.word	0x40022000
 8002b44:	40022100 	.word	0x40022100
 8002b48:	40022300 	.word	0x40022300
 8002b4c:	58026300 	.word	0x58026300
 8002b50:	005f5e10 	.word	0x005f5e10
 8002b54:	00bebc20 	.word	0x00bebc20
 8002b58:	017d7840 	.word	0x017d7840

08002b5c <LL_ADC_IsEnabled>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <LL_ADC_IsEnabled+0x18>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <LL_ADC_IsEnabled+0x1a>
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d101      	bne.n	8002b9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b0a3      	sub	sp, #140	; 0x8c
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0c1      	b.n	8002d4a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a5e      	ldr	r2, [pc, #376]	; (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d102      	bne.n	8002be6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002be0:	4b5d      	ldr	r3, [pc, #372]	; (8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e001      	b.n	8002bea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10b      	bne.n	8002c08 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0a0      	b.n	8002d4a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ffb9 	bl	8002b82 <LL_ADC_REG_IsConversionOngoing>
 8002c10:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ffb2 	bl	8002b82 <LL_ADC_REG_IsConversionOngoing>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f040 8081 	bne.w	8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d17c      	bne.n	8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a48      	ldr	r2, [pc, #288]	; (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d004      	beq.n	8002c42 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a46      	ldr	r2, [pc, #280]	; (8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d101      	bne.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8002c42:	4b46      	ldr	r3, [pc, #280]	; (8002d5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002c44:	e000      	b.n	8002c48 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002c46:	4b46      	ldr	r3, [pc, #280]	; (8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002c48:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d039      	beq.n	8002cc6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c62:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a3a      	ldr	r2, [pc, #232]	; (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d004      	beq.n	8002c78 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a39      	ldr	r2, [pc, #228]	; (8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d10e      	bne.n	8002c96 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8002c78:	4836      	ldr	r0, [pc, #216]	; (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c7a:	f7ff ff6f 	bl	8002b5c <LL_ADC_IsEnabled>
 8002c7e:	4604      	mov	r4, r0
 8002c80:	4835      	ldr	r0, [pc, #212]	; (8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c82:	f7ff ff6b 	bl	8002b5c <LL_ADC_IsEnabled>
 8002c86:	4603      	mov	r3, r0
 8002c88:	4323      	orrs	r3, r4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bf0c      	ite	eq
 8002c8e:	2301      	moveq	r3, #1
 8002c90:	2300      	movne	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	e008      	b.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002c96:	4833      	ldr	r0, [pc, #204]	; (8002d64 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002c98:	f7ff ff60 	bl	8002b5c <LL_ADC_IsEnabled>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	bf0c      	ite	eq
 8002ca2:	2301      	moveq	r3, #1
 8002ca4:	2300      	movne	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d047      	beq.n	8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002cac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	6811      	ldr	r1, [r2, #0]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	6892      	ldr	r2, [r2, #8]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cc2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cc4:	e03a      	b.n	8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002cc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cd0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1f      	ldr	r2, [pc, #124]	; (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d10e      	bne.n	8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8002ce6:	481b      	ldr	r0, [pc, #108]	; (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002ce8:	f7ff ff38 	bl	8002b5c <LL_ADC_IsEnabled>
 8002cec:	4604      	mov	r4, r0
 8002cee:	481a      	ldr	r0, [pc, #104]	; (8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002cf0:	f7ff ff34 	bl	8002b5c <LL_ADC_IsEnabled>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4323      	orrs	r3, r4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2301      	moveq	r3, #1
 8002cfe:	2300      	movne	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	e008      	b.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8002d04:	4817      	ldr	r0, [pc, #92]	; (8002d64 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002d06:	f7ff ff29 	bl	8002b5c <LL_ADC_IsEnabled>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d010      	beq.n	8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002d24:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d26:	e009      	b.n	8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2c:	f043 0220 	orr.w	r2, r3, #32
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002d3a:	e000      	b.n	8002d3e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002d46:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	378c      	adds	r7, #140	; 0x8c
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd90      	pop	{r4, r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40022000 	.word	0x40022000
 8002d58:	40022100 	.word	0x40022100
 8002d5c:	40022300 	.word	0x40022300
 8002d60:	58026300 	.word	0x58026300
 8002d64:	58026000 	.word	0x58026000
 8002d68:	fffff0e0 	.word	0xfffff0e0

08002d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <__NVIC_SetPriorityGrouping+0x40>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d9a:	4a04      	ldr	r2, [pc, #16]	; (8002dac <__NVIC_SetPriorityGrouping+0x40>)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	60d3      	str	r3, [r2, #12]
}
 8002da0:	bf00      	nop
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	e000ed00 	.word	0xe000ed00
 8002db0:	05fa0000 	.word	0x05fa0000

08002db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <__NVIC_GetPriorityGrouping+0x18>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	0a1b      	lsrs	r3, r3, #8
 8002dbe:	f003 0307 	and.w	r3, r3, #7
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	6039      	str	r1, [r7, #0]
 8002dda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ddc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	db0a      	blt.n	8002dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	490c      	ldr	r1, [pc, #48]	; (8002e1c <__NVIC_SetPriority+0x4c>)
 8002dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dee:	0112      	lsls	r2, r2, #4
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	440b      	add	r3, r1
 8002df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df8:	e00a      	b.n	8002e10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	4908      	ldr	r1, [pc, #32]	; (8002e20 <__NVIC_SetPriority+0x50>)
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	3b04      	subs	r3, #4
 8002e08:	0112      	lsls	r2, r2, #4
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	761a      	strb	r2, [r3, #24]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000e100 	.word	0xe000e100
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	; 0x24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f1c3 0307 	rsb	r3, r3, #7
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	bf28      	it	cs
 8002e42:	2304      	movcs	r3, #4
 8002e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	2b06      	cmp	r3, #6
 8002e4c:	d902      	bls.n	8002e54 <NVIC_EncodePriority+0x30>
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3b03      	subs	r3, #3
 8002e52:	e000      	b.n	8002e56 <NVIC_EncodePriority+0x32>
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e58:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43da      	mvns	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	401a      	ands	r2, r3
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	43d9      	mvns	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e7c:	4313      	orrs	r3, r2
         );
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3724      	adds	r7, #36	; 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e9c:	d301      	bcc.n	8002ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e00f      	b.n	8002ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <SysTick_Config+0x40>)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eaa:	210f      	movs	r1, #15
 8002eac:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb0:	f7ff ff8e 	bl	8002dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <SysTick_Config+0x40>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eba:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <SysTick_Config+0x40>)
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	e000e010 	.word	0xe000e010

08002ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ff47 	bl	8002d6c <__NVIC_SetPriorityGrouping>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef4:	f7ff ff5e 	bl	8002db4 <__NVIC_GetPriorityGrouping>
 8002ef8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	6978      	ldr	r0, [r7, #20]
 8002f00:	f7ff ff90 	bl	8002e24 <NVIC_EncodePriority>
 8002f04:	4602      	mov	r2, r0
 8002f06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ff5f 	bl	8002dd0 <__NVIC_SetPriority>
}
 8002f12:	bf00      	nop
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff ffb2 	bl	8002e8c <SysTick_Config>
 8002f28:	4603      	mov	r3, r0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e0c6      	b.n	80030d4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fd fffc 	bl	8000f4c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2223      	movs	r2, #35	; 0x23
 8002f58:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5a:	4b60      	ldr	r3, [pc, #384]	; (80030dc <HAL_ETH_Init+0x1a8>)
 8002f5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f60:	4a5e      	ldr	r2, [pc, #376]	; (80030dc <HAL_ETH_Init+0x1a8>)
 8002f62:	f043 0302 	orr.w	r3, r3, #2
 8002f66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f6a:	4b5c      	ldr	r3, [pc, #368]	; (80030dc <HAL_ETH_Init+0x1a8>)
 8002f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	7a1b      	ldrb	r3, [r3, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d103      	bne.n	8002f88 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fe fb71 	bl	8001668 <HAL_SYSCFG_ETHInterfaceSelect>
 8002f86:	e003      	b.n	8002f90 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002f88:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002f8c:	f7fe fb6c 	bl	8001668 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fa8:	f7fe fb2e 	bl	8001608 <HAL_GetTick>
 8002fac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002fae:	e00f      	b.n	8002fd0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002fb0:	f7fe fb2a 	bl	8001608 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fbe:	d907      	bls.n	8002fd0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2204      	movs	r2, #4
 8002fc4:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	22e0      	movs	r2, #224	; 0xe0
 8002fca:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e081      	b.n	80030d4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1e6      	bne.n	8002fb0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fac0 	bl	8003568 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002fe8:	f001 fc74 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 8002fec:	4603      	mov	r3, r0
 8002fee:	4a3c      	ldr	r2, [pc, #240]	; (80030e0 <HAL_ETH_Init+0x1ac>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	0c9a      	lsrs	r2, r3, #18
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3a01      	subs	r2, #1
 8002ffc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fa13 	bl	800342c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800301c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003020:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	22e0      	movs	r2, #224	; 0xe0
 8003038:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e04a      	b.n	80030d4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	f241 1308 	movw	r3, #4360	; 0x1108
 8003046:	4413      	add	r3, r2
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <HAL_ETH_Init+0x1b0>)
 800304c:	4013      	ands	r3, r2
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6952      	ldr	r2, [r2, #20]
 8003052:	0052      	lsls	r2, r2, #1
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	6809      	ldr	r1, [r1, #0]
 8003058:	431a      	orrs	r2, r3
 800305a:	f241 1308 	movw	r3, #4360	; 0x1108
 800305e:	440b      	add	r3, r1
 8003060:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fad8 	bl	8003618 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fb1c 	bl	80036a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	3305      	adds	r3, #5
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	021a      	lsls	r2, r3, #8
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	3304      	adds	r3, #4
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	4619      	mov	r1, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	3303      	adds	r3, #3
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	061a      	lsls	r2, r3, #24
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	3302      	adds	r3, #2
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	041b      	lsls	r3, r3, #16
 80030a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	3301      	adds	r3, #1
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80030ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80030ba:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80030bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2210      	movs	r2, #16
 80030ca:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2210      	movs	r2, #16
 80030d0:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	58024400 	.word	0x58024400
 80030e0:	431bde83 	.word	0x431bde83
 80030e4:	ffff8001 	.word	0xffff8001

080030e8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80030fa:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	791b      	ldrb	r3, [r3, #4]
 8003100:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003102:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	7b1b      	ldrb	r3, [r3, #12]
 8003108:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800310a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	7b5b      	ldrb	r3, [r3, #13]
 8003110:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003112:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	7b9b      	ldrb	r3, [r3, #14]
 8003118:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800311a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	7bdb      	ldrb	r3, [r3, #15]
 8003120:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003122:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	7c12      	ldrb	r2, [r2, #16]
 8003128:	2a00      	cmp	r2, #0
 800312a:	d102      	bne.n	8003132 <ETH_SetMACConfig+0x4a>
 800312c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003130:	e000      	b.n	8003134 <ETH_SetMACConfig+0x4c>
 8003132:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003134:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	7c52      	ldrb	r2, [r2, #17]
 800313a:	2a00      	cmp	r2, #0
 800313c:	d102      	bne.n	8003144 <ETH_SetMACConfig+0x5c>
 800313e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003142:	e000      	b.n	8003146 <ETH_SetMACConfig+0x5e>
 8003144:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003146:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	7c9b      	ldrb	r3, [r3, #18]
 800314c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800314e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003154:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800315a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	7f1b      	ldrb	r3, [r3, #28]
 8003160:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003162:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	7f5b      	ldrb	r3, [r3, #29]
 8003168:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800316a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	7f92      	ldrb	r2, [r2, #30]
 8003170:	2a00      	cmp	r2, #0
 8003172:	d102      	bne.n	800317a <ETH_SetMACConfig+0x92>
 8003174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003178:	e000      	b.n	800317c <ETH_SetMACConfig+0x94>
 800317a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800317c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	7fdb      	ldrb	r3, [r3, #31]
 8003182:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003184:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	f892 2020 	ldrb.w	r2, [r2, #32]
 800318c:	2a00      	cmp	r2, #0
 800318e:	d102      	bne.n	8003196 <ETH_SetMACConfig+0xae>
 8003190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003194:	e000      	b.n	8003198 <ETH_SetMACConfig+0xb0>
 8003196:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003198:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800319e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031a6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80031a8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4b56      	ldr	r3, [pc, #344]	; (8003314 <ETH_SetMACConfig+0x22c>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	68f9      	ldr	r1, [r7, #12]
 80031c2:	430b      	orrs	r3, r1
 80031c4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031d2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80031d4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031dc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80031de:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80031e6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80031e8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80031f0:	2a00      	cmp	r2, #0
 80031f2:	d102      	bne.n	80031fa <ETH_SetMACConfig+0x112>
 80031f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031f8:	e000      	b.n	80031fc <ETH_SetMACConfig+0x114>
 80031fa:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80031fc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4b42      	ldr	r3, [pc, #264]	; (8003318 <ETH_SetMACConfig+0x230>)
 800320e:	4013      	ands	r3, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	68f9      	ldr	r1, [r7, #12]
 8003216:	430b      	orrs	r3, r1
 8003218:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003220:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	4b3a      	ldr	r3, [pc, #232]	; (800331c <ETH_SetMACConfig+0x234>)
 8003232:	4013      	ands	r3, r2
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	68f9      	ldr	r1, [r7, #12]
 800323a:	430b      	orrs	r3, r1
 800323c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003244:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800324a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003252:	2a00      	cmp	r2, #0
 8003254:	d101      	bne.n	800325a <ETH_SetMACConfig+0x172>
 8003256:	2280      	movs	r2, #128	; 0x80
 8003258:	e000      	b.n	800325c <ETH_SetMACConfig+0x174>
 800325a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800325c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003262:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003264:	4313      	orrs	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800326e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003272:	4013      	ands	r3, r2
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	68f9      	ldr	r1, [r7, #12]
 800327a:	430b      	orrs	r3, r1
 800327c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003284:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800328c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	f023 0103 	bic.w	r1, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80032b2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80032ce:	2a00      	cmp	r2, #0
 80032d0:	d101      	bne.n	80032d6 <ETH_SetMACConfig+0x1ee>
 80032d2:	2240      	movs	r2, #64	; 0x40
 80032d4:	e000      	b.n	80032d8 <ETH_SetMACConfig+0x1f0>
 80032d6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80032d8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80032e0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80032e2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80032ea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80032f8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	430a      	orrs	r2, r1
 8003304:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	00048083 	.word	0x00048083
 8003318:	c0f88000 	.word	0xc0f88000
 800331c:	fffffef0 	.word	0xfffffef0

08003320 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b38      	ldr	r3, [pc, #224]	; (8003418 <ETH_SetDMAConfig+0xf8>)
 8003336:	4013      	ands	r3, r2
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	6809      	ldr	r1, [r1, #0]
 8003340:	431a      	orrs	r2, r3
 8003342:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003346:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	791b      	ldrb	r3, [r3, #4]
 800334c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003352:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	7b1b      	ldrb	r3, [r3, #12]
 8003358:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	f241 0304 	movw	r3, #4100	; 0x1004
 8003366:	4413      	add	r3, r2
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4b2c      	ldr	r3, [pc, #176]	; (800341c <ETH_SetDMAConfig+0xfc>)
 800336c:	4013      	ands	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6811      	ldr	r1, [r2, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	431a      	orrs	r2, r3
 8003376:	f241 0304 	movw	r3, #4100	; 0x1004
 800337a:	440b      	add	r3, r1
 800337c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	7b5b      	ldrb	r3, [r3, #13]
 8003382:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4b22      	ldr	r3, [pc, #136]	; (8003420 <ETH_SetDMAConfig+0x100>)
 8003398:	4013      	ands	r3, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6811      	ldr	r1, [r2, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80033a6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	7d1b      	ldrb	r3, [r3, #20]
 80033b0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80033b2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	7f5b      	ldrb	r3, [r3, #29]
 80033b8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	f241 1304 	movw	r3, #4356	; 0x1104
 80033c6:	4413      	add	r3, r2
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b16      	ldr	r3, [pc, #88]	; (8003424 <ETH_SetDMAConfig+0x104>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6811      	ldr	r1, [r2, #0]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	f241 1304 	movw	r3, #4356	; 0x1104
 80033da:	440b      	add	r3, r1
 80033dc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	7f1b      	ldrb	r3, [r3, #28]
 80033e2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	f241 1308 	movw	r3, #4360	; 0x1108
 80033f4:	4413      	add	r3, r2
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <ETH_SetDMAConfig+0x108>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6811      	ldr	r1, [r2, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	431a      	orrs	r2, r3
 8003404:	f241 1308 	movw	r3, #4360	; 0x1108
 8003408:	440b      	add	r3, r1
 800340a:	601a      	str	r2, [r3, #0]
}
 800340c:	bf00      	nop
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	ffff87fd 	.word	0xffff87fd
 800341c:	ffff2ffe 	.word	0xffff2ffe
 8003420:	fffec000 	.word	0xfffec000
 8003424:	ffc0efef 	.word	0xffc0efef
 8003428:	7fc0ffff 	.word	0x7fc0ffff

0800342c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b0a4      	sub	sp, #144	; 0x90
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003434:	2301      	movs	r3, #1
 8003436:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800343a:	2300      	movs	r3, #0
 800343c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800343e:	2300      	movs	r3, #0
 8003440:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003444:	2300      	movs	r3, #0
 8003446:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003450:	2301      	movs	r3, #1
 8003452:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800345c:	2300      	movs	r3, #0
 800345e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003462:	2301      	movs	r3, #1
 8003464:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800346c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800346e:	2300      	movs	r3, #0
 8003470:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003474:	2300      	movs	r3, #0
 8003476:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003478:	2300      	movs	r3, #0
 800347a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800347e:	2300      	movs	r3, #0
 8003480:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003484:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003488:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800348a:	2300      	movs	r3, #0
 800348c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003490:	2300      	movs	r3, #0
 8003492:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003494:	2301      	movs	r3, #1
 8003496:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800349a:	2300      	movs	r3, #0
 800349c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80034a6:	2300      	movs	r3, #0
 80034a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80034ae:	2300      	movs	r3, #0
 80034b0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80034c4:	2320      	movs	r3, #32
 80034c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80034d6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80034dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034e0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80034e8:	2302      	movs	r3, #2
 80034ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003500:	2301      	movs	r3, #1
 8003502:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003506:	2300      	movs	r3, #0
 8003508:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003510:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff fde6 	bl	80030e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800351c:	2301      	movs	r3, #1
 800351e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003520:	2301      	movs	r3, #1
 8003522:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003524:	2300      	movs	r3, #0
 8003526:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003528:	2300      	movs	r3, #0
 800352a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800352e:	2300      	movs	r3, #0
 8003530:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003532:	2300      	movs	r3, #0
 8003534:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003536:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800353a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800353c:	2300      	movs	r3, #0
 800353e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003540:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003544:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003546:	2300      	movs	r3, #0
 8003548:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800354c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003552:	f107 0308 	add.w	r3, r7, #8
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff fee1 	bl	8003320 <ETH_SetDMAConfig>
}
 800355e:	bf00      	nop
 8003560:	3790      	adds	r7, #144	; 0x90
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003578:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003580:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003582:	f001 f9a7 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 8003586:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4a1e      	ldr	r2, [pc, #120]	; (8003604 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d908      	bls.n	80035a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4a1d      	ldr	r2, [pc, #116]	; (8003608 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d804      	bhi.n	80035a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e027      	b.n	80035f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4a18      	ldr	r2, [pc, #96]	; (8003608 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d908      	bls.n	80035bc <ETH_MAC_MDIO_ClkConfig+0x54>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4a17      	ldr	r2, [pc, #92]	; (800360c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d204      	bcs.n	80035bc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	e01a      	b.n	80035f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4a13      	ldr	r2, [pc, #76]	; (800360c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d303      	bcc.n	80035cc <ETH_MAC_MDIO_ClkConfig+0x64>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4a12      	ldr	r2, [pc, #72]	; (8003610 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d911      	bls.n	80035f0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4a10      	ldr	r2, [pc, #64]	; (8003610 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d908      	bls.n	80035e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4a0f      	ldr	r2, [pc, #60]	; (8003614 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d804      	bhi.n	80035e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	e005      	b.n	80035f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	e000      	b.n	80035f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80035f0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	01312cff 	.word	0x01312cff
 8003608:	02160ebf 	.word	0x02160ebf
 800360c:	03938700 	.word	0x03938700
 8003610:	05f5e0ff 	.word	0x05f5e0ff
 8003614:	08f0d17f 	.word	0x08f0d17f

08003618 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	e01d      	b.n	8003662 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68d9      	ldr	r1, [r3, #12]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2200      	movs	r2, #0
 8003642:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2200      	movs	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2200      	movs	r2, #0
 800364e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	3206      	adds	r2, #6
 8003658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3301      	adds	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d9de      	bls.n	8003626 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	f241 132c 	movw	r3, #4396	; 0x112c
 8003676:	4413      	add	r3, r2
 8003678:	2203      	movs	r2, #3
 800367a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68d9      	ldr	r1, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	f241 1314 	movw	r3, #4372	; 0x1114
 8003688:	4413      	add	r3, r2
 800368a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003698:	601a      	str	r2, [r3, #0]
}
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b085      	sub	sp, #20
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	e024      	b.n	80036fe <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6919      	ldr	r1, [r3, #16]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	440b      	add	r3, r1
 80036c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2200      	movs	r2, #0
 80036d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2200      	movs	r2, #0
 80036d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2200      	movs	r2, #0
 80036dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2200      	movs	r2, #0
 80036e2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2200      	movs	r2, #0
 80036e8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	3310      	adds	r3, #16
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3301      	adds	r3, #1
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b03      	cmp	r3, #3
 8003702:	d9d7      	bls.n	80036b4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	f241 1330 	movw	r3, #4400	; 0x1130
 800372a:	4413      	add	r3, r2
 800372c:	2203      	movs	r2, #3
 800372e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6919      	ldr	r1, [r3, #16]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	f241 131c 	movw	r3, #4380	; 0x111c
 800373c:	4413      	add	r3, r2
 800373e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	f241 1328 	movw	r3, #4392	; 0x1128
 8003750:	4413      	add	r3, r2
 8003752:	6019      	str	r1, [r3, #0]
}
 8003754:	bf00      	nop
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003760:	b480      	push	{r7}
 8003762:	b089      	sub	sp, #36	; 0x24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800376e:	4b86      	ldr	r3, [pc, #536]	; (8003988 <HAL_GPIO_Init+0x228>)
 8003770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003772:	e18c      	b.n	8003a8e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	2101      	movs	r1, #1
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 817e 	beq.w	8003a88 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d00b      	beq.n	80037ac <HAL_GPIO_Init+0x4c>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d007      	beq.n	80037ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037a0:	2b11      	cmp	r3, #17
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b12      	cmp	r3, #18
 80037aa:	d130      	bne.n	800380e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	2203      	movs	r2, #3
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037e2:	2201      	movs	r2, #1
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43db      	mvns	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	091b      	lsrs	r3, r3, #4
 80037f8:	f003 0201 	and.w	r2, r3, #1
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4313      	orrs	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	2203      	movs	r2, #3
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d003      	beq.n	800384e <HAL_GPIO_Init+0xee>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b12      	cmp	r3, #18
 800384c:	d123      	bne.n	8003896 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	08da      	lsrs	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3208      	adds	r2, #8
 8003856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	220f      	movs	r2, #15
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	08da      	lsrs	r2, r3, #3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3208      	adds	r2, #8
 8003890:	69b9      	ldr	r1, [r7, #24]
 8003892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	2203      	movs	r2, #3
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0203 	and.w	r2, r3, #3
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 80d8 	beq.w	8003a88 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d8:	4b2c      	ldr	r3, [pc, #176]	; (800398c <HAL_GPIO_Init+0x22c>)
 80038da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038de:	4a2b      	ldr	r2, [pc, #172]	; (800398c <HAL_GPIO_Init+0x22c>)
 80038e0:	f043 0302 	orr.w	r3, r3, #2
 80038e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80038e8:	4b28      	ldr	r3, [pc, #160]	; (800398c <HAL_GPIO_Init+0x22c>)
 80038ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038f6:	4a26      	ldr	r2, [pc, #152]	; (8003990 <HAL_GPIO_Init+0x230>)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	089b      	lsrs	r3, r3, #2
 80038fc:	3302      	adds	r3, #2
 80038fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	220f      	movs	r2, #15
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4013      	ands	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <HAL_GPIO_Init+0x234>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d04a      	beq.n	80039b8 <HAL_GPIO_Init+0x258>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a1c      	ldr	r2, [pc, #112]	; (8003998 <HAL_GPIO_Init+0x238>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d02b      	beq.n	8003982 <HAL_GPIO_Init+0x222>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a1b      	ldr	r2, [pc, #108]	; (800399c <HAL_GPIO_Init+0x23c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d025      	beq.n	800397e <HAL_GPIO_Init+0x21e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a1a      	ldr	r2, [pc, #104]	; (80039a0 <HAL_GPIO_Init+0x240>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d01f      	beq.n	800397a <HAL_GPIO_Init+0x21a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <HAL_GPIO_Init+0x244>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d019      	beq.n	8003976 <HAL_GPIO_Init+0x216>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <HAL_GPIO_Init+0x248>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d013      	beq.n	8003972 <HAL_GPIO_Init+0x212>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a17      	ldr	r2, [pc, #92]	; (80039ac <HAL_GPIO_Init+0x24c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00d      	beq.n	800396e <HAL_GPIO_Init+0x20e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a16      	ldr	r2, [pc, #88]	; (80039b0 <HAL_GPIO_Init+0x250>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d007      	beq.n	800396a <HAL_GPIO_Init+0x20a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a15      	ldr	r2, [pc, #84]	; (80039b4 <HAL_GPIO_Init+0x254>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d101      	bne.n	8003966 <HAL_GPIO_Init+0x206>
 8003962:	2309      	movs	r3, #9
 8003964:	e029      	b.n	80039ba <HAL_GPIO_Init+0x25a>
 8003966:	230a      	movs	r3, #10
 8003968:	e027      	b.n	80039ba <HAL_GPIO_Init+0x25a>
 800396a:	2307      	movs	r3, #7
 800396c:	e025      	b.n	80039ba <HAL_GPIO_Init+0x25a>
 800396e:	2306      	movs	r3, #6
 8003970:	e023      	b.n	80039ba <HAL_GPIO_Init+0x25a>
 8003972:	2305      	movs	r3, #5
 8003974:	e021      	b.n	80039ba <HAL_GPIO_Init+0x25a>
 8003976:	2304      	movs	r3, #4
 8003978:	e01f      	b.n	80039ba <HAL_GPIO_Init+0x25a>
 800397a:	2303      	movs	r3, #3
 800397c:	e01d      	b.n	80039ba <HAL_GPIO_Init+0x25a>
 800397e:	2302      	movs	r3, #2
 8003980:	e01b      	b.n	80039ba <HAL_GPIO_Init+0x25a>
 8003982:	2301      	movs	r3, #1
 8003984:	e019      	b.n	80039ba <HAL_GPIO_Init+0x25a>
 8003986:	bf00      	nop
 8003988:	58000080 	.word	0x58000080
 800398c:	58024400 	.word	0x58024400
 8003990:	58000400 	.word	0x58000400
 8003994:	58020000 	.word	0x58020000
 8003998:	58020400 	.word	0x58020400
 800399c:	58020800 	.word	0x58020800
 80039a0:	58020c00 	.word	0x58020c00
 80039a4:	58021000 	.word	0x58021000
 80039a8:	58021400 	.word	0x58021400
 80039ac:	58021800 	.word	0x58021800
 80039b0:	58021c00 	.word	0x58021c00
 80039b4:	58022400 	.word	0x58022400
 80039b8:	2300      	movs	r3, #0
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	f002 0203 	and.w	r2, r2, #3
 80039c0:	0092      	lsls	r2, r2, #2
 80039c2:	4093      	lsls	r3, r2
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039ca:	4938      	ldr	r1, [pc, #224]	; (8003aac <HAL_GPIO_Init+0x34c>)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	3302      	adds	r3, #2
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f47f ae6b 	bne.w	8003774 <HAL_GPIO_Init+0x14>
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	3724      	adds	r7, #36	; 0x24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	58000400 	.word	0x58000400

08003ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	807b      	strh	r3, [r7, #2]
 8003abc:	4613      	mov	r3, r2
 8003abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ac0:	787b      	ldrb	r3, [r7, #1]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ac6:	887a      	ldrh	r2, [r7, #2]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003acc:	e003      	b.n	8003ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ace:	887b      	ldrh	r3, [r7, #2]
 8003ad0:	041a      	lsls	r2, r3, #16
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	619a      	str	r2, [r3, #24]
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003aec:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <HAL_PWREx_ConfigSupply+0x70>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d00a      	beq.n	8003b0e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003af8:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <HAL_PWREx_ConfigSupply+0x70>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d001      	beq.n	8003b0a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e01f      	b.n	8003b4a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e01d      	b.n	8003b4a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003b0e:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <HAL_PWREx_ConfigSupply+0x70>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f023 0207 	bic.w	r2, r3, #7
 8003b16:	490f      	ldr	r1, [pc, #60]	; (8003b54 <HAL_PWREx_ConfigSupply+0x70>)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003b1e:	f7fd fd73 	bl	8001608 <HAL_GetTick>
 8003b22:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b24:	e009      	b.n	8003b3a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b26:	f7fd fd6f 	bl	8001608 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b34:	d901      	bls.n	8003b3a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e007      	b.n	8003b4a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_PWREx_ConfigSupply+0x70>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b46:	d1ee      	bne.n	8003b26 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	58024800 	.word	0x58024800

08003b58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08c      	sub	sp, #48	; 0x30
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e37a      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8087 	beq.w	8003c86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b78:	4ba0      	ldr	r3, [pc, #640]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b82:	4b9e      	ldr	r3, [pc, #632]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d007      	beq.n	8003b9e <HAL_RCC_OscConfig+0x46>
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	2b18      	cmp	r3, #24
 8003b92:	d110      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x5e>
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d10b      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9e:	4b97      	ldr	r3, [pc, #604]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d06c      	beq.n	8003c84 <HAL_RCC_OscConfig+0x12c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d168      	bne.n	8003c84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e354      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbe:	d106      	bne.n	8003bce <HAL_RCC_OscConfig+0x76>
 8003bc0:	4b8e      	ldr	r3, [pc, #568]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a8d      	ldr	r2, [pc, #564]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	e02e      	b.n	8003c2c <HAL_RCC_OscConfig+0xd4>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x98>
 8003bd6:	4b89      	ldr	r3, [pc, #548]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a88      	ldr	r2, [pc, #544]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	4b86      	ldr	r3, [pc, #536]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a85      	ldr	r2, [pc, #532]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e01d      	b.n	8003c2c <HAL_RCC_OscConfig+0xd4>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0xbc>
 8003bfa:	4b80      	ldr	r3, [pc, #512]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a7f      	ldr	r2, [pc, #508]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b7d      	ldr	r3, [pc, #500]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a7c      	ldr	r2, [pc, #496]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0xd4>
 8003c14:	4b79      	ldr	r3, [pc, #484]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a78      	ldr	r2, [pc, #480]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b76      	ldr	r3, [pc, #472]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a75      	ldr	r2, [pc, #468]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fd fce8 	bl	8001608 <HAL_GetTick>
 8003c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fd fce4 	bl	8001608 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e308      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c4e:	4b6b      	ldr	r3, [pc, #428]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0xe4>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fcd4 	bl	8001608 <HAL_GetTick>
 8003c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fd fcd0 	bl	8001608 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e2f4      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c76:	4b61      	ldr	r3, [pc, #388]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x10c>
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d06d      	beq.n	8003d6e <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c92:	4b5a      	ldr	r3, [pc, #360]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c9a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c9c:	4b57      	ldr	r3, [pc, #348]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d007      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x160>
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	2b18      	cmp	r3, #24
 8003cac:	d11b      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x18e>
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d116      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb8:	4b50      	ldr	r3, [pc, #320]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x178>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e2c7      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd0:	4b4a      	ldr	r3, [pc, #296]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	061b      	lsls	r3, r3, #24
 8003cde:	4947      	ldr	r1, [pc, #284]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ce4:	e043      	b.n	8003d6e <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d026      	beq.n	8003d3c <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cee:	4b43      	ldr	r3, [pc, #268]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 0219 	bic.w	r2, r3, #25
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	4940      	ldr	r1, [pc, #256]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fd fc82 	bl	8001608 <HAL_GetTick>
 8003d04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d08:	f7fd fc7e 	bl	8001608 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e2a2      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d1a:	4b38      	ldr	r3, [pc, #224]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d26:	4b35      	ldr	r3, [pc, #212]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	061b      	lsls	r3, r3, #24
 8003d34:	4931      	ldr	r1, [pc, #196]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	604b      	str	r3, [r1, #4]
 8003d3a:	e018      	b.n	8003d6e <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3c:	4b2f      	ldr	r3, [pc, #188]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2e      	ldr	r2, [pc, #184]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fd fc5e 	bl	8001608 <HAL_GetTick>
 8003d4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d50:	f7fd fc5a 	bl	8001608 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e27e      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d62:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d06c      	beq.n	8003e54 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d7a:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d84:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d007      	beq.n	8003da0 <HAL_RCC_OscConfig+0x248>
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2b18      	cmp	r3, #24
 8003d94:	d11b      	bne.n	8003dce <HAL_RCC_OscConfig+0x276>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d116      	bne.n	8003dce <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003da0:	4b16      	ldr	r3, [pc, #88]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCC_OscConfig+0x260>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	2b80      	cmp	r3, #128	; 0x80
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e253      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003db8:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	061b      	lsls	r3, r3, #24
 8003dc6:	490d      	ldr	r1, [pc, #52]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dcc:	e042      	b.n	8003e54 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d025      	beq.n	8003e22 <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a08      	ldr	r2, [pc, #32]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de2:	f7fd fc11 	bl	8001608 <HAL_GetTick>
 8003de6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003de8:	e00a      	b.n	8003e00 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003dea:	f7fd fc0d 	bl	8001608 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d903      	bls.n	8003e00 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e231      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
 8003dfc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e00:	4ba3      	ldr	r3, [pc, #652]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0ee      	beq.n	8003dea <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e0c:	4ba0      	ldr	r3, [pc, #640]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	061b      	lsls	r3, r3, #24
 8003e1a:	499d      	ldr	r1, [pc, #628]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60cb      	str	r3, [r1, #12]
 8003e20:	e018      	b.n	8003e54 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e22:	4b9b      	ldr	r3, [pc, #620]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a9a      	ldr	r2, [pc, #616]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2e:	f7fd fbeb 	bl	8001608 <HAL_GetTick>
 8003e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e36:	f7fd fbe7 	bl	8001608 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e20b      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e48:	4b91      	ldr	r3, [pc, #580]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d036      	beq.n	8003ece <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d019      	beq.n	8003e9c <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e68:	4b89      	ldr	r3, [pc, #548]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6c:	4a88      	ldr	r2, [pc, #544]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e74:	f7fd fbc8 	bl	8001608 <HAL_GetTick>
 8003e78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e7c:	f7fd fbc4 	bl	8001608 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e1e8      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e8e:	4b80      	ldr	r3, [pc, #512]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x324>
 8003e9a:	e018      	b.n	8003ece <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e9c:	4b7c      	ldr	r3, [pc, #496]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea0:	4a7b      	ldr	r2, [pc, #492]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea8:	f7fd fbae 	bl	8001608 <HAL_GetTick>
 8003eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb0:	f7fd fbaa 	bl	8001608 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e1ce      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ec2:	4b73      	ldr	r3, [pc, #460]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d036      	beq.n	8003f48 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d019      	beq.n	8003f16 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ee2:	4b6b      	ldr	r3, [pc, #428]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a6a      	ldr	r2, [pc, #424]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003ee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003eec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003eee:	f7fd fb8b 	bl	8001608 <HAL_GetTick>
 8003ef2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ef6:	f7fd fb87 	bl	8001608 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e1ab      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f08:	4b61      	ldr	r3, [pc, #388]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x39e>
 8003f14:	e018      	b.n	8003f48 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f16:	4b5e      	ldr	r3, [pc, #376]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a5d      	ldr	r2, [pc, #372]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003f1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f22:	f7fd fb71 	bl	8001608 <HAL_GetTick>
 8003f26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f2a:	f7fd fb6d 	bl	8001608 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e191      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f3c:	4b54      	ldr	r3, [pc, #336]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1f0      	bne.n	8003f2a <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8081 	beq.w	8004058 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f56:	4b4f      	ldr	r3, [pc, #316]	; (8004094 <HAL_RCC_OscConfig+0x53c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a4e      	ldr	r2, [pc, #312]	; (8004094 <HAL_RCC_OscConfig+0x53c>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f62:	f7fd fb51 	bl	8001608 <HAL_GetTick>
 8003f66:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f6a:	f7fd fb4d 	bl	8001608 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b64      	cmp	r3, #100	; 0x64
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e171      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f7c:	4b45      	ldr	r3, [pc, #276]	; (8004094 <HAL_RCC_OscConfig+0x53c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x446>
 8003f90:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	4a3e      	ldr	r2, [pc, #248]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9c:	e02d      	b.n	8003ffa <HAL_RCC_OscConfig+0x4a2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x468>
 8003fa6:	4b3a      	ldr	r3, [pc, #232]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	4a39      	ldr	r2, [pc, #228]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003fac:	f023 0301 	bic.w	r3, r3, #1
 8003fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	4a36      	ldr	r2, [pc, #216]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003fb8:	f023 0304 	bic.w	r3, r3, #4
 8003fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbe:	e01c      	b.n	8003ffa <HAL_RCC_OscConfig+0x4a2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b05      	cmp	r3, #5
 8003fc6:	d10c      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x48a>
 8003fc8:	4b31      	ldr	r3, [pc, #196]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fcc:	4a30      	ldr	r2, [pc, #192]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003fce:	f043 0304 	orr.w	r3, r3, #4
 8003fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd4:	4b2e      	ldr	r3, [pc, #184]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	4a2d      	ldr	r2, [pc, #180]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe0:	e00b      	b.n	8003ffa <HAL_RCC_OscConfig+0x4a2>
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	4a2a      	ldr	r2, [pc, #168]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	6713      	str	r3, [r2, #112]	; 0x70
 8003fee:	4b28      	ldr	r3, [pc, #160]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	4a27      	ldr	r2, [pc, #156]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8003ff4:	f023 0304 	bic.w	r3, r3, #4
 8003ff8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d015      	beq.n	800402e <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004002:	f7fd fb01 	bl	8001608 <HAL_GetTick>
 8004006:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004008:	e00a      	b.n	8004020 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7fd fafd 	bl	8001608 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f241 3288 	movw	r2, #5000	; 0x1388
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e11f      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004020:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0ee      	beq.n	800400a <HAL_RCC_OscConfig+0x4b2>
 800402c:	e014      	b.n	8004058 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402e:	f7fd faeb 	bl	8001608 <HAL_GetTick>
 8004032:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004034:	e00a      	b.n	800404c <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004036:	f7fd fae7 	bl	8001608 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f241 3288 	movw	r2, #5000	; 0x1388
 8004044:	4293      	cmp	r3, r2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e109      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800404c:	4b10      	ldr	r3, [pc, #64]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 800404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1ee      	bne.n	8004036 <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 80fe 	beq.w	800425e <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800406a:	2b18      	cmp	r3, #24
 800406c:	f000 80b9 	beq.w	80041e2 <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	2b02      	cmp	r3, #2
 8004076:	f040 809a 	bne.w	80041ae <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407a:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a04      	ldr	r2, [pc, #16]	; (8004090 <HAL_RCC_OscConfig+0x538>)
 8004080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004086:	f7fd fabf 	bl	8001608 <HAL_GetTick>
 800408a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800408c:	e00d      	b.n	80040aa <HAL_RCC_OscConfig+0x552>
 800408e:	bf00      	nop
 8004090:	58024400 	.word	0x58024400
 8004094:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004098:	f7fd fab6 	bl	8001608 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e0da      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040aa:	4b6f      	ldr	r3, [pc, #444]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040b6:	4b6c      	ldr	r3, [pc, #432]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 80040b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ba:	4b6c      	ldr	r3, [pc, #432]	; (800426c <HAL_RCC_OscConfig+0x714>)
 80040bc:	4013      	ands	r3, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040c6:	0112      	lsls	r2, r2, #4
 80040c8:	430a      	orrs	r2, r1
 80040ca:	4967      	ldr	r1, [pc, #412]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	628b      	str	r3, [r1, #40]	; 0x28
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	3b01      	subs	r3, #1
 80040d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040de:	3b01      	subs	r3, #1
 80040e0:	025b      	lsls	r3, r3, #9
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	3b01      	subs	r3, #1
 80040ec:	041b      	lsls	r3, r3, #16
 80040ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f8:	3b01      	subs	r3, #1
 80040fa:	061b      	lsls	r3, r3, #24
 80040fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004100:	4959      	ldr	r1, [pc, #356]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 8004102:	4313      	orrs	r3, r2
 8004104:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004106:	4b58      	ldr	r3, [pc, #352]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	4a57      	ldr	r2, [pc, #348]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004112:	4b55      	ldr	r3, [pc, #340]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 8004114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004116:	4b56      	ldr	r3, [pc, #344]	; (8004270 <HAL_RCC_OscConfig+0x718>)
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800411e:	00d2      	lsls	r2, r2, #3
 8004120:	4951      	ldr	r1, [pc, #324]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 8004122:	4313      	orrs	r3, r2
 8004124:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004126:	4b50      	ldr	r3, [pc, #320]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	f023 020c 	bic.w	r2, r3, #12
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	494d      	ldr	r1, [pc, #308]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 8004134:	4313      	orrs	r3, r2
 8004136:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004138:	4b4b      	ldr	r3, [pc, #300]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	f023 0202 	bic.w	r2, r3, #2
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004144:	4948      	ldr	r1, [pc, #288]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 8004146:	4313      	orrs	r3, r2
 8004148:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800414a:	4b47      	ldr	r3, [pc, #284]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	4a46      	ldr	r2, [pc, #280]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 8004150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004154:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004156:	4b44      	ldr	r3, [pc, #272]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	4a43      	ldr	r2, [pc, #268]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 800415c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004160:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004162:	4b41      	ldr	r3, [pc, #260]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	4a40      	ldr	r2, [pc, #256]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 8004168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800416c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800416e:	4b3e      	ldr	r3, [pc, #248]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	4a3d      	ldr	r2, [pc, #244]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800417a:	4b3b      	ldr	r3, [pc, #236]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a3a      	ldr	r2, [pc, #232]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 8004180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fd fa3f 	bl	8001608 <HAL_GetTick>
 800418a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418e:	f7fd fa3b 	bl	8001608 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e05f      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041a0:	4b31      	ldr	r3, [pc, #196]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x636>
 80041ac:	e057      	b.n	800425e <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ae:	4b2e      	ldr	r3, [pc, #184]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a2d      	ldr	r2, [pc, #180]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 80041b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ba:	f7fd fa25 	bl	8001608 <HAL_GetTick>
 80041be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c2:	f7fd fa21 	bl	8001608 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e045      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041d4:	4b24      	ldr	r3, [pc, #144]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1f0      	bne.n	80041c2 <HAL_RCC_OscConfig+0x66a>
 80041e0:	e03d      	b.n	800425e <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80041e2:	4b21      	ldr	r3, [pc, #132]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80041e8:	4b1f      	ldr	r3, [pc, #124]	; (8004268 <HAL_RCC_OscConfig+0x710>)
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d031      	beq.n	800425a <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f003 0203 	and.w	r2, r3, #3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d12a      	bne.n	800425a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	091b      	lsrs	r3, r3, #4
 8004208:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d122      	bne.n	800425a <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d11a      	bne.n	800425a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	0a5b      	lsrs	r3, r3, #9
 8004228:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004230:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004232:	429a      	cmp	r2, r3
 8004234:	d111      	bne.n	800425a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d108      	bne.n	800425a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	0e1b      	lsrs	r3, r3, #24
 800424c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004254:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004256:	429a      	cmp	r2, r3
 8004258:	d001      	beq.n	800425e <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3730      	adds	r7, #48	; 0x30
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	58024400 	.word	0x58024400
 800426c:	fffffc0c 	.word	0xfffffc0c
 8004270:	ffff0007 	.word	0xffff0007

08004274 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e19c      	b.n	80045c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004288:	4b8a      	ldr	r3, [pc, #552]	; (80044b4 <HAL_RCC_ClockConfig+0x240>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d910      	bls.n	80042b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004296:	4b87      	ldr	r3, [pc, #540]	; (80044b4 <HAL_RCC_ClockConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 020f 	bic.w	r2, r3, #15
 800429e:	4985      	ldr	r1, [pc, #532]	; (80044b4 <HAL_RCC_ClockConfig+0x240>)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a6:	4b83      	ldr	r3, [pc, #524]	; (80044b4 <HAL_RCC_ClockConfig+0x240>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e184      	b.n	80045c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d010      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	4b7b      	ldr	r3, [pc, #492]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d908      	bls.n	80042e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042d4:	4b78      	ldr	r3, [pc, #480]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	4975      	ldr	r1, [pc, #468]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d010      	beq.n	8004314 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	4b70      	ldr	r3, [pc, #448]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042fe:	429a      	cmp	r2, r3
 8004300:	d908      	bls.n	8004314 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004302:	4b6d      	ldr	r3, [pc, #436]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	496a      	ldr	r1, [pc, #424]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 8004310:	4313      	orrs	r3, r2
 8004312:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b00      	cmp	r3, #0
 800431e:	d010      	beq.n	8004342 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699a      	ldr	r2, [r3, #24]
 8004324:	4b64      	ldr	r3, [pc, #400]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800432c:	429a      	cmp	r2, r3
 800432e:	d908      	bls.n	8004342 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004330:	4b61      	ldr	r3, [pc, #388]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	495e      	ldr	r1, [pc, #376]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 800433e:	4313      	orrs	r3, r2
 8004340:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d010      	beq.n	8004370 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69da      	ldr	r2, [r3, #28]
 8004352:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800435a:	429a      	cmp	r2, r3
 800435c:	d908      	bls.n	8004370 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800435e:	4b56      	ldr	r3, [pc, #344]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	4953      	ldr	r1, [pc, #332]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 800436c:	4313      	orrs	r3, r2
 800436e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d010      	beq.n	800439e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	4b4d      	ldr	r3, [pc, #308]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	429a      	cmp	r2, r3
 800438a:	d908      	bls.n	800439e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800438c:	4b4a      	ldr	r3, [pc, #296]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f023 020f 	bic.w	r2, r3, #15
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4947      	ldr	r1, [pc, #284]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 800439a:	4313      	orrs	r3, r2
 800439c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d055      	beq.n	8004456 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80043aa:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	4940      	ldr	r1, [pc, #256]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d107      	bne.n	80043d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043c4:	4b3c      	ldr	r3, [pc, #240]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d121      	bne.n	8004414 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0f6      	b.n	80045c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b03      	cmp	r3, #3
 80043da:	d107      	bne.n	80043ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043dc:	4b36      	ldr	r3, [pc, #216]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d115      	bne.n	8004414 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0ea      	b.n	80045c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d107      	bne.n	8004404 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043f4:	4b30      	ldr	r3, [pc, #192]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0de      	b.n	80045c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004404:	4b2c      	ldr	r3, [pc, #176]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0d6      	b.n	80045c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004414:	4b28      	ldr	r3, [pc, #160]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f023 0207 	bic.w	r2, r3, #7
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4925      	ldr	r1, [pc, #148]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 8004422:	4313      	orrs	r3, r2
 8004424:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004426:	f7fd f8ef 	bl	8001608 <HAL_GetTick>
 800442a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442c:	e00a      	b.n	8004444 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800442e:	f7fd f8eb 	bl	8001608 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	f241 3288 	movw	r2, #5000	; 0x1388
 800443c:	4293      	cmp	r3, r2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e0be      	b.n	80045c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004444:	4b1c      	ldr	r3, [pc, #112]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	429a      	cmp	r2, r3
 8004454:	d1eb      	bne.n	800442e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d010      	beq.n	8004484 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	4b14      	ldr	r3, [pc, #80]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	429a      	cmp	r2, r3
 8004470:	d208      	bcs.n	8004484 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004472:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f023 020f 	bic.w	r2, r3, #15
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	490e      	ldr	r1, [pc, #56]	; (80044b8 <HAL_RCC_ClockConfig+0x244>)
 8004480:	4313      	orrs	r3, r2
 8004482:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCC_ClockConfig+0x240>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d214      	bcs.n	80044bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004492:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <HAL_RCC_ClockConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 020f 	bic.w	r2, r3, #15
 800449a:	4906      	ldr	r1, [pc, #24]	; (80044b4 <HAL_RCC_ClockConfig+0x240>)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a2:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <HAL_RCC_ClockConfig+0x240>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e086      	b.n	80045c2 <HAL_RCC_ClockConfig+0x34e>
 80044b4:	52002000 	.word	0x52002000
 80044b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d010      	beq.n	80044ea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	4b3f      	ldr	r3, [pc, #252]	; (80045cc <HAL_RCC_ClockConfig+0x358>)
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d208      	bcs.n	80044ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044d8:	4b3c      	ldr	r3, [pc, #240]	; (80045cc <HAL_RCC_ClockConfig+0x358>)
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	4939      	ldr	r1, [pc, #228]	; (80045cc <HAL_RCC_ClockConfig+0x358>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d010      	beq.n	8004518 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	4b34      	ldr	r3, [pc, #208]	; (80045cc <HAL_RCC_ClockConfig+0x358>)
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004502:	429a      	cmp	r2, r3
 8004504:	d208      	bcs.n	8004518 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004506:	4b31      	ldr	r3, [pc, #196]	; (80045cc <HAL_RCC_ClockConfig+0x358>)
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	492e      	ldr	r1, [pc, #184]	; (80045cc <HAL_RCC_ClockConfig+0x358>)
 8004514:	4313      	orrs	r3, r2
 8004516:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	d010      	beq.n	8004546 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699a      	ldr	r2, [r3, #24]
 8004528:	4b28      	ldr	r3, [pc, #160]	; (80045cc <HAL_RCC_ClockConfig+0x358>)
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004530:	429a      	cmp	r2, r3
 8004532:	d208      	bcs.n	8004546 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004534:	4b25      	ldr	r3, [pc, #148]	; (80045cc <HAL_RCC_ClockConfig+0x358>)
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	4922      	ldr	r1, [pc, #136]	; (80045cc <HAL_RCC_ClockConfig+0x358>)
 8004542:	4313      	orrs	r3, r2
 8004544:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d010      	beq.n	8004574 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <HAL_RCC_ClockConfig+0x358>)
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800455e:	429a      	cmp	r2, r3
 8004560:	d208      	bcs.n	8004574 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004562:	4b1a      	ldr	r3, [pc, #104]	; (80045cc <HAL_RCC_ClockConfig+0x358>)
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	4917      	ldr	r1, [pc, #92]	; (80045cc <HAL_RCC_ClockConfig+0x358>)
 8004570:	4313      	orrs	r3, r2
 8004572:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004574:	f000 f834 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b14      	ldr	r3, [pc, #80]	; (80045cc <HAL_RCC_ClockConfig+0x358>)
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	4912      	ldr	r1, [pc, #72]	; (80045d0 <HAL_RCC_ClockConfig+0x35c>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
 8004590:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004592:	4b0e      	ldr	r3, [pc, #56]	; (80045cc <HAL_RCC_ClockConfig+0x358>)
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	4a0d      	ldr	r2, [pc, #52]	; (80045d0 <HAL_RCC_ClockConfig+0x35c>)
 800459c:	5cd3      	ldrb	r3, [r2, r3]
 800459e:	f003 031f 	and.w	r3, r3, #31
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	fa22 f303 	lsr.w	r3, r2, r3
 80045a8:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <HAL_RCC_ClockConfig+0x360>)
 80045aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045ac:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <HAL_RCC_ClockConfig+0x364>)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80045b2:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <HAL_RCC_ClockConfig+0x368>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fc ffdc 	bl	8001574 <HAL_InitTick>
 80045bc:	4603      	mov	r3, r0
 80045be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	58024400 	.word	0x58024400
 80045d0:	08008adc 	.word	0x08008adc
 80045d4:	24000004 	.word	0x24000004
 80045d8:	24000000 	.word	0x24000000
 80045dc:	24000008 	.word	0x24000008

080045e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b089      	sub	sp, #36	; 0x24
 80045e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045e6:	4bb3      	ldr	r3, [pc, #716]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ee:	2b18      	cmp	r3, #24
 80045f0:	f200 8155 	bhi.w	800489e <HAL_RCC_GetSysClockFreq+0x2be>
 80045f4:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80045f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fa:	bf00      	nop
 80045fc:	08004661 	.word	0x08004661
 8004600:	0800489f 	.word	0x0800489f
 8004604:	0800489f 	.word	0x0800489f
 8004608:	0800489f 	.word	0x0800489f
 800460c:	0800489f 	.word	0x0800489f
 8004610:	0800489f 	.word	0x0800489f
 8004614:	0800489f 	.word	0x0800489f
 8004618:	0800489f 	.word	0x0800489f
 800461c:	08004687 	.word	0x08004687
 8004620:	0800489f 	.word	0x0800489f
 8004624:	0800489f 	.word	0x0800489f
 8004628:	0800489f 	.word	0x0800489f
 800462c:	0800489f 	.word	0x0800489f
 8004630:	0800489f 	.word	0x0800489f
 8004634:	0800489f 	.word	0x0800489f
 8004638:	0800489f 	.word	0x0800489f
 800463c:	0800468d 	.word	0x0800468d
 8004640:	0800489f 	.word	0x0800489f
 8004644:	0800489f 	.word	0x0800489f
 8004648:	0800489f 	.word	0x0800489f
 800464c:	0800489f 	.word	0x0800489f
 8004650:	0800489f 	.word	0x0800489f
 8004654:	0800489f 	.word	0x0800489f
 8004658:	0800489f 	.word	0x0800489f
 800465c:	08004693 	.word	0x08004693
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004660:	4b94      	ldr	r3, [pc, #592]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d009      	beq.n	8004680 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800466c:	4b91      	ldr	r3, [pc, #580]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	08db      	lsrs	r3, r3, #3
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	4a90      	ldr	r2, [pc, #576]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
 800467c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800467e:	e111      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004680:	4b8d      	ldr	r3, [pc, #564]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004682:	61bb      	str	r3, [r7, #24]
    break;
 8004684:	e10e      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004686:	4b8d      	ldr	r3, [pc, #564]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004688:	61bb      	str	r3, [r7, #24]
    break;
 800468a:	e10b      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800468c:	4b8c      	ldr	r3, [pc, #560]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800468e:	61bb      	str	r3, [r7, #24]
    break;
 8004690:	e108      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004692:	4b88      	ldr	r3, [pc, #544]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800469c:	4b85      	ldr	r3, [pc, #532]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80046a8:	4b82      	ldr	r3, [pc, #520]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80046b2:	4b80      	ldr	r3, [pc, #512]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b6:	08db      	lsrs	r3, r3, #3
 80046b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80e1 	beq.w	8004898 <HAL_RCC_GetSysClockFreq+0x2b8>
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b02      	cmp	r3, #2
 80046da:	f000 8083 	beq.w	80047e4 <HAL_RCC_GetSysClockFreq+0x204>
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	f200 80a1 	bhi.w	8004828 <HAL_RCC_GetSysClockFreq+0x248>
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0x114>
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d056      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80046f2:	e099      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046f4:	4b6f      	ldr	r3, [pc, #444]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0320 	and.w	r3, r3, #32
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d02d      	beq.n	800475c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004700:	4b6c      	ldr	r3, [pc, #432]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	08db      	lsrs	r3, r3, #3
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	4a6b      	ldr	r2, [pc, #428]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
 8004710:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	ee07 3a90 	vmov	s15, r3
 8004718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472a:	4b62      	ldr	r3, [pc, #392]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473a:	ed97 6a02 	vldr	s12, [r7, #8]
 800473e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80048c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800474e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004756:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800475a:	e087      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004766:	eddf 6a58 	vldr	s13, [pc, #352]	; 80048c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800476a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800476e:	4b51      	ldr	r3, [pc, #324]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004782:	eddf 5a50 	vldr	s11, [pc, #320]	; 80048c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800478a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800478e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800479e:	e065      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80048cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80047ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b2:	4b40      	ldr	r3, [pc, #256]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80047c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80048c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047e2:	e043      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80048d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80047f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047f6:	4b2f      	ldr	r3, [pc, #188]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004806:	ed97 6a02 	vldr	s12, [r7, #8]
 800480a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80048c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800480e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800481a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800481e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004826:	e021      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004832:	eddf 6a26 	vldr	s13, [pc, #152]	; 80048cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483a:	4b1e      	ldr	r3, [pc, #120]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484a:	ed97 6a02 	vldr	s12, [r7, #8]
 800484e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80048c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800485e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800486a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800486c:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	0a5b      	lsrs	r3, r3, #9
 8004872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004876:	3301      	adds	r3, #1
 8004878:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	ee07 3a90 	vmov	s15, r3
 8004880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004884:	edd7 6a07 	vldr	s13, [r7, #28]
 8004888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800488c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004890:	ee17 3a90 	vmov	r3, s15
 8004894:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004896:	e005      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	61bb      	str	r3, [r7, #24]
    break;
 800489c:	e002      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800489e:	4b07      	ldr	r3, [pc, #28]	; (80048bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048a0:	61bb      	str	r3, [r7, #24]
    break;
 80048a2:	bf00      	nop
  }

  return sysclockfreq;
 80048a4:	69bb      	ldr	r3, [r7, #24]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3724      	adds	r7, #36	; 0x24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	58024400 	.word	0x58024400
 80048b8:	03d09000 	.word	0x03d09000
 80048bc:	003d0900 	.word	0x003d0900
 80048c0:	007a1200 	.word	0x007a1200
 80048c4:	46000000 	.word	0x46000000
 80048c8:	4c742400 	.word	0x4c742400
 80048cc:	4a742400 	.word	0x4a742400
 80048d0:	4af42400 	.word	0x4af42400

080048d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80048da:	f7ff fe81 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 80048de:	4602      	mov	r2, r0
 80048e0:	4b10      	ldr	r3, [pc, #64]	; (8004924 <HAL_RCC_GetHCLKFreq+0x50>)
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	0a1b      	lsrs	r3, r3, #8
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	490f      	ldr	r1, [pc, #60]	; (8004928 <HAL_RCC_GetHCLKFreq+0x54>)
 80048ec:	5ccb      	ldrb	r3, [r1, r3]
 80048ee:	f003 031f 	and.w	r3, r3, #31
 80048f2:	fa22 f303 	lsr.w	r3, r2, r3
 80048f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048f8:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <HAL_RCC_GetHCLKFreq+0x50>)
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	4a09      	ldr	r2, [pc, #36]	; (8004928 <HAL_RCC_GetHCLKFreq+0x54>)
 8004902:	5cd3      	ldrb	r3, [r2, r3]
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	fa22 f303 	lsr.w	r3, r2, r3
 800490e:	4a07      	ldr	r2, [pc, #28]	; (800492c <HAL_RCC_GetHCLKFreq+0x58>)
 8004910:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004912:	4a07      	ldr	r2, [pc, #28]	; (8004930 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004918:	4b04      	ldr	r3, [pc, #16]	; (800492c <HAL_RCC_GetHCLKFreq+0x58>)
 800491a:	681b      	ldr	r3, [r3, #0]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	58024400 	.word	0x58024400
 8004928:	08008adc 	.word	0x08008adc
 800492c:	24000004 	.word	0x24000004
 8004930:	24000000 	.word	0x24000000

08004934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004938:	f7ff ffcc 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 800493c:	4602      	mov	r2, r0
 800493e:	4b06      	ldr	r3, [pc, #24]	; (8004958 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	091b      	lsrs	r3, r3, #4
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	4904      	ldr	r1, [pc, #16]	; (800495c <HAL_RCC_GetPCLK1Freq+0x28>)
 800494a:	5ccb      	ldrb	r3, [r1, r3]
 800494c:	f003 031f 	and.w	r3, r3, #31
 8004950:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004954:	4618      	mov	r0, r3
 8004956:	bd80      	pop	{r7, pc}
 8004958:	58024400 	.word	0x58024400
 800495c:	08008adc 	.word	0x08008adc

08004960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004964:	f7ff ffb6 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 8004968:	4602      	mov	r2, r0
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCC_GetPCLK2Freq+0x24>)
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	4904      	ldr	r1, [pc, #16]	; (8004988 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004976:	5ccb      	ldrb	r3, [r1, r3]
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004980:	4618      	mov	r0, r3
 8004982:	bd80      	pop	{r7, pc}
 8004984:	58024400 	.word	0x58024400
 8004988:	08008adc 	.word	0x08008adc

0800498c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004994:	2300      	movs	r3, #0
 8004996:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004998:	2300      	movs	r3, #0
 800499a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d03f      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049b0:	d02a      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049b6:	d824      	bhi.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049bc:	d018      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049c2:	d81e      	bhi.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049cc:	d007      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049ce:	e018      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d0:	4bab      	ldr	r3, [pc, #684]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	4aaa      	ldr	r2, [pc, #680]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049dc:	e015      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3304      	adds	r3, #4
 80049e2:	2102      	movs	r1, #2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f001 feff 	bl	80067e8 <RCCEx_PLL2_Config>
 80049ea:	4603      	mov	r3, r0
 80049ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049ee:	e00c      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3324      	adds	r3, #36	; 0x24
 80049f4:	2102      	movs	r1, #2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f001 ffa8 	bl	800694c <RCCEx_PLL3_Config>
 80049fc:	4603      	mov	r3, r0
 80049fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a00:	e003      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	75fb      	strb	r3, [r7, #23]
      break;
 8004a06:	e000      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d109      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a10:	4b9b      	ldr	r3, [pc, #620]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1c:	4998      	ldr	r1, [pc, #608]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	650b      	str	r3, [r1, #80]	; 0x50
 8004a22:	e001      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a24:	7dfb      	ldrb	r3, [r7, #23]
 8004a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d03d      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d826      	bhi.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a3c:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a42:	bf00      	nop
 8004a44:	08004a59 	.word	0x08004a59
 8004a48:	08004a67 	.word	0x08004a67
 8004a4c:	08004a79 	.word	0x08004a79
 8004a50:	08004a91 	.word	0x08004a91
 8004a54:	08004a91 	.word	0x08004a91
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a58:	4b89      	ldr	r3, [pc, #548]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	4a88      	ldr	r2, [pc, #544]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a64:	e015      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f001 febb 	bl	80067e8 <RCCEx_PLL2_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a76:	e00c      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3324      	adds	r3, #36	; 0x24
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f001 ff64 	bl	800694c <RCCEx_PLL3_Config>
 8004a84:	4603      	mov	r3, r0
 8004a86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a88:	e003      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a8e:	e000      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a98:	4b79      	ldr	r3, [pc, #484]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9c:	f023 0207 	bic.w	r2, r3, #7
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa4:	4976      	ldr	r1, [pc, #472]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	650b      	str	r3, [r1, #80]	; 0x50
 8004aaa:	e001      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d051      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ac2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004ac6:	d036      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ac8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004acc:	d830      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004ace:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ad2:	d032      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004ad4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ad8:	d82a      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004ada:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ade:	d02e      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004ae0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ae4:	d824      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aea:	d018      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004aec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004af0:	d81e      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004af6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004afa:	d007      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004afc:	e018      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004afe:	4b60      	ldr	r3, [pc, #384]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	4a5f      	ldr	r2, [pc, #380]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b0a:	e019      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	2100      	movs	r1, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f001 fe68 	bl	80067e8 <RCCEx_PLL2_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004b1c:	e010      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3324      	adds	r3, #36	; 0x24
 8004b22:	2100      	movs	r1, #0
 8004b24:	4618      	mov	r0, r3
 8004b26:	f001 ff11 	bl	800694c <RCCEx_PLL3_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b2e:	e007      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	75fb      	strb	r3, [r7, #23]
      break;
 8004b34:	e004      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004b36:	bf00      	nop
 8004b38:	e002      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004b3a:	bf00      	nop
 8004b3c:	e000      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10a      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b46:	4b4e      	ldr	r3, [pc, #312]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b54:	494a      	ldr	r1, [pc, #296]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	658b      	str	r3, [r1, #88]	; 0x58
 8004b5a:	e001      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
 8004b5e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d051      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b72:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004b76:	d036      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004b78:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004b7c:	d830      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004b7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b82:	d032      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004b84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b88:	d82a      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004b8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b8e:	d02e      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004b90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b94:	d824      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004b96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b9a:	d018      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004b9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ba0:	d81e      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004ba6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004baa:	d007      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004bac:	e018      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bae:	4b34      	ldr	r3, [pc, #208]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	4a33      	ldr	r2, [pc, #204]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bba:	e019      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f001 fe10 	bl	80067e8 <RCCEx_PLL2_Config>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004bcc:	e010      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3324      	adds	r3, #36	; 0x24
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f001 feb9 	bl	800694c <RCCEx_PLL3_Config>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bde:	e007      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	75fb      	strb	r3, [r7, #23]
      break;
 8004be4:	e004      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004be6:	bf00      	nop
 8004be8:	e002      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004bea:	bf00      	nop
 8004bec:	e000      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004bf6:	4b22      	ldr	r3, [pc, #136]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c04:	491e      	ldr	r1, [pc, #120]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	658b      	str	r3, [r1, #88]	; 0x58
 8004c0a:	e001      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
 8004c0e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d035      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c20:	2b30      	cmp	r3, #48	; 0x30
 8004c22:	d01c      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004c24:	2b30      	cmp	r3, #48	; 0x30
 8004c26:	d817      	bhi.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d00c      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d813      	bhi.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d016      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d10f      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c38:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	4a10      	ldr	r2, [pc, #64]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004c44:	e00e      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f001 fdcb 	bl	80067e8 <RCCEx_PLL2_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004c56:	e005      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c5c:	e002      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004c5e:	bf00      	nop
 8004c60:	e000      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10c      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c76:	4902      	ldr	r1, [pc, #8]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c7c:	e004      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004c7e:	bf00      	nop
 8004c80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
 8004c86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d047      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c9c:	d030      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ca2:	d82a      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004ca4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ca8:	d02c      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004caa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cae:	d824      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb4:	d018      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cba:	d81e      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc4:	d007      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004cc6:	e018      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc8:	4bac      	ldr	r3, [pc, #688]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	4aab      	ldr	r2, [pc, #684]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cd4:	e017      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 fd83 	bl	80067e8 <RCCEx_PLL2_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004ce6:	e00e      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3324      	adds	r3, #36	; 0x24
 8004cec:	2100      	movs	r1, #0
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f001 fe2c 	bl	800694c <RCCEx_PLL3_Config>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cf8:	e005      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8004cfe:	e002      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004d00:	bf00      	nop
 8004d02:	e000      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d109      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d0c:	4b9b      	ldr	r3, [pc, #620]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d10:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d18:	4998      	ldr	r1, [pc, #608]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	650b      	str	r3, [r1, #80]	; 0x50
 8004d1e:	e001      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d049      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d38:	d02e      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004d3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d3e:	d828      	bhi.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004d40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d44:	d02a      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004d46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d4a:	d822      	bhi.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004d4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d50:	d026      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004d52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d56:	d81c      	bhi.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d5c:	d010      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d62:	d816      	bhi.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01d      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d111      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3304      	adds	r3, #4
 8004d72:	2101      	movs	r1, #1
 8004d74:	4618      	mov	r0, r3
 8004d76:	f001 fd37 	bl	80067e8 <RCCEx_PLL2_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d7e:	e012      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3324      	adds	r3, #36	; 0x24
 8004d84:	2101      	movs	r1, #1
 8004d86:	4618      	mov	r0, r3
 8004d88:	f001 fde0 	bl	800694c <RCCEx_PLL3_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d90:	e009      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	75fb      	strb	r3, [r7, #23]
      break;
 8004d96:	e006      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004d98:	bf00      	nop
 8004d9a:	e004      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004d9c:	bf00      	nop
 8004d9e:	e002      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004da0:	bf00      	nop
 8004da2:	e000      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d109      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004dac:	4b73      	ldr	r3, [pc, #460]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db8:	4970      	ldr	r1, [pc, #448]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	650b      	str	r3, [r1, #80]	; 0x50
 8004dbe:	e001      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc0:	7dfb      	ldrb	r3, [r7, #23]
 8004dc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d04b      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dda:	d02e      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de0:	d828      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de6:	d02a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dec:	d822      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004dee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004df2:	d026      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004df4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004df8:	d81c      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dfe:	d010      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8004e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e04:	d816      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01d      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e0e:	d111      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3304      	adds	r3, #4
 8004e14:	2101      	movs	r1, #1
 8004e16:	4618      	mov	r0, r3
 8004e18:	f001 fce6 	bl	80067e8 <RCCEx_PLL2_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e20:	e012      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3324      	adds	r3, #36	; 0x24
 8004e26:	2101      	movs	r1, #1
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f001 fd8f 	bl	800694c <RCCEx_PLL3_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e32:	e009      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	75fb      	strb	r3, [r7, #23]
      break;
 8004e38:	e006      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004e3a:	bf00      	nop
 8004e3c:	e004      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004e3e:	bf00      	nop
 8004e40:	e002      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004e42:	bf00      	nop
 8004e44:	e000      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10a      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e4e:	4b4b      	ldr	r3, [pc, #300]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e5c:	4947      	ldr	r1, [pc, #284]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	658b      	str	r3, [r1, #88]	; 0x58
 8004e62:	e001      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
 8004e66:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d02f      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e7c:	d00e      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e82:	d814      	bhi.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d015      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004e88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e8c:	d10f      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e8e:	4b3b      	ldr	r3, [pc, #236]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	4a3a      	ldr	r2, [pc, #232]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e9a:	e00c      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f001 fca0 	bl	80067e8 <RCCEx_PLL2_Config>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004eac:	e003      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eb6:	7dfb      	ldrb	r3, [r7, #23]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d109      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ebc:	4b2f      	ldr	r3, [pc, #188]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ec8:	492c      	ldr	r1, [pc, #176]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	650b      	str	r3, [r1, #80]	; 0x50
 8004ece:	e001      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d032      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d81b      	bhi.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004ee8:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eee:	bf00      	nop
 8004ef0:	08004f27 	.word	0x08004f27
 8004ef4:	08004f01 	.word	0x08004f01
 8004ef8:	08004f0f 	.word	0x08004f0f
 8004efc:	08004f27 	.word	0x08004f27
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f00:	4b1e      	ldr	r3, [pc, #120]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	4a1d      	ldr	r2, [pc, #116]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f0c:	e00c      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3304      	adds	r3, #4
 8004f12:	2102      	movs	r1, #2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f001 fc67 	bl	80067e8 <RCCEx_PLL2_Config>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f1e:	e003      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	75fb      	strb	r3, [r7, #23]
      break;
 8004f24:	e000      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f2e:	4b13      	ldr	r3, [pc, #76]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f32:	f023 0203 	bic.w	r2, r3, #3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3a:	4910      	ldr	r1, [pc, #64]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f40:	e001      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
 8004f44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 808a 	beq.w	8005068 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f54:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f60:	f7fc fb52 	bl	8001608 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f66:	e00d      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f68:	f7fc fb4e 	bl	8001608 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d906      	bls.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	75fb      	strb	r3, [r7, #23]
        break;
 8004f7a:	e009      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004f7c:	58024400 	.word	0x58024400
 8004f80:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f84:	4bb9      	ldr	r3, [pc, #740]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0eb      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d166      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f96:	4bb6      	ldr	r3, [pc, #728]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004f98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004fa0:	4053      	eors	r3, r2
 8004fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d013      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004faa:	4bb1      	ldr	r3, [pc, #708]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fb4:	4bae      	ldr	r3, [pc, #696]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb8:	4aad      	ldr	r2, [pc, #692]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fbe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fc0:	4bab      	ldr	r3, [pc, #684]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc4:	4aaa      	ldr	r2, [pc, #680]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fca:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004fcc:	4aa8      	ldr	r2, [pc, #672]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fdc:	d115      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fde:	f7fc fb13 	bl	8001608 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fe4:	e00b      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe6:	f7fc fb0f 	bl	8001608 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d902      	bls.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	75fb      	strb	r3, [r7, #23]
            break;
 8004ffc:	e005      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ffe:	4b9c      	ldr	r3, [pc, #624]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0ed      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800500a:	7dfb      	ldrb	r3, [r7, #23]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d126      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800501e:	d10d      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005020:	4b93      	ldr	r3, [pc, #588]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800502e:	0919      	lsrs	r1, r3, #4
 8005030:	4b90      	ldr	r3, [pc, #576]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005032:	400b      	ands	r3, r1
 8005034:	498e      	ldr	r1, [pc, #568]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005036:	4313      	orrs	r3, r2
 8005038:	610b      	str	r3, [r1, #16]
 800503a:	e005      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800503c:	4b8c      	ldr	r3, [pc, #560]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	4a8b      	ldr	r2, [pc, #556]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005042:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005046:	6113      	str	r3, [r2, #16]
 8005048:	4b89      	ldr	r3, [pc, #548]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800504a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005056:	4986      	ldr	r1, [pc, #536]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005058:	4313      	orrs	r3, r2
 800505a:	670b      	str	r3, [r1, #112]	; 0x70
 800505c:	e004      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800505e:	7dfb      	ldrb	r3, [r7, #23]
 8005060:	75bb      	strb	r3, [r7, #22]
 8005062:	e001      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005064:	7dfb      	ldrb	r3, [r7, #23]
 8005066:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d07e      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005078:	2b28      	cmp	r3, #40	; 0x28
 800507a:	d867      	bhi.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800507c:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	08005153 	.word	0x08005153
 8005088:	0800514d 	.word	0x0800514d
 800508c:	0800514d 	.word	0x0800514d
 8005090:	0800514d 	.word	0x0800514d
 8005094:	0800514d 	.word	0x0800514d
 8005098:	0800514d 	.word	0x0800514d
 800509c:	0800514d 	.word	0x0800514d
 80050a0:	0800514d 	.word	0x0800514d
 80050a4:	08005129 	.word	0x08005129
 80050a8:	0800514d 	.word	0x0800514d
 80050ac:	0800514d 	.word	0x0800514d
 80050b0:	0800514d 	.word	0x0800514d
 80050b4:	0800514d 	.word	0x0800514d
 80050b8:	0800514d 	.word	0x0800514d
 80050bc:	0800514d 	.word	0x0800514d
 80050c0:	0800514d 	.word	0x0800514d
 80050c4:	0800513b 	.word	0x0800513b
 80050c8:	0800514d 	.word	0x0800514d
 80050cc:	0800514d 	.word	0x0800514d
 80050d0:	0800514d 	.word	0x0800514d
 80050d4:	0800514d 	.word	0x0800514d
 80050d8:	0800514d 	.word	0x0800514d
 80050dc:	0800514d 	.word	0x0800514d
 80050e0:	0800514d 	.word	0x0800514d
 80050e4:	08005153 	.word	0x08005153
 80050e8:	0800514d 	.word	0x0800514d
 80050ec:	0800514d 	.word	0x0800514d
 80050f0:	0800514d 	.word	0x0800514d
 80050f4:	0800514d 	.word	0x0800514d
 80050f8:	0800514d 	.word	0x0800514d
 80050fc:	0800514d 	.word	0x0800514d
 8005100:	0800514d 	.word	0x0800514d
 8005104:	08005153 	.word	0x08005153
 8005108:	0800514d 	.word	0x0800514d
 800510c:	0800514d 	.word	0x0800514d
 8005110:	0800514d 	.word	0x0800514d
 8005114:	0800514d 	.word	0x0800514d
 8005118:	0800514d 	.word	0x0800514d
 800511c:	0800514d 	.word	0x0800514d
 8005120:	0800514d 	.word	0x0800514d
 8005124:	08005153 	.word	0x08005153
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	2101      	movs	r1, #1
 800512e:	4618      	mov	r0, r3
 8005130:	f001 fb5a 	bl	80067e8 <RCCEx_PLL2_Config>
 8005134:	4603      	mov	r3, r0
 8005136:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005138:	e00c      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3324      	adds	r3, #36	; 0x24
 800513e:	2101      	movs	r1, #1
 8005140:	4618      	mov	r0, r3
 8005142:	f001 fc03 	bl	800694c <RCCEx_PLL3_Config>
 8005146:	4603      	mov	r3, r0
 8005148:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800514a:	e003      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	75fb      	strb	r3, [r7, #23]
      break;
 8005150:	e000      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8005152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800515a:	4b45      	ldr	r3, [pc, #276]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800515c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005166:	4942      	ldr	r1, [pc, #264]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005168:	4313      	orrs	r3, r2
 800516a:	654b      	str	r3, [r1, #84]	; 0x54
 800516c:	e001      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d037      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005182:	2b05      	cmp	r3, #5
 8005184:	d820      	bhi.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005186:	a201      	add	r2, pc, #4	; (adr r2, 800518c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	080051cf 	.word	0x080051cf
 8005190:	080051a5 	.word	0x080051a5
 8005194:	080051b7 	.word	0x080051b7
 8005198:	080051cf 	.word	0x080051cf
 800519c:	080051cf 	.word	0x080051cf
 80051a0:	080051cf 	.word	0x080051cf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3304      	adds	r3, #4
 80051a8:	2101      	movs	r1, #1
 80051aa:	4618      	mov	r0, r3
 80051ac:	f001 fb1c 	bl	80067e8 <RCCEx_PLL2_Config>
 80051b0:	4603      	mov	r3, r0
 80051b2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051b4:	e00c      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3324      	adds	r3, #36	; 0x24
 80051ba:	2101      	movs	r1, #1
 80051bc:	4618      	mov	r0, r3
 80051be:	f001 fbc5 	bl	800694c <RCCEx_PLL3_Config>
 80051c2:	4603      	mov	r3, r0
 80051c4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051c6:	e003      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	75fb      	strb	r3, [r7, #23]
      break;
 80051cc:	e000      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80051ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051d0:	7dfb      	ldrb	r3, [r7, #23]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d109      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80051d6:	4b26      	ldr	r3, [pc, #152]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	f023 0207 	bic.w	r2, r3, #7
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e2:	4923      	ldr	r1, [pc, #140]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	654b      	str	r3, [r1, #84]	; 0x54
 80051e8:	e001      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ea:	7dfb      	ldrb	r3, [r7, #23]
 80051ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d040      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005200:	2b05      	cmp	r3, #5
 8005202:	d821      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005204:	a201      	add	r2, pc, #4	; (adr r2, 800520c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520a:	bf00      	nop
 800520c:	0800524f 	.word	0x0800524f
 8005210:	08005225 	.word	0x08005225
 8005214:	08005237 	.word	0x08005237
 8005218:	0800524f 	.word	0x0800524f
 800521c:	0800524f 	.word	0x0800524f
 8005220:	0800524f 	.word	0x0800524f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3304      	adds	r3, #4
 8005228:	2101      	movs	r1, #1
 800522a:	4618      	mov	r0, r3
 800522c:	f001 fadc 	bl	80067e8 <RCCEx_PLL2_Config>
 8005230:	4603      	mov	r3, r0
 8005232:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005234:	e00c      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3324      	adds	r3, #36	; 0x24
 800523a:	2101      	movs	r1, #1
 800523c:	4618      	mov	r0, r3
 800523e:	f001 fb85 	bl	800694c <RCCEx_PLL3_Config>
 8005242:	4603      	mov	r3, r0
 8005244:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005246:	e003      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	75fb      	strb	r3, [r7, #23]
      break;
 800524c:	e000      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800524e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005250:	7dfb      	ldrb	r3, [r7, #23]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d110      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005256:	4b06      	ldr	r3, [pc, #24]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	f023 0207 	bic.w	r2, r3, #7
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005264:	4902      	ldr	r1, [pc, #8]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005266:	4313      	orrs	r3, r2
 8005268:	658b      	str	r3, [r1, #88]	; 0x58
 800526a:	e007      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800526c:	58024800 	.word	0x58024800
 8005270:	58024400 	.word	0x58024400
 8005274:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005278:	7dfb      	ldrb	r3, [r7, #23]
 800527a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d04b      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005292:	d02e      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005298:	d828      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x960>
 800529a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529e:	d02a      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80052a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a4:	d822      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x960>
 80052a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052aa:	d026      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80052ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052b0:	d81c      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x960>
 80052b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052b6:	d010      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80052b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052bc:	d816      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x960>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d01d      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x972>
 80052c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052c6:	d111      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3304      	adds	r3, #4
 80052cc:	2100      	movs	r1, #0
 80052ce:	4618      	mov	r0, r3
 80052d0:	f001 fa8a 	bl	80067e8 <RCCEx_PLL2_Config>
 80052d4:	4603      	mov	r3, r0
 80052d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052d8:	e012      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3324      	adds	r3, #36	; 0x24
 80052de:	2102      	movs	r1, #2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f001 fb33 	bl	800694c <RCCEx_PLL3_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052ea:	e009      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	75fb      	strb	r3, [r7, #23]
      break;
 80052f0:	e006      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80052f2:	bf00      	nop
 80052f4:	e004      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80052f6:	bf00      	nop
 80052f8:	e002      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80052fa:	bf00      	nop
 80052fc:	e000      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80052fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005300:	7dfb      	ldrb	r3, [r7, #23]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005306:	4bb2      	ldr	r3, [pc, #712]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005314:	49ae      	ldr	r1, [pc, #696]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005316:	4313      	orrs	r3, r2
 8005318:	654b      	str	r3, [r1, #84]	; 0x54
 800531a:	e001      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531c:	7dfb      	ldrb	r3, [r7, #23]
 800531e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	d04b      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005332:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005336:	d02e      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005338:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800533c:	d828      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800533e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005342:	d02a      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005348:	d822      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800534a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800534e:	d026      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005350:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005354:	d81c      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800535a:	d010      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800535c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005360:	d816      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d01d      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536a:	d111      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3304      	adds	r3, #4
 8005370:	2100      	movs	r1, #0
 8005372:	4618      	mov	r0, r3
 8005374:	f001 fa38 	bl	80067e8 <RCCEx_PLL2_Config>
 8005378:	4603      	mov	r3, r0
 800537a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800537c:	e012      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3324      	adds	r3, #36	; 0x24
 8005382:	2102      	movs	r1, #2
 8005384:	4618      	mov	r0, r3
 8005386:	f001 fae1 	bl	800694c <RCCEx_PLL3_Config>
 800538a:	4603      	mov	r3, r0
 800538c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800538e:	e009      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	75fb      	strb	r3, [r7, #23]
      break;
 8005394:	e006      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005396:	bf00      	nop
 8005398:	e004      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800539a:	bf00      	nop
 800539c:	e002      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80053a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10a      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053aa:	4b89      	ldr	r3, [pc, #548]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80053ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b8:	4985      	ldr	r1, [pc, #532]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	658b      	str	r3, [r1, #88]	; 0x58
 80053be:	e001      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c0:	7dfb      	ldrb	r3, [r7, #23]
 80053c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d04b      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053d6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053da:	d02e      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80053dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053e0:	d828      	bhi.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80053e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e6:	d02a      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80053e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ec:	d822      	bhi.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80053ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053f2:	d026      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80053f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053f8:	d81c      	bhi.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80053fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053fe:	d010      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8005400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005404:	d816      	bhi.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d01d      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800540a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800540e:	d111      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3304      	adds	r3, #4
 8005414:	2100      	movs	r1, #0
 8005416:	4618      	mov	r0, r3
 8005418:	f001 f9e6 	bl	80067e8 <RCCEx_PLL2_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005420:	e012      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3324      	adds	r3, #36	; 0x24
 8005426:	2102      	movs	r1, #2
 8005428:	4618      	mov	r0, r3
 800542a:	f001 fa8f 	bl	800694c <RCCEx_PLL3_Config>
 800542e:	4603      	mov	r3, r0
 8005430:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005432:	e009      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	75fb      	strb	r3, [r7, #23]
      break;
 8005438:	e006      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800543a:	bf00      	nop
 800543c:	e004      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800543e:	bf00      	nop
 8005440:	e002      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005442:	bf00      	nop
 8005444:	e000      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005446:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005448:	7dfb      	ldrb	r3, [r7, #23]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800544e:	4b60      	ldr	r3, [pc, #384]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005452:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800545c:	495c      	ldr	r1, [pc, #368]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800545e:	4313      	orrs	r3, r2
 8005460:	658b      	str	r3, [r1, #88]	; 0x58
 8005462:	e001      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005464:	7dfb      	ldrb	r3, [r7, #23]
 8005466:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b00      	cmp	r3, #0
 8005472:	d018      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800547c:	d10a      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	3324      	adds	r3, #36	; 0x24
 8005482:	2102      	movs	r1, #2
 8005484:	4618      	mov	r0, r3
 8005486:	f001 fa61 	bl	800694c <RCCEx_PLL3_Config>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005494:	4b4e      	ldr	r3, [pc, #312]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005498:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054a0:	494b      	ldr	r1, [pc, #300]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01a      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054bc:	d10a      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3324      	adds	r3, #36	; 0x24
 80054c2:	2102      	movs	r1, #2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 fa41 	bl	800694c <RCCEx_PLL3_Config>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054d4:	4b3e      	ldr	r3, [pc, #248]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80054d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e2:	493b      	ldr	r1, [pc, #236]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d034      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054fe:	d01d      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005504:	d817      	bhi.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800550a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550e:	d009      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005510:	e011      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3304      	adds	r3, #4
 8005516:	2100      	movs	r1, #0
 8005518:	4618      	mov	r0, r3
 800551a:	f001 f965 	bl	80067e8 <RCCEx_PLL2_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005522:	e00c      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3324      	adds	r3, #36	; 0x24
 8005528:	2102      	movs	r1, #2
 800552a:	4618      	mov	r0, r3
 800552c:	f001 fa0e 	bl	800694c <RCCEx_PLL3_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005534:	e003      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	75fb      	strb	r3, [r7, #23]
      break;
 800553a:	e000      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800553c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800553e:	7dfb      	ldrb	r3, [r7, #23]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10a      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005544:	4b22      	ldr	r3, [pc, #136]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005548:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005552:	491f      	ldr	r1, [pc, #124]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005554:	4313      	orrs	r3, r2
 8005556:	658b      	str	r3, [r1, #88]	; 0x58
 8005558:	e001      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555a:	7dfb      	ldrb	r3, [r7, #23]
 800555c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d036      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005570:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005574:	d01c      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005576:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800557a:	d816      	bhi.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800557c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005580:	d003      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005582:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005586:	d007      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8005588:	e00f      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800558a:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	4a10      	ldr	r2, [pc, #64]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005594:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005596:	e00c      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3324      	adds	r3, #36	; 0x24
 800559c:	2101      	movs	r1, #1
 800559e:	4618      	mov	r0, r3
 80055a0:	f001 f9d4 	bl	800694c <RCCEx_PLL3_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80055a8:	e003      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	75fb      	strb	r3, [r7, #23]
      break;
 80055ae:	e000      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80055b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055b2:	7dfb      	ldrb	r3, [r7, #23]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10d      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80055ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c6:	4902      	ldr	r1, [pc, #8]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	654b      	str	r3, [r1, #84]	; 0x54
 80055cc:	e004      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80055ce:	bf00      	nop
 80055d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
 80055d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d029      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80055ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f0:	d007      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80055f2:	e00f      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f4:	4b61      	ldr	r3, [pc, #388]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	4a60      	ldr	r2, [pc, #384]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80055fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005600:	e00b      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3304      	adds	r3, #4
 8005606:	2102      	movs	r1, #2
 8005608:	4618      	mov	r0, r3
 800560a:	f001 f8ed 	bl	80067e8 <RCCEx_PLL2_Config>
 800560e:	4603      	mov	r3, r0
 8005610:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005612:	e002      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	75fb      	strb	r3, [r7, #23]
      break;
 8005618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d109      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005620:	4b56      	ldr	r3, [pc, #344]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005624:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800562c:	4953      	ldr	r1, [pc, #332]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800562e:	4313      	orrs	r3, r2
 8005630:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005632:	e001      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005634:	7dfb      	ldrb	r3, [r7, #23]
 8005636:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00a      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3324      	adds	r3, #36	; 0x24
 8005648:	2102      	movs	r1, #2
 800564a:	4618      	mov	r0, r3
 800564c:	f001 f97e 	bl	800694c <RCCEx_PLL3_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d030      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800566a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800566e:	d017      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005674:	d811      	bhi.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800567a:	d013      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800567c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005680:	d80b      	bhi.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d010      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8005686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568a:	d106      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800568c:	4b3b      	ldr	r3, [pc, #236]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	4a3a      	ldr	r2, [pc, #232]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005696:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005698:	e007      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	75fb      	strb	r3, [r7, #23]
      break;
 800569e:	e004      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80056a0:	bf00      	nop
 80056a2:	e002      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80056a4:	bf00      	nop
 80056a6:	e000      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80056a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d109      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056b0:	4b32      	ldr	r3, [pc, #200]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80056b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056bc:	492f      	ldr	r1, [pc, #188]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	654b      	str	r3, [r1, #84]	; 0x54
 80056c2:	e001      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c4:	7dfb      	ldrb	r3, [r7, #23]
 80056c6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d008      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056d4:	4b29      	ldr	r3, [pc, #164]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80056d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e0:	4926      	ldr	r1, [pc, #152]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d008      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056f2:	4b22      	ldr	r3, [pc, #136]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80056f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056fe:	491f      	ldr	r1, [pc, #124]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005700:	4313      	orrs	r3, r2
 8005702:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00d      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005710:	4b1a      	ldr	r3, [pc, #104]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	4a19      	ldr	r2, [pc, #100]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005716:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800571a:	6113      	str	r3, [r2, #16]
 800571c:	4b17      	ldr	r3, [pc, #92]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005726:	4915      	ldr	r1, [pc, #84]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005728:	4313      	orrs	r3, r2
 800572a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	da08      	bge.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005734:	4b11      	ldr	r3, [pc, #68]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005738:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005740:	490e      	ldr	r1, [pc, #56]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005742:	4313      	orrs	r3, r2
 8005744:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005752:	4b0a      	ldr	r3, [pc, #40]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005760:	4906      	ldr	r1, [pc, #24]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005762:	4313      	orrs	r3, r2
 8005764:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005766:	7dbb      	ldrb	r3, [r7, #22]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	e000      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	58024400 	.word	0x58024400

08005780 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b090      	sub	sp, #64	; 0x40
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800578e:	f040 8089 	bne.w	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005792:	4b95      	ldr	r3, [pc, #596]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	633b      	str	r3, [r7, #48]	; 0x30
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d87d      	bhi.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80057a2:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057bd 	.word	0x080057bd
 80057ac:	080057e1 	.word	0x080057e1
 80057b0:	08005805 	.word	0x08005805
 80057b4:	08005899 	.word	0x08005899
 80057b8:	08005829 	.word	0x08005829

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057bc:	4b8a      	ldr	r3, [pc, #552]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057c8:	d107      	bne.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 feb8 	bl	8006544 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057d8:	e3ed      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057de:	e3ea      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057e0:	4b81      	ldr	r3, [pc, #516]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ec:	d107      	bne.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ee:	f107 0318 	add.w	r3, r7, #24
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fbfe 	bl	8005ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057fc:	e3db      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80057fe:	2300      	movs	r3, #0
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005802:	e3d8      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005804:	4b78      	ldr	r3, [pc, #480]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800580c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005810:	d107      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005812:	f107 030c 	add.w	r3, r7, #12
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fd40 	bl	800629c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005820:	e3c9      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005826:	e3c6      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005828:	4b6f      	ldr	r3, [pc, #444]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800582a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005830:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005832:	4b6d      	ldr	r3, [pc, #436]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b04      	cmp	r3, #4
 800583c:	d10c      	bne.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005840:	2b00      	cmp	r3, #0
 8005842:	d109      	bne.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005844:	4b68      	ldr	r3, [pc, #416]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	08db      	lsrs	r3, r3, #3
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	4a67      	ldr	r2, [pc, #412]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8005850:	fa22 f303 	lsr.w	r3, r2, r3
 8005854:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005856:	e01e      	b.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005858:	4b63      	ldr	r3, [pc, #396]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005864:	d106      	bne.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800586c:	d102      	bne.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800586e:	4b60      	ldr	r3, [pc, #384]	; (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005872:	e010      	b.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005874:	4b5c      	ldr	r3, [pc, #368]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005880:	d106      	bne.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005888:	d102      	bne.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800588a:	4b5a      	ldr	r3, [pc, #360]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800588c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800588e:	e002      	b.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005894:	e38f      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005896:	e38e      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005898:	4b57      	ldr	r3, [pc, #348]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800589c:	e38b      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800589e:	2300      	movs	r3, #0
 80058a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058a2:	e388      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058aa:	f040 80a7 	bne.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80058ae:	4b4e      	ldr	r3, [pc, #312]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80058b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80058b6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058be:	d054      	beq.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058c6:	f200 808b 	bhi.w	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80058d0:	f000 8083 	beq.w	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80058da:	f200 8081 	bhi.w	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058e4:	d02f      	beq.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ec:	d878      	bhi.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058fa:	d012      	beq.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80058fc:	e070      	b.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058fe:	4b3a      	ldr	r3, [pc, #232]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005906:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800590a:	d107      	bne.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800590c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fe17 	bl	8006544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800591a:	e34c      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005920:	e349      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005922:	4b31      	ldr	r3, [pc, #196]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800592a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800592e:	d107      	bne.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005930:	f107 0318 	add.w	r3, r7, #24
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fb5d 	bl	8005ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800593e:	e33a      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005944:	e337      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005946:	4b28      	ldr	r3, [pc, #160]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800594e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005952:	d107      	bne.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005954:	f107 030c 	add.w	r3, r7, #12
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fc9f 	bl	800629c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005962:	e328      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005968:	e325      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800596a:	4b1f      	ldr	r3, [pc, #124]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800596c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800596e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005972:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005974:	4b1c      	ldr	r3, [pc, #112]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b04      	cmp	r3, #4
 800597e:	d10c      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8005980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005986:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	08db      	lsrs	r3, r3, #3
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	4a16      	ldr	r2, [pc, #88]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8005992:	fa22 f303 	lsr.w	r3, r2, r3
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005998:	e01e      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800599a:	4b13      	ldr	r3, [pc, #76]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a6:	d106      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80059a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ae:	d102      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80059b0:	4b0f      	ldr	r3, [pc, #60]	; (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80059b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059b4:	e010      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059b6:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059c2:	d106      	bne.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80059c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ca:	d102      	bne.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80059cc:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80059ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d0:	e002      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80059d6:	e2ee      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80059d8:	e2ed      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80059da:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059de:	e2ea      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059e4:	e2e7      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80059e6:	bf00      	nop
 80059e8:	58024400 	.word	0x58024400
 80059ec:	03d09000 	.word	0x03d09000
 80059f0:	003d0900 	.word	0x003d0900
 80059f4:	007a1200 	.word	0x007a1200
 80059f8:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a02:	f040 809c 	bne.w	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005a06:	4b9e      	ldr	r3, [pc, #632]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005a0e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a16:	d054      	beq.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a1e:	f200 808b 	bhi.w	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a28:	f000 8083 	beq.w	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a32:	f200 8081 	bhi.w	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a3c:	d02f      	beq.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a44:	d878      	bhi.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d004      	beq.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a52:	d012      	beq.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005a54:	e070      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a56:	4b8a      	ldr	r3, [pc, #552]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a62:	d107      	bne.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fd6b 	bl	8006544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a72:	e2a0      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005a74:	2300      	movs	r3, #0
 8005a76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a78:	e29d      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a7a:	4b81      	ldr	r3, [pc, #516]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a86:	d107      	bne.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a88:	f107 0318 	add.w	r3, r7, #24
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fab1 	bl	8005ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005a96:	e28e      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a9c:	e28b      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a9e:	4b78      	ldr	r3, [pc, #480]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aaa:	d107      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005aac:	f107 030c 	add.w	r3, r7, #12
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 fbf3 	bl	800629c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005aba:	e27c      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005abc:	2300      	movs	r3, #0
 8005abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ac0:	e279      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005ac2:	4b6f      	ldr	r3, [pc, #444]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005aca:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005acc:	4b6c      	ldr	r3, [pc, #432]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d10c      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ade:	4b68      	ldr	r3, [pc, #416]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	08db      	lsrs	r3, r3, #3
 8005ae4:	f003 0303 	and.w	r3, r3, #3
 8005ae8:	4a66      	ldr	r2, [pc, #408]	; (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005aea:	fa22 f303 	lsr.w	r3, r2, r3
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af0:	e01e      	b.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005af2:	4b63      	ldr	r3, [pc, #396]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005afe:	d106      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8005b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b06:	d102      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005b08:	4b5f      	ldr	r3, [pc, #380]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b0c:	e010      	b.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b0e:	4b5c      	ldr	r3, [pc, #368]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b1a:	d106      	bne.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b22:	d102      	bne.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005b24:	4b59      	ldr	r3, [pc, #356]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b28:	e002      	b.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005b2e:	e242      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005b30:	e241      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b32:	4b57      	ldr	r3, [pc, #348]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005b34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b36:	e23e      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b3c:	e23b      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b44:	f040 80a6 	bne.w	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005b48:	4b4d      	ldr	r3, [pc, #308]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005b50:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b58:	d054      	beq.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b60:	f200 808b 	bhi.w	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b6a:	f000 8083 	beq.w	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b74:	f200 8081 	bhi.w	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b7e:	d02f      	beq.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8005b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b86:	d878      	bhi.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d004      	beq.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b94:	d012      	beq.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8005b96:	e070      	b.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b98:	4b39      	ldr	r3, [pc, #228]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ba4:	d107      	bne.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fcca 	bl	8006544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005bb4:	e1ff      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bba:	e1fc      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bbc:	4b30      	ldr	r3, [pc, #192]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bc8:	d107      	bne.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bca:	f107 0318 	add.w	r3, r7, #24
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fa10 	bl	8005ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005bd8:	e1ed      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bde:	e1ea      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005be0:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bec:	d107      	bne.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bee:	f107 030c 	add.w	r3, r7, #12
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fb52 	bl	800629c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005bfc:	e1db      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c02:	e1d8      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c04:	4b1e      	ldr	r3, [pc, #120]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c0c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c0e:	4b1c      	ldr	r3, [pc, #112]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d10c      	bne.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d109      	bne.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c20:	4b17      	ldr	r3, [pc, #92]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	08db      	lsrs	r3, r3, #3
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	4a16      	ldr	r2, [pc, #88]	; (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c32:	e01e      	b.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c34:	4b12      	ldr	r3, [pc, #72]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c40:	d106      	bne.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c48:	d102      	bne.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005c4a:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c4e:	e010      	b.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c50:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c5c:	d106      	bne.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c64:	d102      	bne.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005c66:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c6a:	e002      	b.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005c70:	e1a1      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005c72:	e1a0      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c74:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005c76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c78:	e19d      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c7e:	e19a      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005c80:	58024400 	.word	0x58024400
 8005c84:	03d09000 	.word	0x03d09000
 8005c88:	003d0900 	.word	0x003d0900
 8005c8c:	007a1200 	.word	0x007a1200
 8005c90:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c9a:	d173      	bne.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005c9c:	4b9a      	ldr	r3, [pc, #616]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ca4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cac:	d02f      	beq.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb4:	d863      	bhi.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc2:	d012      	beq.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8005cc4:	e05b      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cc6:	4b90      	ldr	r3, [pc, #576]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cd2:	d107      	bne.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cd4:	f107 0318 	add.w	r3, r7, #24
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 f98b 	bl	8005ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ce2:	e168      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ce8:	e165      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cea:	4b87      	ldr	r3, [pc, #540]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf6:	d107      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cf8:	f107 030c 	add.w	r3, r7, #12
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 facd 	bl	800629c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d06:	e156      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d0c:	e153      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d0e:	4b7e      	ldr	r3, [pc, #504]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d16:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d18:	4b7b      	ldr	r3, [pc, #492]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d10c      	bne.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8005d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d109      	bne.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d2a:	4b77      	ldr	r3, [pc, #476]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	08db      	lsrs	r3, r3, #3
 8005d30:	f003 0303 	and.w	r3, r3, #3
 8005d34:	4a75      	ldr	r2, [pc, #468]	; (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005d36:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d3c:	e01e      	b.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d3e:	4b72      	ldr	r3, [pc, #456]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d4a:	d106      	bne.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8005d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d52:	d102      	bne.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005d54:	4b6e      	ldr	r3, [pc, #440]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d58:	e010      	b.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d5a:	4b6b      	ldr	r3, [pc, #428]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d66:	d106      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8005d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d6e:	d102      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005d70:	4b68      	ldr	r3, [pc, #416]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d74:	e002      	b.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005d7a:	e11c      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005d7c:	e11b      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d82:	e118      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d8a:	d133      	bne.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005d8c:	4b5e      	ldr	r3, [pc, #376]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d94:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d004      	beq.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da2:	d012      	beq.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8005da4:	e023      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005da6:	4b58      	ldr	r3, [pc, #352]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005db2:	d107      	bne.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fbc3 	bl	8006544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005dc2:	e0f8      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dc8:	e0f5      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005dca:	4b4f      	ldr	r3, [pc, #316]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dd6:	d107      	bne.n	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dd8:	f107 0318 	add.w	r3, r7, #24
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 f909 	bl	8005ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005de6:	e0e6      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dec:	e0e3      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005dee:	2300      	movs	r3, #0
 8005df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005df2:	e0e0      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dfa:	f040 808d 	bne.w	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005dfe:	4b42      	ldr	r3, [pc, #264]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e02:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005e06:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e0e:	d06b      	beq.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8005e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e16:	d874      	bhi.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1e:	d056      	beq.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e26:	d86c      	bhi.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e2e:	d03b      	beq.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8005e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e36:	d864      	bhi.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e3e:	d021      	beq.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e46:	d85c      	bhi.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d004      	beq.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e54:	d004      	beq.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005e56:	e054      	b.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005e58:	f000 f8b6 	bl	8005fc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e5c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005e5e:	e0aa      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e60:	4b29      	ldr	r3, [pc, #164]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e6c:	d107      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e6e:	f107 0318 	add.w	r3, r7, #24
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 f8be 	bl	8005ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e7c:	e09b      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e82:	e098      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e84:	4b20      	ldr	r3, [pc, #128]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e90:	d107      	bne.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e92:	f107 030c 	add.w	r3, r7, #12
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 fa00 	bl	800629c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ea0:	e089      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ea6:	e086      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ea8:	4b17      	ldr	r3, [pc, #92]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d109      	bne.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005eb4:	4b14      	ldr	r3, [pc, #80]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	08db      	lsrs	r3, r3, #3
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	4a13      	ldr	r2, [pc, #76]	; (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ec6:	e076      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ecc:	e073      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ece:	4b0e      	ldr	r3, [pc, #56]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eda:	d102      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8005edc:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005ede:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ee0:	e069      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ee6:	e066      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ee8:	4b07      	ldr	r3, [pc, #28]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ef4:	d102      	bne.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8005ef6:	4b07      	ldr	r3, [pc, #28]	; (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005efa:	e05c      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f00:	e059      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f06:	e056      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005f08:	58024400 	.word	0x58024400
 8005f0c:	03d09000 	.word	0x03d09000
 8005f10:	003d0900 	.word	0x003d0900
 8005f14:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f1e:	d148      	bne.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005f20:	4b27      	ldr	r3, [pc, #156]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f28:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f30:	d02a      	beq.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f38:	d838      	bhi.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f46:	d00d      	beq.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8005f48:	e030      	b.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f4a:	4b1d      	ldr	r3, [pc, #116]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f56:	d102      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8005f58:	4b1a      	ldr	r3, [pc, #104]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f5c:	e02b      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f62:	e028      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f64:	4b16      	ldr	r3, [pc, #88]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f70:	d107      	bne.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fae4 	bl	8006544 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f80:	e019      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f86:	e016      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f88:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f94:	d107      	bne.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f96:	f107 0318 	add.w	r3, r7, #24
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f82a 	bl	8005ff4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005fa4:	e007      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005faa:	e004      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fb0:	e001      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3740      	adds	r7, #64	; 0x40
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	58024400 	.word	0x58024400
 8005fc4:	007a1200 	.word	0x007a1200

08005fc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005fcc:	f7fe fc82 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	4b06      	ldr	r3, [pc, #24]	; (8005fec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	091b      	lsrs	r3, r3, #4
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	4904      	ldr	r1, [pc, #16]	; (8005ff0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005fde:	5ccb      	ldrb	r3, [r1, r3]
 8005fe0:	f003 031f 	and.w	r3, r3, #31
 8005fe4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	58024400 	.word	0x58024400
 8005ff0:	08008adc 	.word	0x08008adc

08005ff4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b089      	sub	sp, #36	; 0x24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ffc:	4ba1      	ldr	r3, [pc, #644]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006000:	f003 0303 	and.w	r3, r3, #3
 8006004:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006006:	4b9f      	ldr	r3, [pc, #636]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	0b1b      	lsrs	r3, r3, #12
 800600c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006010:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006012:	4b9c      	ldr	r3, [pc, #624]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006016:	091b      	lsrs	r3, r3, #4
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800601e:	4b99      	ldr	r3, [pc, #612]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006022:	08db      	lsrs	r3, r3, #3
 8006024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	fb02 f303 	mul.w	r3, r2, r3
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006036:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8111 	beq.w	8006264 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	2b02      	cmp	r3, #2
 8006046:	f000 8083 	beq.w	8006150 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b02      	cmp	r3, #2
 800604e:	f200 80a1 	bhi.w	8006194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d056      	beq.n	800610c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800605e:	e099      	b.n	8006194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006060:	4b88      	ldr	r3, [pc, #544]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0320 	and.w	r3, r3, #32
 8006068:	2b00      	cmp	r3, #0
 800606a:	d02d      	beq.n	80060c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800606c:	4b85      	ldr	r3, [pc, #532]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	08db      	lsrs	r3, r3, #3
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	4a84      	ldr	r2, [pc, #528]	; (8006288 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
 800607c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006096:	4b7b      	ldr	r3, [pc, #492]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800628c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80060c6:	e087      	b.n	80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006290 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80060d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060da:	4b6a      	ldr	r3, [pc, #424]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800628c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006106:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800610a:	e065      	b.n	80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006116:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800611a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800611e:	4b59      	ldr	r3, [pc, #356]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800612e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006132:	eddf 5a56 	vldr	s11, [pc, #344]	; 800628c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800613a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800613e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800614e:	e043      	b.n	80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800615e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006162:	4b48      	ldr	r3, [pc, #288]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616a:	ee07 3a90 	vmov	s15, r3
 800616e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006172:	ed97 6a03 	vldr	s12, [r7, #12]
 8006176:	eddf 5a45 	vldr	s11, [pc, #276]	; 800628c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800617a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800617e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800618a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006192:	e021      	b.n	80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a6:	4b37      	ldr	r3, [pc, #220]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800628c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80061d8:	4b2a      	ldr	r3, [pc, #168]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	0a5b      	lsrs	r3, r3, #9
 80061de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80061f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061fe:	ee17 2a90 	vmov	r2, s15
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006206:	4b1f      	ldr	r3, [pc, #124]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	0c1b      	lsrs	r3, r3, #16
 800620c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006210:	ee07 3a90 	vmov	s15, r3
 8006214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006218:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800621c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006220:	edd7 6a07 	vldr	s13, [r7, #28]
 8006224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800622c:	ee17 2a90 	vmov	r2, s15
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006234:	4b13      	ldr	r3, [pc, #76]	; (8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	0e1b      	lsrs	r3, r3, #24
 800623a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800624a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800624e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800625a:	ee17 2a90 	vmov	r2, s15
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006262:	e008      	b.n	8006276 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	609a      	str	r2, [r3, #8]
}
 8006276:	bf00      	nop
 8006278:	3724      	adds	r7, #36	; 0x24
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	58024400 	.word	0x58024400
 8006288:	03d09000 	.word	0x03d09000
 800628c:	46000000 	.word	0x46000000
 8006290:	4c742400 	.word	0x4c742400
 8006294:	4a742400 	.word	0x4a742400
 8006298:	4af42400 	.word	0x4af42400

0800629c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800629c:	b480      	push	{r7}
 800629e:	b089      	sub	sp, #36	; 0x24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062a4:	4ba1      	ldr	r3, [pc, #644]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80062ae:	4b9f      	ldr	r3, [pc, #636]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	0d1b      	lsrs	r3, r3, #20
 80062b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80062ba:	4b9c      	ldr	r3, [pc, #624]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	0a1b      	lsrs	r3, r3, #8
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80062c6:	4b99      	ldr	r3, [pc, #612]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ca:	08db      	lsrs	r3, r3, #3
 80062cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	fb02 f303 	mul.w	r3, r2, r3
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 8111 	beq.w	800650c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	f000 8083 	beq.w	80063f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	f200 80a1 	bhi.w	800643c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d056      	beq.n	80063b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006306:	e099      	b.n	800643c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006308:	4b88      	ldr	r3, [pc, #544]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b00      	cmp	r3, #0
 8006312:	d02d      	beq.n	8006370 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006314:	4b85      	ldr	r3, [pc, #532]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	08db      	lsrs	r3, r3, #3
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	4a84      	ldr	r2, [pc, #528]	; (8006530 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006320:	fa22 f303 	lsr.w	r3, r2, r3
 8006324:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	ee07 3a90 	vmov	s15, r3
 800632c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800633e:	4b7b      	ldr	r3, [pc, #492]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006346:	ee07 3a90 	vmov	s15, r3
 800634a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800634e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006352:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800635a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800635e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800636e:	e087      	b.n	8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	ee07 3a90 	vmov	s15, r3
 8006376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006538 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800637e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006382:	4b6a      	ldr	r3, [pc, #424]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006392:	ed97 6a03 	vldr	s12, [r7, #12]
 8006396:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800639a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800639e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063b2:	e065      	b.n	8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800653c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c6:	4b59      	ldr	r3, [pc, #356]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ce:	ee07 3a90 	vmov	s15, r3
 80063d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063f6:	e043      	b.n	8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006402:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800640a:	4b48      	ldr	r3, [pc, #288]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006412:	ee07 3a90 	vmov	s15, r3
 8006416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800641a:	ed97 6a03 	vldr	s12, [r7, #12]
 800641e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800642a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800642e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800643a:	e021      	b.n	8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	ee07 3a90 	vmov	s15, r3
 8006442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006446:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800653c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800644a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800644e:	4b37      	ldr	r3, [pc, #220]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006456:	ee07 3a90 	vmov	s15, r3
 800645a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800645e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006462:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800646a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800646e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800647a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800647e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006480:	4b2a      	ldr	r3, [pc, #168]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	0a5b      	lsrs	r3, r3, #9
 8006486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800648a:	ee07 3a90 	vmov	s15, r3
 800648e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800649a:	edd7 6a07 	vldr	s13, [r7, #28]
 800649e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064a6:	ee17 2a90 	vmov	r2, s15
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80064ae:	4b1f      	ldr	r3, [pc, #124]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	0c1b      	lsrs	r3, r3, #16
 80064b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b8:	ee07 3a90 	vmov	s15, r3
 80064bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80064cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064d4:	ee17 2a90 	vmov	r2, s15
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80064dc:	4b13      	ldr	r3, [pc, #76]	; (800652c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e0:	0e1b      	lsrs	r3, r3, #24
 80064e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e6:	ee07 3a90 	vmov	s15, r3
 80064ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80064fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006502:	ee17 2a90 	vmov	r2, s15
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800650a:	e008      	b.n	800651e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	609a      	str	r2, [r3, #8]
}
 800651e:	bf00      	nop
 8006520:	3724      	adds	r7, #36	; 0x24
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	58024400 	.word	0x58024400
 8006530:	03d09000 	.word	0x03d09000
 8006534:	46000000 	.word	0x46000000
 8006538:	4c742400 	.word	0x4c742400
 800653c:	4a742400 	.word	0x4a742400
 8006540:	4af42400 	.word	0x4af42400

08006544 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006544:	b480      	push	{r7}
 8006546:	b089      	sub	sp, #36	; 0x24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800654c:	4ba0      	ldr	r3, [pc, #640]	; (80067d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800654e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006550:	f003 0303 	and.w	r3, r3, #3
 8006554:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006556:	4b9e      	ldr	r3, [pc, #632]	; (80067d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655a:	091b      	lsrs	r3, r3, #4
 800655c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006560:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006562:	4b9b      	ldr	r3, [pc, #620]	; (80067d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800656c:	4b98      	ldr	r3, [pc, #608]	; (80067d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800656e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006570:	08db      	lsrs	r3, r3, #3
 8006572:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	fb02 f303 	mul.w	r3, r2, r3
 800657c:	ee07 3a90 	vmov	s15, r3
 8006580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006584:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8111 	beq.w	80067b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2b02      	cmp	r3, #2
 8006594:	f000 8083 	beq.w	800669e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	2b02      	cmp	r3, #2
 800659c:	f200 80a1 	bhi.w	80066e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d056      	beq.n	800665a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80065ac:	e099      	b.n	80066e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ae:	4b88      	ldr	r3, [pc, #544]	; (80067d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d02d      	beq.n	8006616 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065ba:	4b85      	ldr	r3, [pc, #532]	; (80067d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	08db      	lsrs	r3, r3, #3
 80065c0:	f003 0303 	and.w	r3, r3, #3
 80065c4:	4a83      	ldr	r2, [pc, #524]	; (80067d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80065c6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ca:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	ee07 3a90 	vmov	s15, r3
 80065d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	ee07 3a90 	vmov	s15, r3
 80065dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065e4:	4b7a      	ldr	r3, [pc, #488]	; (80067d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ec:	ee07 3a90 	vmov	s15, r3
 80065f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80065f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800660c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006610:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006614:	e087      	b.n	8006726 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	ee07 3a90 	vmov	s15, r3
 800661c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006620:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80067dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006628:	4b69      	ldr	r3, [pc, #420]	; (80067d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006630:	ee07 3a90 	vmov	s15, r3
 8006634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006638:	ed97 6a03 	vldr	s12, [r7, #12]
 800663c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006648:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800664c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006654:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006658:	e065      	b.n	8006726 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	ee07 3a90 	vmov	s15, r3
 8006660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006664:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80067e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800666c:	4b58      	ldr	r3, [pc, #352]	; (80067d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800666e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006674:	ee07 3a90 	vmov	s15, r3
 8006678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800667c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006680:	eddf 5a55 	vldr	s11, [pc, #340]	; 80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800668c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006698:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800669c:	e043      	b.n	8006726 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	ee07 3a90 	vmov	s15, r3
 80066a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80067e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80066ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b0:	4b47      	ldr	r3, [pc, #284]	; (80067d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b8:	ee07 3a90 	vmov	s15, r3
 80066bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80066c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066e0:	e021      	b.n	8006726 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	ee07 3a90 	vmov	s15, r3
 80066e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80067dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80066f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066f4:	4b36      	ldr	r3, [pc, #216]	; (80067d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066fc:	ee07 3a90 	vmov	s15, r3
 8006700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006704:	ed97 6a03 	vldr	s12, [r7, #12]
 8006708:	eddf 5a33 	vldr	s11, [pc, #204]	; 80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800670c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006714:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800671c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006720:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006724:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006726:	4b2a      	ldr	r3, [pc, #168]	; (80067d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	0a5b      	lsrs	r3, r3, #9
 800672c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006730:	ee07 3a90 	vmov	s15, r3
 8006734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800673c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006740:	edd7 6a07 	vldr	s13, [r7, #28]
 8006744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800674c:	ee17 2a90 	vmov	r2, s15
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006754:	4b1e      	ldr	r3, [pc, #120]	; (80067d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	0c1b      	lsrs	r3, r3, #16
 800675a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006766:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800676a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800676e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800677a:	ee17 2a90 	vmov	r2, s15
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006782:	4b13      	ldr	r3, [pc, #76]	; (80067d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	0e1b      	lsrs	r3, r3, #24
 8006788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800678c:	ee07 3a90 	vmov	s15, r3
 8006790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006794:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006798:	ee37 7a87 	vadd.f32	s14, s15, s14
 800679c:	edd7 6a07 	vldr	s13, [r7, #28]
 80067a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067a8:	ee17 2a90 	vmov	r2, s15
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80067b0:	e008      	b.n	80067c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	609a      	str	r2, [r3, #8]
}
 80067c4:	bf00      	nop
 80067c6:	3724      	adds	r7, #36	; 0x24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	58024400 	.word	0x58024400
 80067d4:	03d09000 	.word	0x03d09000
 80067d8:	46000000 	.word	0x46000000
 80067dc:	4c742400 	.word	0x4c742400
 80067e0:	4a742400 	.word	0x4a742400
 80067e4:	4af42400 	.word	0x4af42400

080067e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067f6:	4b53      	ldr	r3, [pc, #332]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 80067f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d101      	bne.n	8006806 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e099      	b.n	800693a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006806:	4b4f      	ldr	r3, [pc, #316]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a4e      	ldr	r2, [pc, #312]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 800680c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006812:	f7fa fef9 	bl	8001608 <HAL_GetTick>
 8006816:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006818:	e008      	b.n	800682c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800681a:	f7fa fef5 	bl	8001608 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e086      	b.n	800693a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800682c:	4b45      	ldr	r3, [pc, #276]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1f0      	bne.n	800681a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006838:	4b42      	ldr	r3, [pc, #264]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 800683a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	031b      	lsls	r3, r3, #12
 8006846:	493f      	ldr	r1, [pc, #252]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 8006848:	4313      	orrs	r3, r2
 800684a:	628b      	str	r3, [r1, #40]	; 0x28
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	3b01      	subs	r3, #1
 8006852:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	3b01      	subs	r3, #1
 800685c:	025b      	lsls	r3, r3, #9
 800685e:	b29b      	uxth	r3, r3
 8006860:	431a      	orrs	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	3b01      	subs	r3, #1
 8006868:	041b      	lsls	r3, r3, #16
 800686a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	3b01      	subs	r3, #1
 8006876:	061b      	lsls	r3, r3, #24
 8006878:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800687c:	4931      	ldr	r1, [pc, #196]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 800687e:	4313      	orrs	r3, r2
 8006880:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006882:	4b30      	ldr	r3, [pc, #192]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	492d      	ldr	r1, [pc, #180]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 8006890:	4313      	orrs	r3, r2
 8006892:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006894:	4b2b      	ldr	r3, [pc, #172]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	f023 0220 	bic.w	r2, r3, #32
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	4928      	ldr	r1, [pc, #160]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80068a6:	4b27      	ldr	r3, [pc, #156]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068aa:	4a26      	ldr	r2, [pc, #152]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068ac:	f023 0310 	bic.w	r3, r3, #16
 80068b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80068b2:	4b24      	ldr	r3, [pc, #144]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068b6:	4b24      	ldr	r3, [pc, #144]	; (8006948 <RCCEx_PLL2_Config+0x160>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	69d2      	ldr	r2, [r2, #28]
 80068be:	00d2      	lsls	r2, r2, #3
 80068c0:	4920      	ldr	r1, [pc, #128]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80068c6:	4b1f      	ldr	r3, [pc, #124]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ca:	4a1e      	ldr	r2, [pc, #120]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068cc:	f043 0310 	orr.w	r3, r3, #16
 80068d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d106      	bne.n	80068e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80068d8:	4b1a      	ldr	r3, [pc, #104]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	4a19      	ldr	r2, [pc, #100]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068e4:	e00f      	b.n	8006906 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d106      	bne.n	80068fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80068ec:	4b15      	ldr	r3, [pc, #84]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	4a14      	ldr	r2, [pc, #80]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068f8:	e005      	b.n	8006906 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80068fa:	4b12      	ldr	r3, [pc, #72]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fe:	4a11      	ldr	r2, [pc, #68]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 8006900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006904:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006906:	4b0f      	ldr	r3, [pc, #60]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a0e      	ldr	r2, [pc, #56]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 800690c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006912:	f7fa fe79 	bl	8001608 <HAL_GetTick>
 8006916:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006918:	e008      	b.n	800692c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800691a:	f7fa fe75 	bl	8001608 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d901      	bls.n	800692c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e006      	b.n	800693a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800692c:	4b05      	ldr	r3, [pc, #20]	; (8006944 <RCCEx_PLL2_Config+0x15c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0f0      	beq.n	800691a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006938:	7bfb      	ldrb	r3, [r7, #15]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	58024400 	.word	0x58024400
 8006948:	ffff0007 	.word	0xffff0007

0800694c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800695a:	4b53      	ldr	r3, [pc, #332]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	2b03      	cmp	r3, #3
 8006964:	d101      	bne.n	800696a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e099      	b.n	8006a9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800696a:	4b4f      	ldr	r3, [pc, #316]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a4e      	ldr	r2, [pc, #312]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006974:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006976:	f7fa fe47 	bl	8001608 <HAL_GetTick>
 800697a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800697c:	e008      	b.n	8006990 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800697e:	f7fa fe43 	bl	8001608 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d901      	bls.n	8006990 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e086      	b.n	8006a9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006990:	4b45      	ldr	r3, [pc, #276]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1f0      	bne.n	800697e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800699c:	4b42      	ldr	r3, [pc, #264]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 800699e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	051b      	lsls	r3, r3, #20
 80069aa:	493f      	ldr	r1, [pc, #252]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	628b      	str	r3, [r1, #40]	; 0x28
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	3b01      	subs	r3, #1
 80069b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	3b01      	subs	r3, #1
 80069c0:	025b      	lsls	r3, r3, #9
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	041b      	lsls	r3, r3, #16
 80069ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	3b01      	subs	r3, #1
 80069da:	061b      	lsls	r3, r3, #24
 80069dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80069e0:	4931      	ldr	r1, [pc, #196]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80069e6:	4b30      	ldr	r3, [pc, #192]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	492d      	ldr	r1, [pc, #180]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80069f8:	4b2b      	ldr	r3, [pc, #172]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	4928      	ldr	r1, [pc, #160]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006a0a:	4b27      	ldr	r3, [pc, #156]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0e:	4a26      	ldr	r2, [pc, #152]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a16:	4b24      	ldr	r3, [pc, #144]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a1a:	4b24      	ldr	r3, [pc, #144]	; (8006aac <RCCEx_PLL3_Config+0x160>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	69d2      	ldr	r2, [r2, #28]
 8006a22:	00d2      	lsls	r2, r2, #3
 8006a24:	4920      	ldr	r1, [pc, #128]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006a2a:	4b1f      	ldr	r3, [pc, #124]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2e:	4a1e      	ldr	r2, [pc, #120]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d106      	bne.n	8006a4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a3c:	4b1a      	ldr	r3, [pc, #104]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a40:	4a19      	ldr	r2, [pc, #100]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a48:	e00f      	b.n	8006a6a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d106      	bne.n	8006a5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a50:	4b15      	ldr	r3, [pc, #84]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	4a14      	ldr	r2, [pc, #80]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a5c:	e005      	b.n	8006a6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a5e:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	4a11      	ldr	r2, [pc, #68]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a6a:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a0e      	ldr	r2, [pc, #56]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a76:	f7fa fdc7 	bl	8001608 <HAL_GetTick>
 8006a7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a7c:	e008      	b.n	8006a90 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006a7e:	f7fa fdc3 	bl	8001608 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e006      	b.n	8006a9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a90:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0f0      	beq.n	8006a7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	58024400 	.word	0x58024400
 8006aac:	ffff0007 	.word	0xffff0007

08006ab0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e0eb      	b.n	8006c9e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a75      	ldr	r2, [pc, #468]	; (8006ca8 <HAL_SPI_Init+0x1f8>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00f      	beq.n	8006af6 <HAL_SPI_Init+0x46>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a74      	ldr	r2, [pc, #464]	; (8006cac <HAL_SPI_Init+0x1fc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00a      	beq.n	8006af6 <HAL_SPI_Init+0x46>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a72      	ldr	r2, [pc, #456]	; (8006cb0 <HAL_SPI_Init+0x200>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d005      	beq.n	8006af6 <HAL_SPI_Init+0x46>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	2b0f      	cmp	r3, #15
 8006af0:	d901      	bls.n	8006af6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e0d3      	b.n	8006c9e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fc96 	bl	8007428 <SPI_GetPacketSize>
 8006afc:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a69      	ldr	r2, [pc, #420]	; (8006ca8 <HAL_SPI_Init+0x1f8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d00c      	beq.n	8006b22 <HAL_SPI_Init+0x72>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a67      	ldr	r2, [pc, #412]	; (8006cac <HAL_SPI_Init+0x1fc>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d007      	beq.n	8006b22 <HAL_SPI_Init+0x72>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a66      	ldr	r2, [pc, #408]	; (8006cb0 <HAL_SPI_Init+0x200>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d002      	beq.n	8006b22 <HAL_SPI_Init+0x72>
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b08      	cmp	r3, #8
 8006b20:	d811      	bhi.n	8006b46 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006b26:	4a60      	ldr	r2, [pc, #384]	; (8006ca8 <HAL_SPI_Init+0x1f8>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d009      	beq.n	8006b40 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a5e      	ldr	r2, [pc, #376]	; (8006cac <HAL_SPI_Init+0x1fc>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d004      	beq.n	8006b40 <HAL_SPI_Init+0x90>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a5d      	ldr	r2, [pc, #372]	; (8006cb0 <HAL_SPI_Init+0x200>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d104      	bne.n	8006b4a <HAL_SPI_Init+0x9a>
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b10      	cmp	r3, #16
 8006b44:	d901      	bls.n	8006b4a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e0a9      	b.n	8006c9e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fa fac2 	bl	80010e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0201 	bic.w	r2, r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b84:	d119      	bne.n	8006bba <HAL_SPI_Init+0x10a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b8e:	d103      	bne.n	8006b98 <HAL_SPI_Init+0xe8>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d008      	beq.n	8006baa <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10c      	bne.n	8006bba <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ba8:	d107      	bne.n	8006bba <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bb8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	69da      	ldr	r2, [r3, #28]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bcc:	ea42 0103 	orr.w	r1, r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	431a      	orrs	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c1a:	ea42 0103 	orr.w	r1, r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d113      	bne.n	8006c5a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c44:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c58:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0201 	bic.w	r2, r2, #1
 8006c68:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	40013000 	.word	0x40013000
 8006cac:	40003800 	.word	0x40003800
 8006cb0:	40003c00 	.word	0x40003c00

08006cb4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08e      	sub	sp, #56	; 0x38
 8006cb8:	af02      	add	r7, sp, #8
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3320      	adds	r3, #32
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3330      	adds	r3, #48	; 0x30
 8006cd6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_SPI_TransmitReceive+0x32>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e2ce      	b.n	8007284 <HAL_SPI_TransmitReceive+0x5d0>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cee:	f7fa fc8b 	bl	8001608 <HAL_GetTick>
 8006cf2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006cf4:	887b      	ldrh	r3, [r7, #2]
 8006cf6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006cf8:	887b      	ldrh	r3, [r7, #2]
 8006cfa:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006d02:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d0a:	7efb      	ldrb	r3, [r7, #27]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d014      	beq.n	8006d3a <HAL_SPI_TransmitReceive+0x86>
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d16:	d106      	bne.n	8006d26 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <HAL_SPI_TransmitReceive+0x72>
 8006d20:	7efb      	ldrb	r3, [r7, #27]
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d009      	beq.n	8006d3a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8006d26:	2302      	movs	r3, #2
 8006d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006d34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d38:	e2a4      	b.n	8007284 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d005      	beq.n	8006d4c <HAL_SPI_TransmitReceive+0x98>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <HAL_SPI_TransmitReceive+0x98>
 8006d46:	887b      	ldrh	r3, [r7, #2]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d109      	bne.n	8006d60 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006d5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d5e:	e291      	b.n	8007284 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d003      	beq.n	8006d74 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2205      	movs	r2, #5
 8006d70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	887a      	ldrh	r2, [r7, #2]
 8006d86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	887a      	ldrh	r2, [r7, #2]
 8006d8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	887a      	ldrh	r2, [r7, #2]
 8006d9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	887a      	ldrh	r2, [r7, #2]
 8006da4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	4b9f      	ldr	r3, [pc, #636]	; (8007038 <HAL_SPI_TransmitReceive+0x384>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	8879      	ldrh	r1, [r7, #2]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006de0:	d107      	bne.n	8006df2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006df0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	2b0f      	cmp	r3, #15
 8006df8:	d970      	bls.n	8006edc <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006dfa:	e068      	b.n	8006ece <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d11a      	bne.n	8006e40 <HAL_SPI_TransmitReceive+0x18c>
 8006e0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d017      	beq.n	8006e40 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6812      	ldr	r2, [r2, #0]
 8006e1a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e20:	1d1a      	adds	r2, r3, #4
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	695a      	ldr	r2, [r3, #20]
 8006e46:	f248 0308 	movw	r3, #32776	; 0x8008
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d01a      	beq.n	8006e86 <HAL_SPI_TransmitReceive+0x1d2>
 8006e50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d017      	beq.n	8006e86 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006e60:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e66:	1d1a      	adds	r2, r3, #4
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e84:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e86:	f7fa fbbf 	bl	8001608 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d803      	bhi.n	8006e9e <HAL_SPI_TransmitReceive+0x1ea>
 8006e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9c:	d102      	bne.n	8006ea4 <HAL_SPI_TransmitReceive+0x1f0>
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d114      	bne.n	8006ece <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 f9f1 	bl	800728c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e1da      	b.n	8007284 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006ece:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d193      	bne.n	8006dfc <HAL_SPI_TransmitReceive+0x148>
 8006ed4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d190      	bne.n	8006dfc <HAL_SPI_TransmitReceive+0x148>
 8006eda:	e1ac      	b.n	8007236 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	2b07      	cmp	r3, #7
 8006ee2:	f240 81a0 	bls.w	8007226 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006ee6:	e0a9      	b.n	800703c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d139      	bne.n	8006f6a <HAL_SPI_TransmitReceive+0x2b6>
 8006ef6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d036      	beq.n	8006f6a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006efc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d91c      	bls.n	8006f3c <HAL_SPI_TransmitReceive+0x288>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d018      	beq.n	8006f3c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6812      	ldr	r2, [r2, #0]
 8006f14:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f1a:	1d1a      	adds	r2, r3, #4
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	3b02      	subs	r3, #2
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006f38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006f3a:	e016      	b.n	8006f6a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f40:	881a      	ldrh	r2, [r3, #0]
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4a:	1c9a      	adds	r2, r3, #2
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006f68:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d03a      	beq.n	8006fee <HAL_SPI_TransmitReceive+0x33a>
 8006f78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d037      	beq.n	8006fee <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d018      	beq.n	8006fbe <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006f96:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f9c:	1d1a      	adds	r2, r3, #4
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b02      	subs	r3, #2
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006fba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006fbc:	e017      	b.n	8006fee <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fc2:	6a3a      	ldr	r2, [r7, #32]
 8006fc4:	8812      	ldrh	r2, [r2, #0]
 8006fc6:	b292      	uxth	r2, r2
 8006fc8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fce:	1c9a      	adds	r2, r3, #2
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006fec:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fee:	f7fa fb0b 	bl	8001608 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d803      	bhi.n	8007006 <HAL_SPI_TransmitReceive+0x352>
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007004:	d102      	bne.n	800700c <HAL_SPI_TransmitReceive+0x358>
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	2b00      	cmp	r3, #0
 800700a:	d117      	bne.n	800703c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f93d 	bl	800728c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007020:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e126      	b.n	8007284 <HAL_SPI_TransmitReceive+0x5d0>
 8007036:	bf00      	nop
 8007038:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800703c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800703e:	2b00      	cmp	r3, #0
 8007040:	f47f af52 	bne.w	8006ee8 <HAL_SPI_TransmitReceive+0x234>
 8007044:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007046:	2b00      	cmp	r3, #0
 8007048:	f47f af4e 	bne.w	8006ee8 <HAL_SPI_TransmitReceive+0x234>
 800704c:	e0f3      	b.n	8007236 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b02      	cmp	r3, #2
 800705a:	d15a      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x45e>
 800705c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800705e:	2b00      	cmp	r3, #0
 8007060:	d057      	beq.n	8007112 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007062:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007064:	2b03      	cmp	r3, #3
 8007066:	d91c      	bls.n	80070a2 <HAL_SPI_TransmitReceive+0x3ee>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706c:	2b40      	cmp	r3, #64	; 0x40
 800706e:	d918      	bls.n	80070a2 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6812      	ldr	r2, [r2, #0]
 800707a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007080:	1d1a      	adds	r2, r3, #4
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800708c:	b29b      	uxth	r3, r3
 800708e:	3b04      	subs	r3, #4
 8007090:	b29a      	uxth	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800709e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80070a0:	e037      	b.n	8007112 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80070a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d91b      	bls.n	80070e0 <HAL_SPI_TransmitReceive+0x42c>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d017      	beq.n	80070e0 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b4:	881a      	ldrh	r2, [r3, #0]
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070be:	1c9a      	adds	r2, r3, #2
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	3b02      	subs	r3, #2
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80070dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80070de:	e018      	b.n	8007112 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3320      	adds	r3, #32
 80070ea:	7812      	ldrb	r2, [r2, #0]
 80070ec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80070fe:	b29b      	uxth	r3, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007110:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d05e      	beq.n	80071de <HAL_SPI_TransmitReceive+0x52a>
 8007120:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d05b      	beq.n	80071de <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d018      	beq.n	8007166 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800713c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800713e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007144:	1d1a      	adds	r2, r3, #4
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b04      	subs	r3, #4
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007162:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007164:	e03b      	b.n	80071de <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8007170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007174:	d918      	bls.n	80071a8 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800717a:	6a3a      	ldr	r2, [r7, #32]
 800717c:	8812      	ldrh	r2, [r2, #0]
 800717e:	b292      	uxth	r2, r2
 8007180:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007186:	1c9a      	adds	r2, r3, #2
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007192:	b29b      	uxth	r3, r3
 8007194:	3b02      	subs	r3, #2
 8007196:	b29a      	uxth	r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80071a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80071a6:	e01a      	b.n	80071de <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071b4:	7812      	ldrb	r2, [r2, #0]
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	3b01      	subs	r3, #1
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80071dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071de:	f7fa fa13 	bl	8001608 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d803      	bhi.n	80071f6 <HAL_SPI_TransmitReceive+0x542>
 80071ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f4:	d102      	bne.n	80071fc <HAL_SPI_TransmitReceive+0x548>
 80071f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d114      	bne.n	8007226 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 f845 	bl	800728c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007210:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e02e      	b.n	8007284 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007226:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007228:	2b00      	cmp	r3, #0
 800722a:	f47f af10 	bne.w	800704e <HAL_SPI_TransmitReceive+0x39a>
 800722e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007230:	2b00      	cmp	r3, #0
 8007232:	f47f af0c 	bne.w	800704e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	2200      	movs	r2, #0
 800723e:	2108      	movs	r1, #8
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 f8c3 	bl	80073cc <SPI_WaitOnFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d007      	beq.n	800725c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007252:	f043 0220 	orr.w	r2, r3, #32
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 f815 	bl	800728c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e001      	b.n	8007284 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8007280:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007284:	4618      	mov	r0, r3
 8007286:	3730      	adds	r7, #48	; 0x30
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0208 	orr.w	r2, r2, #8
 80072aa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0210 	orr.w	r2, r2, #16
 80072ba:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0201 	bic.w	r2, r2, #1
 80072ca:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6919      	ldr	r1, [r3, #16]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	4b3c      	ldr	r3, [pc, #240]	; (80073c8 <SPI_CloseTransfer+0x13c>)
 80072d8:	400b      	ands	r3, r1
 80072da:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80072ea:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d014      	beq.n	8007322 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00f      	beq.n	8007322 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007308:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	699a      	ldr	r2, [r3, #24]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f042 0220 	orr.w	r2, r2, #32
 8007320:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b03      	cmp	r3, #3
 800732c:	d014      	beq.n	8007358 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00f      	beq.n	8007358 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800733e:	f043 0204 	orr.w	r2, r3, #4
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	699a      	ldr	r2, [r3, #24]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007356:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00f      	beq.n	8007382 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007368:	f043 0201 	orr.w	r2, r3, #1
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	699a      	ldr	r2, [r3, #24]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007380:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00f      	beq.n	80073ac <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007392:	f043 0208 	orr.w	r2, r3, #8
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699a      	ldr	r2, [r3, #24]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073aa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80073bc:	bf00      	nop
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	fffffc90 	.word	0xfffffc90

080073cc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	4613      	mov	r3, r2
 80073da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80073dc:	e010      	b.n	8007400 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073de:	f7fa f913 	bl	8001608 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d803      	bhi.n	80073f6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f4:	d102      	bne.n	80073fc <SPI_WaitOnFlagUntilTimeout+0x30>
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e00f      	b.n	8007420 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	695a      	ldr	r2, [r3, #20]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	4013      	ands	r3, r2
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	429a      	cmp	r2, r3
 800740e:	bf0c      	ite	eq
 8007410:	2301      	moveq	r3, #1
 8007412:	2300      	movne	r3, #0
 8007414:	b2db      	uxtb	r3, r3
 8007416:	461a      	mov	r2, r3
 8007418:	79fb      	ldrb	r3, [r7, #7]
 800741a:	429a      	cmp	r2, r3
 800741c:	d0df      	beq.n	80073de <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007434:	095b      	lsrs	r3, r3, #5
 8007436:	3301      	adds	r3, #1
 8007438:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	3301      	adds	r3, #1
 8007440:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	3307      	adds	r3, #7
 8007446:	08db      	lsrs	r3, r3, #3
 8007448:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007452:	4618      	mov	r0, r3
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
	...

08007460 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e08f      	b.n	8007594 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b00      	cmp	r3, #0
 800747e:	d106      	bne.n	800748e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7f9 feb7 	bl	80011fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2202      	movs	r2, #2
 8007492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6899      	ldr	r1, [r3, #8]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	4b3e      	ldr	r3, [pc, #248]	; (800759c <HAL_TIM_Encoder_Init+0x13c>)
 80074a2:	400b      	ands	r3, r1
 80074a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3304      	adds	r3, #4
 80074ae:	4619      	mov	r1, r3
 80074b0:	4610      	mov	r0, r2
 80074b2:	f000 f87b 	bl	80075ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4b31      	ldr	r3, [pc, #196]	; (80075a0 <HAL_TIM_Encoder_Init+0x140>)
 80074dc:	4013      	ands	r3, r2
 80074de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	689a      	ldr	r2, [r3, #8]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	021b      	lsls	r3, r3, #8
 80074ea:	4313      	orrs	r3, r2
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	4b2b      	ldr	r3, [pc, #172]	; (80075a4 <HAL_TIM_Encoder_Init+0x144>)
 80074f6:	4013      	ands	r3, r2
 80074f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	4b2a      	ldr	r3, [pc, #168]	; (80075a8 <HAL_TIM_Encoder_Init+0x148>)
 80074fe:	4013      	ands	r3, r2
 8007500:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	021b      	lsls	r3, r3, #8
 800750c:	4313      	orrs	r3, r2
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	4313      	orrs	r3, r2
 8007512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	011a      	lsls	r2, r3, #4
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	031b      	lsls	r3, r3, #12
 8007520:	4313      	orrs	r3, r2
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	4313      	orrs	r3, r2
 8007526:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800752e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007536:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	011b      	lsls	r3, r3, #4
 8007542:	4313      	orrs	r3, r2
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	fffebff8 	.word	0xfffebff8
 80075a0:	fffffcfc 	.word	0xfffffcfc
 80075a4:	fffff3f3 	.word	0xfffff3f3
 80075a8:	ffff0f0f 	.word	0xffff0f0f

080075ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a44      	ldr	r2, [pc, #272]	; (80076d0 <TIM_Base_SetConfig+0x124>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d013      	beq.n	80075ec <TIM_Base_SetConfig+0x40>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ca:	d00f      	beq.n	80075ec <TIM_Base_SetConfig+0x40>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a41      	ldr	r2, [pc, #260]	; (80076d4 <TIM_Base_SetConfig+0x128>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d00b      	beq.n	80075ec <TIM_Base_SetConfig+0x40>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a40      	ldr	r2, [pc, #256]	; (80076d8 <TIM_Base_SetConfig+0x12c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d007      	beq.n	80075ec <TIM_Base_SetConfig+0x40>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a3f      	ldr	r2, [pc, #252]	; (80076dc <TIM_Base_SetConfig+0x130>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d003      	beq.n	80075ec <TIM_Base_SetConfig+0x40>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a3e      	ldr	r2, [pc, #248]	; (80076e0 <TIM_Base_SetConfig+0x134>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d108      	bne.n	80075fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a33      	ldr	r2, [pc, #204]	; (80076d0 <TIM_Base_SetConfig+0x124>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d027      	beq.n	8007656 <TIM_Base_SetConfig+0xaa>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800760c:	d023      	beq.n	8007656 <TIM_Base_SetConfig+0xaa>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a30      	ldr	r2, [pc, #192]	; (80076d4 <TIM_Base_SetConfig+0x128>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d01f      	beq.n	8007656 <TIM_Base_SetConfig+0xaa>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a2f      	ldr	r2, [pc, #188]	; (80076d8 <TIM_Base_SetConfig+0x12c>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d01b      	beq.n	8007656 <TIM_Base_SetConfig+0xaa>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a2e      	ldr	r2, [pc, #184]	; (80076dc <TIM_Base_SetConfig+0x130>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d017      	beq.n	8007656 <TIM_Base_SetConfig+0xaa>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a2d      	ldr	r2, [pc, #180]	; (80076e0 <TIM_Base_SetConfig+0x134>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d013      	beq.n	8007656 <TIM_Base_SetConfig+0xaa>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a2c      	ldr	r2, [pc, #176]	; (80076e4 <TIM_Base_SetConfig+0x138>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d00f      	beq.n	8007656 <TIM_Base_SetConfig+0xaa>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a2b      	ldr	r2, [pc, #172]	; (80076e8 <TIM_Base_SetConfig+0x13c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00b      	beq.n	8007656 <TIM_Base_SetConfig+0xaa>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a2a      	ldr	r2, [pc, #168]	; (80076ec <TIM_Base_SetConfig+0x140>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d007      	beq.n	8007656 <TIM_Base_SetConfig+0xaa>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a29      	ldr	r2, [pc, #164]	; (80076f0 <TIM_Base_SetConfig+0x144>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d003      	beq.n	8007656 <TIM_Base_SetConfig+0xaa>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a28      	ldr	r2, [pc, #160]	; (80076f4 <TIM_Base_SetConfig+0x148>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d108      	bne.n	8007668 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800765c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	4313      	orrs	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	689a      	ldr	r2, [r3, #8]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a10      	ldr	r2, [pc, #64]	; (80076d0 <TIM_Base_SetConfig+0x124>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00f      	beq.n	80076b4 <TIM_Base_SetConfig+0x108>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a12      	ldr	r2, [pc, #72]	; (80076e0 <TIM_Base_SetConfig+0x134>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00b      	beq.n	80076b4 <TIM_Base_SetConfig+0x108>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a11      	ldr	r2, [pc, #68]	; (80076e4 <TIM_Base_SetConfig+0x138>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d007      	beq.n	80076b4 <TIM_Base_SetConfig+0x108>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a10      	ldr	r2, [pc, #64]	; (80076e8 <TIM_Base_SetConfig+0x13c>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d003      	beq.n	80076b4 <TIM_Base_SetConfig+0x108>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a0f      	ldr	r2, [pc, #60]	; (80076ec <TIM_Base_SetConfig+0x140>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d103      	bne.n	80076bc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	691a      	ldr	r2, [r3, #16]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	615a      	str	r2, [r3, #20]
}
 80076c2:	bf00      	nop
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	40010000 	.word	0x40010000
 80076d4:	40000400 	.word	0x40000400
 80076d8:	40000800 	.word	0x40000800
 80076dc:	40000c00 	.word	0x40000c00
 80076e0:	40010400 	.word	0x40010400
 80076e4:	40014000 	.word	0x40014000
 80076e8:	40014400 	.word	0x40014400
 80076ec:	40014800 	.word	0x40014800
 80076f0:	4000e000 	.word	0x4000e000
 80076f4:	4000e400 	.word	0x4000e400

080076f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007708:	2b01      	cmp	r3, #1
 800770a:	d101      	bne.n	8007710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800770c:	2302      	movs	r3, #2
 800770e:	e077      	b.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a35      	ldr	r2, [pc, #212]	; (800780c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d004      	beq.n	8007744 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a34      	ldr	r2, [pc, #208]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d108      	bne.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800774a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800775c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	4313      	orrs	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a25      	ldr	r2, [pc, #148]	; (800780c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d02c      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007782:	d027      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a22      	ldr	r2, [pc, #136]	; (8007814 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d022      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a21      	ldr	r2, [pc, #132]	; (8007818 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d01d      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a1f      	ldr	r2, [pc, #124]	; (800781c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d018      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a1a      	ldr	r2, [pc, #104]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d013      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a1b      	ldr	r2, [pc, #108]	; (8007820 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d00e      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a1a      	ldr	r2, [pc, #104]	; (8007824 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d009      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a18      	ldr	r2, [pc, #96]	; (8007828 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d004      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a17      	ldr	r2, [pc, #92]	; (800782c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d10c      	bne.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	40010000 	.word	0x40010000
 8007810:	40010400 	.word	0x40010400
 8007814:	40000400 	.word	0x40000400
 8007818:	40000800 	.word	0x40000800
 800781c:	40000c00 	.word	0x40000c00
 8007820:	40001800 	.word	0x40001800
 8007824:	40014000 	.word	0x40014000
 8007828:	4000e000 	.word	0x4000e000
 800782c:	4000e400 	.word	0x4000e400

08007830 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e042      	b.n	80078c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007848:	2b00      	cmp	r3, #0
 800784a:	d106      	bne.n	800785a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7f9 fd1b 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2224      	movs	r2, #36	; 0x24
 800785e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0201 	bic.w	r2, r2, #1
 8007870:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f82c 	bl	80078d0 <UART_SetConfig>
 8007878:	4603      	mov	r3, r0
 800787a:	2b01      	cmp	r3, #1
 800787c:	d101      	bne.n	8007882 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e022      	b.n	80078c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fe7e 	bl	800858c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800789e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689a      	ldr	r2, [r3, #8]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0201 	orr.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 ff05 	bl	80086d0 <UART_CheckIdleState>
 80078c6:	4603      	mov	r3, r0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078d0:	b5b0      	push	{r4, r5, r7, lr}
 80078d2:	b08e      	sub	sp, #56	; 0x38
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689a      	ldr	r2, [r3, #8]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	431a      	orrs	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	4bbf      	ldr	r3, [pc, #764]	; (8007bfc <UART_SetConfig+0x32c>)
 80078fe:	4013      	ands	r3, r2
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	6812      	ldr	r2, [r2, #0]
 8007904:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007906:	430b      	orrs	r3, r1
 8007908:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4ab5      	ldr	r2, [pc, #724]	; (8007c00 <UART_SetConfig+0x330>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d004      	beq.n	800793a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007936:	4313      	orrs	r3, r2
 8007938:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	4bb0      	ldr	r3, [pc, #704]	; (8007c04 <UART_SetConfig+0x334>)
 8007942:	4013      	ands	r3, r2
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	6812      	ldr	r2, [r2, #0]
 8007948:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800794a:	430b      	orrs	r3, r1
 800794c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007954:	f023 010f 	bic.w	r1, r3, #15
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4aa7      	ldr	r2, [pc, #668]	; (8007c08 <UART_SetConfig+0x338>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d176      	bne.n	8007a5c <UART_SetConfig+0x18c>
 800796e:	4ba7      	ldr	r3, [pc, #668]	; (8007c0c <UART_SetConfig+0x33c>)
 8007970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007972:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007976:	2b28      	cmp	r3, #40	; 0x28
 8007978:	d86c      	bhi.n	8007a54 <UART_SetConfig+0x184>
 800797a:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <UART_SetConfig+0xb0>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	08007a25 	.word	0x08007a25
 8007984:	08007a55 	.word	0x08007a55
 8007988:	08007a55 	.word	0x08007a55
 800798c:	08007a55 	.word	0x08007a55
 8007990:	08007a55 	.word	0x08007a55
 8007994:	08007a55 	.word	0x08007a55
 8007998:	08007a55 	.word	0x08007a55
 800799c:	08007a55 	.word	0x08007a55
 80079a0:	08007a2d 	.word	0x08007a2d
 80079a4:	08007a55 	.word	0x08007a55
 80079a8:	08007a55 	.word	0x08007a55
 80079ac:	08007a55 	.word	0x08007a55
 80079b0:	08007a55 	.word	0x08007a55
 80079b4:	08007a55 	.word	0x08007a55
 80079b8:	08007a55 	.word	0x08007a55
 80079bc:	08007a55 	.word	0x08007a55
 80079c0:	08007a35 	.word	0x08007a35
 80079c4:	08007a55 	.word	0x08007a55
 80079c8:	08007a55 	.word	0x08007a55
 80079cc:	08007a55 	.word	0x08007a55
 80079d0:	08007a55 	.word	0x08007a55
 80079d4:	08007a55 	.word	0x08007a55
 80079d8:	08007a55 	.word	0x08007a55
 80079dc:	08007a55 	.word	0x08007a55
 80079e0:	08007a3d 	.word	0x08007a3d
 80079e4:	08007a55 	.word	0x08007a55
 80079e8:	08007a55 	.word	0x08007a55
 80079ec:	08007a55 	.word	0x08007a55
 80079f0:	08007a55 	.word	0x08007a55
 80079f4:	08007a55 	.word	0x08007a55
 80079f8:	08007a55 	.word	0x08007a55
 80079fc:	08007a55 	.word	0x08007a55
 8007a00:	08007a45 	.word	0x08007a45
 8007a04:	08007a55 	.word	0x08007a55
 8007a08:	08007a55 	.word	0x08007a55
 8007a0c:	08007a55 	.word	0x08007a55
 8007a10:	08007a55 	.word	0x08007a55
 8007a14:	08007a55 	.word	0x08007a55
 8007a18:	08007a55 	.word	0x08007a55
 8007a1c:	08007a55 	.word	0x08007a55
 8007a20:	08007a4d 	.word	0x08007a4d
 8007a24:	2301      	movs	r3, #1
 8007a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a2a:	e326      	b.n	800807a <UART_SetConfig+0x7aa>
 8007a2c:	2304      	movs	r3, #4
 8007a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a32:	e322      	b.n	800807a <UART_SetConfig+0x7aa>
 8007a34:	2308      	movs	r3, #8
 8007a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a3a:	e31e      	b.n	800807a <UART_SetConfig+0x7aa>
 8007a3c:	2310      	movs	r3, #16
 8007a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a42:	e31a      	b.n	800807a <UART_SetConfig+0x7aa>
 8007a44:	2320      	movs	r3, #32
 8007a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a4a:	e316      	b.n	800807a <UART_SetConfig+0x7aa>
 8007a4c:	2340      	movs	r3, #64	; 0x40
 8007a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a52:	e312      	b.n	800807a <UART_SetConfig+0x7aa>
 8007a54:	2380      	movs	r3, #128	; 0x80
 8007a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a5a:	e30e      	b.n	800807a <UART_SetConfig+0x7aa>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a6b      	ldr	r2, [pc, #428]	; (8007c10 <UART_SetConfig+0x340>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d130      	bne.n	8007ac8 <UART_SetConfig+0x1f8>
 8007a66:	4b69      	ldr	r3, [pc, #420]	; (8007c0c <UART_SetConfig+0x33c>)
 8007a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6a:	f003 0307 	and.w	r3, r3, #7
 8007a6e:	2b05      	cmp	r3, #5
 8007a70:	d826      	bhi.n	8007ac0 <UART_SetConfig+0x1f0>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <UART_SetConfig+0x1a8>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007a91 	.word	0x08007a91
 8007a7c:	08007a99 	.word	0x08007a99
 8007a80:	08007aa1 	.word	0x08007aa1
 8007a84:	08007aa9 	.word	0x08007aa9
 8007a88:	08007ab1 	.word	0x08007ab1
 8007a8c:	08007ab9 	.word	0x08007ab9
 8007a90:	2300      	movs	r3, #0
 8007a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a96:	e2f0      	b.n	800807a <UART_SetConfig+0x7aa>
 8007a98:	2304      	movs	r3, #4
 8007a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a9e:	e2ec      	b.n	800807a <UART_SetConfig+0x7aa>
 8007aa0:	2308      	movs	r3, #8
 8007aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aa6:	e2e8      	b.n	800807a <UART_SetConfig+0x7aa>
 8007aa8:	2310      	movs	r3, #16
 8007aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aae:	e2e4      	b.n	800807a <UART_SetConfig+0x7aa>
 8007ab0:	2320      	movs	r3, #32
 8007ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ab6:	e2e0      	b.n	800807a <UART_SetConfig+0x7aa>
 8007ab8:	2340      	movs	r3, #64	; 0x40
 8007aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007abe:	e2dc      	b.n	800807a <UART_SetConfig+0x7aa>
 8007ac0:	2380      	movs	r3, #128	; 0x80
 8007ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ac6:	e2d8      	b.n	800807a <UART_SetConfig+0x7aa>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a51      	ldr	r2, [pc, #324]	; (8007c14 <UART_SetConfig+0x344>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d130      	bne.n	8007b34 <UART_SetConfig+0x264>
 8007ad2:	4b4e      	ldr	r3, [pc, #312]	; (8007c0c <UART_SetConfig+0x33c>)
 8007ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad6:	f003 0307 	and.w	r3, r3, #7
 8007ada:	2b05      	cmp	r3, #5
 8007adc:	d826      	bhi.n	8007b2c <UART_SetConfig+0x25c>
 8007ade:	a201      	add	r2, pc, #4	; (adr r2, 8007ae4 <UART_SetConfig+0x214>)
 8007ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae4:	08007afd 	.word	0x08007afd
 8007ae8:	08007b05 	.word	0x08007b05
 8007aec:	08007b0d 	.word	0x08007b0d
 8007af0:	08007b15 	.word	0x08007b15
 8007af4:	08007b1d 	.word	0x08007b1d
 8007af8:	08007b25 	.word	0x08007b25
 8007afc:	2300      	movs	r3, #0
 8007afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b02:	e2ba      	b.n	800807a <UART_SetConfig+0x7aa>
 8007b04:	2304      	movs	r3, #4
 8007b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b0a:	e2b6      	b.n	800807a <UART_SetConfig+0x7aa>
 8007b0c:	2308      	movs	r3, #8
 8007b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b12:	e2b2      	b.n	800807a <UART_SetConfig+0x7aa>
 8007b14:	2310      	movs	r3, #16
 8007b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b1a:	e2ae      	b.n	800807a <UART_SetConfig+0x7aa>
 8007b1c:	2320      	movs	r3, #32
 8007b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b22:	e2aa      	b.n	800807a <UART_SetConfig+0x7aa>
 8007b24:	2340      	movs	r3, #64	; 0x40
 8007b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b2a:	e2a6      	b.n	800807a <UART_SetConfig+0x7aa>
 8007b2c:	2380      	movs	r3, #128	; 0x80
 8007b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b32:	e2a2      	b.n	800807a <UART_SetConfig+0x7aa>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a37      	ldr	r2, [pc, #220]	; (8007c18 <UART_SetConfig+0x348>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d130      	bne.n	8007ba0 <UART_SetConfig+0x2d0>
 8007b3e:	4b33      	ldr	r3, [pc, #204]	; (8007c0c <UART_SetConfig+0x33c>)
 8007b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	2b05      	cmp	r3, #5
 8007b48:	d826      	bhi.n	8007b98 <UART_SetConfig+0x2c8>
 8007b4a:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <UART_SetConfig+0x280>)
 8007b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b50:	08007b69 	.word	0x08007b69
 8007b54:	08007b71 	.word	0x08007b71
 8007b58:	08007b79 	.word	0x08007b79
 8007b5c:	08007b81 	.word	0x08007b81
 8007b60:	08007b89 	.word	0x08007b89
 8007b64:	08007b91 	.word	0x08007b91
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b6e:	e284      	b.n	800807a <UART_SetConfig+0x7aa>
 8007b70:	2304      	movs	r3, #4
 8007b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b76:	e280      	b.n	800807a <UART_SetConfig+0x7aa>
 8007b78:	2308      	movs	r3, #8
 8007b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b7e:	e27c      	b.n	800807a <UART_SetConfig+0x7aa>
 8007b80:	2310      	movs	r3, #16
 8007b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b86:	e278      	b.n	800807a <UART_SetConfig+0x7aa>
 8007b88:	2320      	movs	r3, #32
 8007b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b8e:	e274      	b.n	800807a <UART_SetConfig+0x7aa>
 8007b90:	2340      	movs	r3, #64	; 0x40
 8007b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b96:	e270      	b.n	800807a <UART_SetConfig+0x7aa>
 8007b98:	2380      	movs	r3, #128	; 0x80
 8007b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b9e:	e26c      	b.n	800807a <UART_SetConfig+0x7aa>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a1d      	ldr	r2, [pc, #116]	; (8007c1c <UART_SetConfig+0x34c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d142      	bne.n	8007c30 <UART_SetConfig+0x360>
 8007baa:	4b18      	ldr	r3, [pc, #96]	; (8007c0c <UART_SetConfig+0x33c>)
 8007bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bae:	f003 0307 	and.w	r3, r3, #7
 8007bb2:	2b05      	cmp	r3, #5
 8007bb4:	d838      	bhi.n	8007c28 <UART_SetConfig+0x358>
 8007bb6:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <UART_SetConfig+0x2ec>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007bd5 	.word	0x08007bd5
 8007bc0:	08007bdd 	.word	0x08007bdd
 8007bc4:	08007be5 	.word	0x08007be5
 8007bc8:	08007bed 	.word	0x08007bed
 8007bcc:	08007bf5 	.word	0x08007bf5
 8007bd0:	08007c21 	.word	0x08007c21
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bda:	e24e      	b.n	800807a <UART_SetConfig+0x7aa>
 8007bdc:	2304      	movs	r3, #4
 8007bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007be2:	e24a      	b.n	800807a <UART_SetConfig+0x7aa>
 8007be4:	2308      	movs	r3, #8
 8007be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bea:	e246      	b.n	800807a <UART_SetConfig+0x7aa>
 8007bec:	2310      	movs	r3, #16
 8007bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bf2:	e242      	b.n	800807a <UART_SetConfig+0x7aa>
 8007bf4:	2320      	movs	r3, #32
 8007bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bfa:	e23e      	b.n	800807a <UART_SetConfig+0x7aa>
 8007bfc:	cfff69f3 	.word	0xcfff69f3
 8007c00:	58000c00 	.word	0x58000c00
 8007c04:	11fff4ff 	.word	0x11fff4ff
 8007c08:	40011000 	.word	0x40011000
 8007c0c:	58024400 	.word	0x58024400
 8007c10:	40004400 	.word	0x40004400
 8007c14:	40004800 	.word	0x40004800
 8007c18:	40004c00 	.word	0x40004c00
 8007c1c:	40005000 	.word	0x40005000
 8007c20:	2340      	movs	r3, #64	; 0x40
 8007c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c26:	e228      	b.n	800807a <UART_SetConfig+0x7aa>
 8007c28:	2380      	movs	r3, #128	; 0x80
 8007c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c2e:	e224      	b.n	800807a <UART_SetConfig+0x7aa>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4ab1      	ldr	r2, [pc, #708]	; (8007efc <UART_SetConfig+0x62c>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d176      	bne.n	8007d28 <UART_SetConfig+0x458>
 8007c3a:	4bb1      	ldr	r3, [pc, #708]	; (8007f00 <UART_SetConfig+0x630>)
 8007c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c42:	2b28      	cmp	r3, #40	; 0x28
 8007c44:	d86c      	bhi.n	8007d20 <UART_SetConfig+0x450>
 8007c46:	a201      	add	r2, pc, #4	; (adr r2, 8007c4c <UART_SetConfig+0x37c>)
 8007c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4c:	08007cf1 	.word	0x08007cf1
 8007c50:	08007d21 	.word	0x08007d21
 8007c54:	08007d21 	.word	0x08007d21
 8007c58:	08007d21 	.word	0x08007d21
 8007c5c:	08007d21 	.word	0x08007d21
 8007c60:	08007d21 	.word	0x08007d21
 8007c64:	08007d21 	.word	0x08007d21
 8007c68:	08007d21 	.word	0x08007d21
 8007c6c:	08007cf9 	.word	0x08007cf9
 8007c70:	08007d21 	.word	0x08007d21
 8007c74:	08007d21 	.word	0x08007d21
 8007c78:	08007d21 	.word	0x08007d21
 8007c7c:	08007d21 	.word	0x08007d21
 8007c80:	08007d21 	.word	0x08007d21
 8007c84:	08007d21 	.word	0x08007d21
 8007c88:	08007d21 	.word	0x08007d21
 8007c8c:	08007d01 	.word	0x08007d01
 8007c90:	08007d21 	.word	0x08007d21
 8007c94:	08007d21 	.word	0x08007d21
 8007c98:	08007d21 	.word	0x08007d21
 8007c9c:	08007d21 	.word	0x08007d21
 8007ca0:	08007d21 	.word	0x08007d21
 8007ca4:	08007d21 	.word	0x08007d21
 8007ca8:	08007d21 	.word	0x08007d21
 8007cac:	08007d09 	.word	0x08007d09
 8007cb0:	08007d21 	.word	0x08007d21
 8007cb4:	08007d21 	.word	0x08007d21
 8007cb8:	08007d21 	.word	0x08007d21
 8007cbc:	08007d21 	.word	0x08007d21
 8007cc0:	08007d21 	.word	0x08007d21
 8007cc4:	08007d21 	.word	0x08007d21
 8007cc8:	08007d21 	.word	0x08007d21
 8007ccc:	08007d11 	.word	0x08007d11
 8007cd0:	08007d21 	.word	0x08007d21
 8007cd4:	08007d21 	.word	0x08007d21
 8007cd8:	08007d21 	.word	0x08007d21
 8007cdc:	08007d21 	.word	0x08007d21
 8007ce0:	08007d21 	.word	0x08007d21
 8007ce4:	08007d21 	.word	0x08007d21
 8007ce8:	08007d21 	.word	0x08007d21
 8007cec:	08007d19 	.word	0x08007d19
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cf6:	e1c0      	b.n	800807a <UART_SetConfig+0x7aa>
 8007cf8:	2304      	movs	r3, #4
 8007cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cfe:	e1bc      	b.n	800807a <UART_SetConfig+0x7aa>
 8007d00:	2308      	movs	r3, #8
 8007d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d06:	e1b8      	b.n	800807a <UART_SetConfig+0x7aa>
 8007d08:	2310      	movs	r3, #16
 8007d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d0e:	e1b4      	b.n	800807a <UART_SetConfig+0x7aa>
 8007d10:	2320      	movs	r3, #32
 8007d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d16:	e1b0      	b.n	800807a <UART_SetConfig+0x7aa>
 8007d18:	2340      	movs	r3, #64	; 0x40
 8007d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d1e:	e1ac      	b.n	800807a <UART_SetConfig+0x7aa>
 8007d20:	2380      	movs	r3, #128	; 0x80
 8007d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d26:	e1a8      	b.n	800807a <UART_SetConfig+0x7aa>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a75      	ldr	r2, [pc, #468]	; (8007f04 <UART_SetConfig+0x634>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d130      	bne.n	8007d94 <UART_SetConfig+0x4c4>
 8007d32:	4b73      	ldr	r3, [pc, #460]	; (8007f00 <UART_SetConfig+0x630>)
 8007d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d36:	f003 0307 	and.w	r3, r3, #7
 8007d3a:	2b05      	cmp	r3, #5
 8007d3c:	d826      	bhi.n	8007d8c <UART_SetConfig+0x4bc>
 8007d3e:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <UART_SetConfig+0x474>)
 8007d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d44:	08007d5d 	.word	0x08007d5d
 8007d48:	08007d65 	.word	0x08007d65
 8007d4c:	08007d6d 	.word	0x08007d6d
 8007d50:	08007d75 	.word	0x08007d75
 8007d54:	08007d7d 	.word	0x08007d7d
 8007d58:	08007d85 	.word	0x08007d85
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d62:	e18a      	b.n	800807a <UART_SetConfig+0x7aa>
 8007d64:	2304      	movs	r3, #4
 8007d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d6a:	e186      	b.n	800807a <UART_SetConfig+0x7aa>
 8007d6c:	2308      	movs	r3, #8
 8007d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d72:	e182      	b.n	800807a <UART_SetConfig+0x7aa>
 8007d74:	2310      	movs	r3, #16
 8007d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d7a:	e17e      	b.n	800807a <UART_SetConfig+0x7aa>
 8007d7c:	2320      	movs	r3, #32
 8007d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d82:	e17a      	b.n	800807a <UART_SetConfig+0x7aa>
 8007d84:	2340      	movs	r3, #64	; 0x40
 8007d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d8a:	e176      	b.n	800807a <UART_SetConfig+0x7aa>
 8007d8c:	2380      	movs	r3, #128	; 0x80
 8007d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d92:	e172      	b.n	800807a <UART_SetConfig+0x7aa>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a5b      	ldr	r2, [pc, #364]	; (8007f08 <UART_SetConfig+0x638>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d130      	bne.n	8007e00 <UART_SetConfig+0x530>
 8007d9e:	4b58      	ldr	r3, [pc, #352]	; (8007f00 <UART_SetConfig+0x630>)
 8007da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	2b05      	cmp	r3, #5
 8007da8:	d826      	bhi.n	8007df8 <UART_SetConfig+0x528>
 8007daa:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <UART_SetConfig+0x4e0>)
 8007dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db0:	08007dc9 	.word	0x08007dc9
 8007db4:	08007dd1 	.word	0x08007dd1
 8007db8:	08007dd9 	.word	0x08007dd9
 8007dbc:	08007de1 	.word	0x08007de1
 8007dc0:	08007de9 	.word	0x08007de9
 8007dc4:	08007df1 	.word	0x08007df1
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dce:	e154      	b.n	800807a <UART_SetConfig+0x7aa>
 8007dd0:	2304      	movs	r3, #4
 8007dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dd6:	e150      	b.n	800807a <UART_SetConfig+0x7aa>
 8007dd8:	2308      	movs	r3, #8
 8007dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dde:	e14c      	b.n	800807a <UART_SetConfig+0x7aa>
 8007de0:	2310      	movs	r3, #16
 8007de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007de6:	e148      	b.n	800807a <UART_SetConfig+0x7aa>
 8007de8:	2320      	movs	r3, #32
 8007dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dee:	e144      	b.n	800807a <UART_SetConfig+0x7aa>
 8007df0:	2340      	movs	r3, #64	; 0x40
 8007df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007df6:	e140      	b.n	800807a <UART_SetConfig+0x7aa>
 8007df8:	2380      	movs	r3, #128	; 0x80
 8007dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dfe:	e13c      	b.n	800807a <UART_SetConfig+0x7aa>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a41      	ldr	r2, [pc, #260]	; (8007f0c <UART_SetConfig+0x63c>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	f040 8082 	bne.w	8007f10 <UART_SetConfig+0x640>
 8007e0c:	4b3c      	ldr	r3, [pc, #240]	; (8007f00 <UART_SetConfig+0x630>)
 8007e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e14:	2b28      	cmp	r3, #40	; 0x28
 8007e16:	d86d      	bhi.n	8007ef4 <UART_SetConfig+0x624>
 8007e18:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <UART_SetConfig+0x550>)
 8007e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1e:	bf00      	nop
 8007e20:	08007ec5 	.word	0x08007ec5
 8007e24:	08007ef5 	.word	0x08007ef5
 8007e28:	08007ef5 	.word	0x08007ef5
 8007e2c:	08007ef5 	.word	0x08007ef5
 8007e30:	08007ef5 	.word	0x08007ef5
 8007e34:	08007ef5 	.word	0x08007ef5
 8007e38:	08007ef5 	.word	0x08007ef5
 8007e3c:	08007ef5 	.word	0x08007ef5
 8007e40:	08007ecd 	.word	0x08007ecd
 8007e44:	08007ef5 	.word	0x08007ef5
 8007e48:	08007ef5 	.word	0x08007ef5
 8007e4c:	08007ef5 	.word	0x08007ef5
 8007e50:	08007ef5 	.word	0x08007ef5
 8007e54:	08007ef5 	.word	0x08007ef5
 8007e58:	08007ef5 	.word	0x08007ef5
 8007e5c:	08007ef5 	.word	0x08007ef5
 8007e60:	08007ed5 	.word	0x08007ed5
 8007e64:	08007ef5 	.word	0x08007ef5
 8007e68:	08007ef5 	.word	0x08007ef5
 8007e6c:	08007ef5 	.word	0x08007ef5
 8007e70:	08007ef5 	.word	0x08007ef5
 8007e74:	08007ef5 	.word	0x08007ef5
 8007e78:	08007ef5 	.word	0x08007ef5
 8007e7c:	08007ef5 	.word	0x08007ef5
 8007e80:	08007edd 	.word	0x08007edd
 8007e84:	08007ef5 	.word	0x08007ef5
 8007e88:	08007ef5 	.word	0x08007ef5
 8007e8c:	08007ef5 	.word	0x08007ef5
 8007e90:	08007ef5 	.word	0x08007ef5
 8007e94:	08007ef5 	.word	0x08007ef5
 8007e98:	08007ef5 	.word	0x08007ef5
 8007e9c:	08007ef5 	.word	0x08007ef5
 8007ea0:	08007ee5 	.word	0x08007ee5
 8007ea4:	08007ef5 	.word	0x08007ef5
 8007ea8:	08007ef5 	.word	0x08007ef5
 8007eac:	08007ef5 	.word	0x08007ef5
 8007eb0:	08007ef5 	.word	0x08007ef5
 8007eb4:	08007ef5 	.word	0x08007ef5
 8007eb8:	08007ef5 	.word	0x08007ef5
 8007ebc:	08007ef5 	.word	0x08007ef5
 8007ec0:	08007eed 	.word	0x08007eed
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eca:	e0d6      	b.n	800807a <UART_SetConfig+0x7aa>
 8007ecc:	2304      	movs	r3, #4
 8007ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ed2:	e0d2      	b.n	800807a <UART_SetConfig+0x7aa>
 8007ed4:	2308      	movs	r3, #8
 8007ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eda:	e0ce      	b.n	800807a <UART_SetConfig+0x7aa>
 8007edc:	2310      	movs	r3, #16
 8007ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ee2:	e0ca      	b.n	800807a <UART_SetConfig+0x7aa>
 8007ee4:	2320      	movs	r3, #32
 8007ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eea:	e0c6      	b.n	800807a <UART_SetConfig+0x7aa>
 8007eec:	2340      	movs	r3, #64	; 0x40
 8007eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ef2:	e0c2      	b.n	800807a <UART_SetConfig+0x7aa>
 8007ef4:	2380      	movs	r3, #128	; 0x80
 8007ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007efa:	e0be      	b.n	800807a <UART_SetConfig+0x7aa>
 8007efc:	40011400 	.word	0x40011400
 8007f00:	58024400 	.word	0x58024400
 8007f04:	40007800 	.word	0x40007800
 8007f08:	40007c00 	.word	0x40007c00
 8007f0c:	40011800 	.word	0x40011800
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4aad      	ldr	r2, [pc, #692]	; (80081cc <UART_SetConfig+0x8fc>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d176      	bne.n	8008008 <UART_SetConfig+0x738>
 8007f1a:	4bad      	ldr	r3, [pc, #692]	; (80081d0 <UART_SetConfig+0x900>)
 8007f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f22:	2b28      	cmp	r3, #40	; 0x28
 8007f24:	d86c      	bhi.n	8008000 <UART_SetConfig+0x730>
 8007f26:	a201      	add	r2, pc, #4	; (adr r2, 8007f2c <UART_SetConfig+0x65c>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007fd1 	.word	0x08007fd1
 8007f30:	08008001 	.word	0x08008001
 8007f34:	08008001 	.word	0x08008001
 8007f38:	08008001 	.word	0x08008001
 8007f3c:	08008001 	.word	0x08008001
 8007f40:	08008001 	.word	0x08008001
 8007f44:	08008001 	.word	0x08008001
 8007f48:	08008001 	.word	0x08008001
 8007f4c:	08007fd9 	.word	0x08007fd9
 8007f50:	08008001 	.word	0x08008001
 8007f54:	08008001 	.word	0x08008001
 8007f58:	08008001 	.word	0x08008001
 8007f5c:	08008001 	.word	0x08008001
 8007f60:	08008001 	.word	0x08008001
 8007f64:	08008001 	.word	0x08008001
 8007f68:	08008001 	.word	0x08008001
 8007f6c:	08007fe1 	.word	0x08007fe1
 8007f70:	08008001 	.word	0x08008001
 8007f74:	08008001 	.word	0x08008001
 8007f78:	08008001 	.word	0x08008001
 8007f7c:	08008001 	.word	0x08008001
 8007f80:	08008001 	.word	0x08008001
 8007f84:	08008001 	.word	0x08008001
 8007f88:	08008001 	.word	0x08008001
 8007f8c:	08007fe9 	.word	0x08007fe9
 8007f90:	08008001 	.word	0x08008001
 8007f94:	08008001 	.word	0x08008001
 8007f98:	08008001 	.word	0x08008001
 8007f9c:	08008001 	.word	0x08008001
 8007fa0:	08008001 	.word	0x08008001
 8007fa4:	08008001 	.word	0x08008001
 8007fa8:	08008001 	.word	0x08008001
 8007fac:	08007ff1 	.word	0x08007ff1
 8007fb0:	08008001 	.word	0x08008001
 8007fb4:	08008001 	.word	0x08008001
 8007fb8:	08008001 	.word	0x08008001
 8007fbc:	08008001 	.word	0x08008001
 8007fc0:	08008001 	.word	0x08008001
 8007fc4:	08008001 	.word	0x08008001
 8007fc8:	08008001 	.word	0x08008001
 8007fcc:	08007ff9 	.word	0x08007ff9
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fd6:	e050      	b.n	800807a <UART_SetConfig+0x7aa>
 8007fd8:	2304      	movs	r3, #4
 8007fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fde:	e04c      	b.n	800807a <UART_SetConfig+0x7aa>
 8007fe0:	2308      	movs	r3, #8
 8007fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fe6:	e048      	b.n	800807a <UART_SetConfig+0x7aa>
 8007fe8:	2310      	movs	r3, #16
 8007fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fee:	e044      	b.n	800807a <UART_SetConfig+0x7aa>
 8007ff0:	2320      	movs	r3, #32
 8007ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ff6:	e040      	b.n	800807a <UART_SetConfig+0x7aa>
 8007ff8:	2340      	movs	r3, #64	; 0x40
 8007ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ffe:	e03c      	b.n	800807a <UART_SetConfig+0x7aa>
 8008000:	2380      	movs	r3, #128	; 0x80
 8008002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008006:	e038      	b.n	800807a <UART_SetConfig+0x7aa>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a71      	ldr	r2, [pc, #452]	; (80081d4 <UART_SetConfig+0x904>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d130      	bne.n	8008074 <UART_SetConfig+0x7a4>
 8008012:	4b6f      	ldr	r3, [pc, #444]	; (80081d0 <UART_SetConfig+0x900>)
 8008014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	2b05      	cmp	r3, #5
 800801c:	d826      	bhi.n	800806c <UART_SetConfig+0x79c>
 800801e:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <UART_SetConfig+0x754>)
 8008020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008024:	0800803d 	.word	0x0800803d
 8008028:	08008045 	.word	0x08008045
 800802c:	0800804d 	.word	0x0800804d
 8008030:	08008055 	.word	0x08008055
 8008034:	0800805d 	.word	0x0800805d
 8008038:	08008065 	.word	0x08008065
 800803c:	2302      	movs	r3, #2
 800803e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008042:	e01a      	b.n	800807a <UART_SetConfig+0x7aa>
 8008044:	2304      	movs	r3, #4
 8008046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800804a:	e016      	b.n	800807a <UART_SetConfig+0x7aa>
 800804c:	2308      	movs	r3, #8
 800804e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008052:	e012      	b.n	800807a <UART_SetConfig+0x7aa>
 8008054:	2310      	movs	r3, #16
 8008056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800805a:	e00e      	b.n	800807a <UART_SetConfig+0x7aa>
 800805c:	2320      	movs	r3, #32
 800805e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008062:	e00a      	b.n	800807a <UART_SetConfig+0x7aa>
 8008064:	2340      	movs	r3, #64	; 0x40
 8008066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800806a:	e006      	b.n	800807a <UART_SetConfig+0x7aa>
 800806c:	2380      	movs	r3, #128	; 0x80
 800806e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008072:	e002      	b.n	800807a <UART_SetConfig+0x7aa>
 8008074:	2380      	movs	r3, #128	; 0x80
 8008076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a55      	ldr	r2, [pc, #340]	; (80081d4 <UART_SetConfig+0x904>)
 8008080:	4293      	cmp	r3, r2
 8008082:	f040 80f0 	bne.w	8008266 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008086:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800808a:	2b20      	cmp	r3, #32
 800808c:	dc46      	bgt.n	800811c <UART_SetConfig+0x84c>
 800808e:	2b02      	cmp	r3, #2
 8008090:	db75      	blt.n	800817e <UART_SetConfig+0x8ae>
 8008092:	3b02      	subs	r3, #2
 8008094:	2b1e      	cmp	r3, #30
 8008096:	d872      	bhi.n	800817e <UART_SetConfig+0x8ae>
 8008098:	a201      	add	r2, pc, #4	; (adr r2, 80080a0 <UART_SetConfig+0x7d0>)
 800809a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809e:	bf00      	nop
 80080a0:	08008123 	.word	0x08008123
 80080a4:	0800817f 	.word	0x0800817f
 80080a8:	0800812b 	.word	0x0800812b
 80080ac:	0800817f 	.word	0x0800817f
 80080b0:	0800817f 	.word	0x0800817f
 80080b4:	0800817f 	.word	0x0800817f
 80080b8:	0800813b 	.word	0x0800813b
 80080bc:	0800817f 	.word	0x0800817f
 80080c0:	0800817f 	.word	0x0800817f
 80080c4:	0800817f 	.word	0x0800817f
 80080c8:	0800817f 	.word	0x0800817f
 80080cc:	0800817f 	.word	0x0800817f
 80080d0:	0800817f 	.word	0x0800817f
 80080d4:	0800817f 	.word	0x0800817f
 80080d8:	0800814b 	.word	0x0800814b
 80080dc:	0800817f 	.word	0x0800817f
 80080e0:	0800817f 	.word	0x0800817f
 80080e4:	0800817f 	.word	0x0800817f
 80080e8:	0800817f 	.word	0x0800817f
 80080ec:	0800817f 	.word	0x0800817f
 80080f0:	0800817f 	.word	0x0800817f
 80080f4:	0800817f 	.word	0x0800817f
 80080f8:	0800817f 	.word	0x0800817f
 80080fc:	0800817f 	.word	0x0800817f
 8008100:	0800817f 	.word	0x0800817f
 8008104:	0800817f 	.word	0x0800817f
 8008108:	0800817f 	.word	0x0800817f
 800810c:	0800817f 	.word	0x0800817f
 8008110:	0800817f 	.word	0x0800817f
 8008114:	0800817f 	.word	0x0800817f
 8008118:	08008171 	.word	0x08008171
 800811c:	2b40      	cmp	r3, #64	; 0x40
 800811e:	d02a      	beq.n	8008176 <UART_SetConfig+0x8a6>
 8008120:	e02d      	b.n	800817e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008122:	f7fd ff51 	bl	8005fc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008126:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008128:	e02f      	b.n	800818a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800812a:	f107 0314 	add.w	r3, r7, #20
 800812e:	4618      	mov	r0, r3
 8008130:	f7fd ff60 	bl	8005ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008138:	e027      	b.n	800818a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800813a:	f107 0308 	add.w	r3, r7, #8
 800813e:	4618      	mov	r0, r3
 8008140:	f7fe f8ac 	bl	800629c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008148:	e01f      	b.n	800818a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800814a:	4b21      	ldr	r3, [pc, #132]	; (80081d0 <UART_SetConfig+0x900>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d009      	beq.n	800816a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008156:	4b1e      	ldr	r3, [pc, #120]	; (80081d0 <UART_SetConfig+0x900>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	08db      	lsrs	r3, r3, #3
 800815c:	f003 0303 	and.w	r3, r3, #3
 8008160:	4a1d      	ldr	r2, [pc, #116]	; (80081d8 <UART_SetConfig+0x908>)
 8008162:	fa22 f303 	lsr.w	r3, r2, r3
 8008166:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008168:	e00f      	b.n	800818a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800816a:	4b1b      	ldr	r3, [pc, #108]	; (80081d8 <UART_SetConfig+0x908>)
 800816c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800816e:	e00c      	b.n	800818a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008170:	4b1a      	ldr	r3, [pc, #104]	; (80081dc <UART_SetConfig+0x90c>)
 8008172:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008174:	e009      	b.n	800818a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800817a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800817c:	e005      	b.n	800818a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008188:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800818a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 81e6 	beq.w	800855e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008196:	4a12      	ldr	r2, [pc, #72]	; (80081e0 <UART_SetConfig+0x910>)
 8008198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800819c:	461a      	mov	r2, r3
 800819e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80081a4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	4613      	mov	r3, r2
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	4413      	add	r3, r2
 80081b0:	6a3a      	ldr	r2, [r7, #32]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d305      	bcc.n	80081c2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081bc:	6a3a      	ldr	r2, [r7, #32]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d910      	bls.n	80081e4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80081c8:	e1c9      	b.n	800855e <UART_SetConfig+0xc8e>
 80081ca:	bf00      	nop
 80081cc:	40011c00 	.word	0x40011c00
 80081d0:	58024400 	.word	0x58024400
 80081d4:	58000c00 	.word	0x58000c00
 80081d8:	03d09000 	.word	0x03d09000
 80081dc:	003d0900 	.word	0x003d0900
 80081e0:	08008aec 	.word	0x08008aec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e6:	4618      	mov	r0, r3
 80081e8:	f04f 0100 	mov.w	r1, #0
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	4ac1      	ldr	r2, [pc, #772]	; (80084f8 <UART_SetConfig+0xc28>)
 80081f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	f04f 0300 	mov.w	r3, #0
 80081fc:	f7f8 f886 	bl	800030c <__aeabi_uldivmod>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	4610      	mov	r0, r2
 8008206:	4619      	mov	r1, r3
 8008208:	f04f 0200 	mov.w	r2, #0
 800820c:	f04f 0300 	mov.w	r3, #0
 8008210:	020b      	lsls	r3, r1, #8
 8008212:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008216:	0202      	lsls	r2, r0, #8
 8008218:	6879      	ldr	r1, [r7, #4]
 800821a:	6849      	ldr	r1, [r1, #4]
 800821c:	0849      	lsrs	r1, r1, #1
 800821e:	4608      	mov	r0, r1
 8008220:	f04f 0100 	mov.w	r1, #0
 8008224:	1814      	adds	r4, r2, r0
 8008226:	eb43 0501 	adc.w	r5, r3, r1
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	461a      	mov	r2, r3
 8008230:	f04f 0300 	mov.w	r3, #0
 8008234:	4620      	mov	r0, r4
 8008236:	4629      	mov	r1, r5
 8008238:	f7f8 f868 	bl	800030c <__aeabi_uldivmod>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4613      	mov	r3, r2
 8008242:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800824a:	d308      	bcc.n	800825e <UART_SetConfig+0x98e>
 800824c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008252:	d204      	bcs.n	800825e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800825a:	60da      	str	r2, [r3, #12]
 800825c:	e17f      	b.n	800855e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008264:	e17b      	b.n	800855e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800826e:	f040 80be 	bne.w	80083ee <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 8008272:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008276:	2b20      	cmp	r3, #32
 8008278:	dc48      	bgt.n	800830c <UART_SetConfig+0xa3c>
 800827a:	2b00      	cmp	r3, #0
 800827c:	db7b      	blt.n	8008376 <UART_SetConfig+0xaa6>
 800827e:	2b20      	cmp	r3, #32
 8008280:	d879      	bhi.n	8008376 <UART_SetConfig+0xaa6>
 8008282:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <UART_SetConfig+0x9b8>)
 8008284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008288:	08008313 	.word	0x08008313
 800828c:	0800831b 	.word	0x0800831b
 8008290:	08008377 	.word	0x08008377
 8008294:	08008377 	.word	0x08008377
 8008298:	08008323 	.word	0x08008323
 800829c:	08008377 	.word	0x08008377
 80082a0:	08008377 	.word	0x08008377
 80082a4:	08008377 	.word	0x08008377
 80082a8:	08008333 	.word	0x08008333
 80082ac:	08008377 	.word	0x08008377
 80082b0:	08008377 	.word	0x08008377
 80082b4:	08008377 	.word	0x08008377
 80082b8:	08008377 	.word	0x08008377
 80082bc:	08008377 	.word	0x08008377
 80082c0:	08008377 	.word	0x08008377
 80082c4:	08008377 	.word	0x08008377
 80082c8:	08008343 	.word	0x08008343
 80082cc:	08008377 	.word	0x08008377
 80082d0:	08008377 	.word	0x08008377
 80082d4:	08008377 	.word	0x08008377
 80082d8:	08008377 	.word	0x08008377
 80082dc:	08008377 	.word	0x08008377
 80082e0:	08008377 	.word	0x08008377
 80082e4:	08008377 	.word	0x08008377
 80082e8:	08008377 	.word	0x08008377
 80082ec:	08008377 	.word	0x08008377
 80082f0:	08008377 	.word	0x08008377
 80082f4:	08008377 	.word	0x08008377
 80082f8:	08008377 	.word	0x08008377
 80082fc:	08008377 	.word	0x08008377
 8008300:	08008377 	.word	0x08008377
 8008304:	08008377 	.word	0x08008377
 8008308:	08008369 	.word	0x08008369
 800830c:	2b40      	cmp	r3, #64	; 0x40
 800830e:	d02e      	beq.n	800836e <UART_SetConfig+0xa9e>
 8008310:	e031      	b.n	8008376 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008312:	f7fc fb0f 	bl	8004934 <HAL_RCC_GetPCLK1Freq>
 8008316:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008318:	e033      	b.n	8008382 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800831a:	f7fc fb21 	bl	8004960 <HAL_RCC_GetPCLK2Freq>
 800831e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008320:	e02f      	b.n	8008382 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008322:	f107 0314 	add.w	r3, r7, #20
 8008326:	4618      	mov	r0, r3
 8008328:	f7fd fe64 	bl	8005ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008330:	e027      	b.n	8008382 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008332:	f107 0308 	add.w	r3, r7, #8
 8008336:	4618      	mov	r0, r3
 8008338:	f7fd ffb0 	bl	800629c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008340:	e01f      	b.n	8008382 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008342:	4b6e      	ldr	r3, [pc, #440]	; (80084fc <UART_SetConfig+0xc2c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0320 	and.w	r3, r3, #32
 800834a:	2b00      	cmp	r3, #0
 800834c:	d009      	beq.n	8008362 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800834e:	4b6b      	ldr	r3, [pc, #428]	; (80084fc <UART_SetConfig+0xc2c>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	08db      	lsrs	r3, r3, #3
 8008354:	f003 0303 	and.w	r3, r3, #3
 8008358:	4a69      	ldr	r2, [pc, #420]	; (8008500 <UART_SetConfig+0xc30>)
 800835a:	fa22 f303 	lsr.w	r3, r2, r3
 800835e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008360:	e00f      	b.n	8008382 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8008362:	4b67      	ldr	r3, [pc, #412]	; (8008500 <UART_SetConfig+0xc30>)
 8008364:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008366:	e00c      	b.n	8008382 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008368:	4b66      	ldr	r3, [pc, #408]	; (8008504 <UART_SetConfig+0xc34>)
 800836a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800836c:	e009      	b.n	8008382 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800836e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008372:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008374:	e005      	b.n	8008382 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008380:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 80ea 	beq.w	800855e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	4a5a      	ldr	r2, [pc, #360]	; (80084f8 <UART_SetConfig+0xc28>)
 8008390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008394:	461a      	mov	r2, r3
 8008396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008398:	fbb3 f3f2 	udiv	r3, r3, r2
 800839c:	005a      	lsls	r2, r3, #1
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	085b      	lsrs	r3, r3, #1
 80083a4:	441a      	add	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	2b0f      	cmp	r3, #15
 80083b6:	d916      	bls.n	80083e6 <UART_SetConfig+0xb16>
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083be:	d212      	bcs.n	80083e6 <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f023 030f 	bic.w	r3, r3, #15
 80083c8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083cc:	085b      	lsrs	r3, r3, #1
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	f003 0307 	and.w	r3, r3, #7
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083d8:	4313      	orrs	r3, r2
 80083da:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80083e2:	60da      	str	r2, [r3, #12]
 80083e4:	e0bb      	b.n	800855e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80083ec:	e0b7      	b.n	800855e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80083f2:	2b20      	cmp	r3, #32
 80083f4:	dc4a      	bgt.n	800848c <UART_SetConfig+0xbbc>
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f2c0 8086 	blt.w	8008508 <UART_SetConfig+0xc38>
 80083fc:	2b20      	cmp	r3, #32
 80083fe:	f200 8083 	bhi.w	8008508 <UART_SetConfig+0xc38>
 8008402:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <UART_SetConfig+0xb38>)
 8008404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008408:	08008493 	.word	0x08008493
 800840c:	0800849b 	.word	0x0800849b
 8008410:	08008509 	.word	0x08008509
 8008414:	08008509 	.word	0x08008509
 8008418:	080084a3 	.word	0x080084a3
 800841c:	08008509 	.word	0x08008509
 8008420:	08008509 	.word	0x08008509
 8008424:	08008509 	.word	0x08008509
 8008428:	080084b3 	.word	0x080084b3
 800842c:	08008509 	.word	0x08008509
 8008430:	08008509 	.word	0x08008509
 8008434:	08008509 	.word	0x08008509
 8008438:	08008509 	.word	0x08008509
 800843c:	08008509 	.word	0x08008509
 8008440:	08008509 	.word	0x08008509
 8008444:	08008509 	.word	0x08008509
 8008448:	080084c3 	.word	0x080084c3
 800844c:	08008509 	.word	0x08008509
 8008450:	08008509 	.word	0x08008509
 8008454:	08008509 	.word	0x08008509
 8008458:	08008509 	.word	0x08008509
 800845c:	08008509 	.word	0x08008509
 8008460:	08008509 	.word	0x08008509
 8008464:	08008509 	.word	0x08008509
 8008468:	08008509 	.word	0x08008509
 800846c:	08008509 	.word	0x08008509
 8008470:	08008509 	.word	0x08008509
 8008474:	08008509 	.word	0x08008509
 8008478:	08008509 	.word	0x08008509
 800847c:	08008509 	.word	0x08008509
 8008480:	08008509 	.word	0x08008509
 8008484:	08008509 	.word	0x08008509
 8008488:	080084e9 	.word	0x080084e9
 800848c:	2b40      	cmp	r3, #64	; 0x40
 800848e:	d02e      	beq.n	80084ee <UART_SetConfig+0xc1e>
 8008490:	e03a      	b.n	8008508 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008492:	f7fc fa4f 	bl	8004934 <HAL_RCC_GetPCLK1Freq>
 8008496:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008498:	e03c      	b.n	8008514 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800849a:	f7fc fa61 	bl	8004960 <HAL_RCC_GetPCLK2Freq>
 800849e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80084a0:	e038      	b.n	8008514 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084a2:	f107 0314 	add.w	r3, r7, #20
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fd fda4 	bl	8005ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084b0:	e030      	b.n	8008514 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084b2:	f107 0308 	add.w	r3, r7, #8
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fd fef0 	bl	800629c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084c0:	e028      	b.n	8008514 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084c2:	4b0e      	ldr	r3, [pc, #56]	; (80084fc <UART_SetConfig+0xc2c>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0320 	and.w	r3, r3, #32
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d009      	beq.n	80084e2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80084ce:	4b0b      	ldr	r3, [pc, #44]	; (80084fc <UART_SetConfig+0xc2c>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	08db      	lsrs	r3, r3, #3
 80084d4:	f003 0303 	and.w	r3, r3, #3
 80084d8:	4a09      	ldr	r2, [pc, #36]	; (8008500 <UART_SetConfig+0xc30>)
 80084da:	fa22 f303 	lsr.w	r3, r2, r3
 80084de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80084e0:	e018      	b.n	8008514 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80084e2:	4b07      	ldr	r3, [pc, #28]	; (8008500 <UART_SetConfig+0xc30>)
 80084e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084e6:	e015      	b.n	8008514 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084e8:	4b06      	ldr	r3, [pc, #24]	; (8008504 <UART_SetConfig+0xc34>)
 80084ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084ec:	e012      	b.n	8008514 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084f4:	e00e      	b.n	8008514 <UART_SetConfig+0xc44>
 80084f6:	bf00      	nop
 80084f8:	08008aec 	.word	0x08008aec
 80084fc:	58024400 	.word	0x58024400
 8008500:	03d09000 	.word	0x03d09000
 8008504:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8008508:	2300      	movs	r3, #0
 800850a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008512:	bf00      	nop
    }

    if (pclk != 0U)
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	2b00      	cmp	r3, #0
 8008518:	d021      	beq.n	800855e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	4a1a      	ldr	r2, [pc, #104]	; (8008588 <UART_SetConfig+0xcb8>)
 8008520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008524:	461a      	mov	r2, r3
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	fbb3 f2f2 	udiv	r2, r3, r2
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	085b      	lsrs	r3, r3, #1
 8008532:	441a      	add	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	fbb2 f3f3 	udiv	r3, r2, r3
 800853c:	b29b      	uxth	r3, r3
 800853e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	2b0f      	cmp	r3, #15
 8008544:	d908      	bls.n	8008558 <UART_SetConfig+0xc88>
 8008546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800854c:	d204      	bcs.n	8008558 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008554:	60da      	str	r2, [r3, #12]
 8008556:	e002      	b.n	800855e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800857a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800857e:	4618      	mov	r0, r3
 8008580:	3738      	adds	r7, #56	; 0x38
 8008582:	46bd      	mov	sp, r7
 8008584:	bdb0      	pop	{r4, r5, r7, pc}
 8008586:	bf00      	nop
 8008588:	08008aec 	.word	0x08008aec

0800858c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00a      	beq.n	80085b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	430a      	orrs	r2, r1
 80085d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085dc:	f003 0304 	and.w	r3, r3, #4
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00a      	beq.n	80085fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fe:	f003 0308 	and.w	r3, r3, #8
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	430a      	orrs	r2, r1
 800861a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008620:	f003 0310 	and.w	r3, r3, #16
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00a      	beq.n	800863e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008642:	f003 0320 	and.w	r3, r3, #32
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00a      	beq.n	8008660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	430a      	orrs	r2, r1
 800865e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008668:	2b00      	cmp	r3, #0
 800866a:	d01a      	beq.n	80086a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800868a:	d10a      	bne.n	80086a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00a      	beq.n	80086c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	430a      	orrs	r2, r1
 80086c2:	605a      	str	r2, [r3, #4]
  }
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af02      	add	r7, sp, #8
 80086d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086e0:	f7f8 ff92 	bl	8001608 <HAL_GetTick>
 80086e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0308 	and.w	r3, r3, #8
 80086f0:	2b08      	cmp	r3, #8
 80086f2:	d10e      	bne.n	8008712 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f82f 	bl	8008766 <UART_WaitOnFlagUntilTimeout>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e025      	b.n	800875e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0304 	and.w	r3, r3, #4
 800871c:	2b04      	cmp	r3, #4
 800871e:	d10e      	bne.n	800873e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f819 	bl	8008766 <UART_WaitOnFlagUntilTimeout>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e00f      	b.n	800875e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2220      	movs	r2, #32
 8008742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2220      	movs	r2, #32
 800874a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	603b      	str	r3, [r7, #0]
 8008772:	4613      	mov	r3, r2
 8008774:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008776:	e062      	b.n	800883e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877e:	d05e      	beq.n	800883e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008780:	f7f8 ff42 	bl	8001608 <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	429a      	cmp	r2, r3
 800878e:	d302      	bcc.n	8008796 <UART_WaitOnFlagUntilTimeout+0x30>
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d11d      	bne.n	80087d2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80087a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	689a      	ldr	r2, [r3, #8]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0201 	bic.w	r2, r2, #1
 80087b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2220      	movs	r2, #32
 80087c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e045      	b.n	800885e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d02e      	beq.n	800883e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	69db      	ldr	r3, [r3, #28]
 80087e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ee:	d126      	bne.n	800883e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008808:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 0201 	bic.w	r2, r2, #1
 8008818:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2220      	movs	r2, #32
 800881e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2220      	movs	r2, #32
 8008826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2220      	movs	r2, #32
 800882e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e00f      	b.n	800885e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	69da      	ldr	r2, [r3, #28]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	4013      	ands	r3, r2
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	429a      	cmp	r2, r3
 800884c:	bf0c      	ite	eq
 800884e:	2301      	moveq	r3, #1
 8008850:	2300      	movne	r3, #0
 8008852:	b2db      	uxtb	r3, r3
 8008854:	461a      	mov	r2, r3
 8008856:	79fb      	ldrb	r3, [r7, #7]
 8008858:	429a      	cmp	r2, r3
 800885a:	d08d      	beq.n	8008778 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008866:	b480      	push	{r7}
 8008868:	b085      	sub	sp, #20
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008874:	2b01      	cmp	r3, #1
 8008876:	d101      	bne.n	800887c <HAL_UARTEx_DisableFifoMode+0x16>
 8008878:	2302      	movs	r3, #2
 800887a:	e027      	b.n	80088cc <HAL_UARTEx_DisableFifoMode+0x66>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2224      	movs	r2, #36	; 0x24
 8008888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 0201 	bic.w	r2, r2, #1
 80088a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80088aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2220      	movs	r2, #32
 80088be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d101      	bne.n	80088f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088ec:	2302      	movs	r3, #2
 80088ee:	e02d      	b.n	800894c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2224      	movs	r2, #36	; 0x24
 80088fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 0201 	bic.w	r2, r2, #1
 8008916:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f84f 	bl	80089d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2220      	movs	r2, #32
 800893e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008964:	2b01      	cmp	r3, #1
 8008966:	d101      	bne.n	800896c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008968:	2302      	movs	r3, #2
 800896a:	e02d      	b.n	80089c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2224      	movs	r2, #36	; 0x24
 8008978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f022 0201 	bic.w	r2, r2, #1
 8008992:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f811 	bl	80089d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d108      	bne.n	80089f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089f0:	e031      	b.n	8008a56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089f2:	2310      	movs	r3, #16
 80089f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089f6:	2310      	movs	r3, #16
 80089f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	0e5b      	lsrs	r3, r3, #25
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	f003 0307 	and.w	r3, r3, #7
 8008a08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	0f5b      	lsrs	r3, r3, #29
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	f003 0307 	and.w	r3, r3, #7
 8008a18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	7b3a      	ldrb	r2, [r7, #12]
 8008a1e:	4911      	ldr	r1, [pc, #68]	; (8008a64 <UARTEx_SetNbDataToProcess+0x94>)
 8008a20:	5c8a      	ldrb	r2, [r1, r2]
 8008a22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a26:	7b3a      	ldrb	r2, [r7, #12]
 8008a28:	490f      	ldr	r1, [pc, #60]	; (8008a68 <UARTEx_SetNbDataToProcess+0x98>)
 8008a2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
 8008a3a:	7b7a      	ldrb	r2, [r7, #13]
 8008a3c:	4909      	ldr	r1, [pc, #36]	; (8008a64 <UARTEx_SetNbDataToProcess+0x94>)
 8008a3e:	5c8a      	ldrb	r2, [r1, r2]
 8008a40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a44:	7b7a      	ldrb	r2, [r7, #13]
 8008a46:	4908      	ldr	r1, [pc, #32]	; (8008a68 <UARTEx_SetNbDataToProcess+0x98>)
 8008a48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008a56:	bf00      	nop
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	08008b04 	.word	0x08008b04
 8008a68:	08008b0c 	.word	0x08008b0c

08008a6c <__libc_init_array>:
 8008a6c:	b570      	push	{r4, r5, r6, lr}
 8008a6e:	4d0d      	ldr	r5, [pc, #52]	; (8008aa4 <__libc_init_array+0x38>)
 8008a70:	4c0d      	ldr	r4, [pc, #52]	; (8008aa8 <__libc_init_array+0x3c>)
 8008a72:	1b64      	subs	r4, r4, r5
 8008a74:	10a4      	asrs	r4, r4, #2
 8008a76:	2600      	movs	r6, #0
 8008a78:	42a6      	cmp	r6, r4
 8008a7a:	d109      	bne.n	8008a90 <__libc_init_array+0x24>
 8008a7c:	4d0b      	ldr	r5, [pc, #44]	; (8008aac <__libc_init_array+0x40>)
 8008a7e:	4c0c      	ldr	r4, [pc, #48]	; (8008ab0 <__libc_init_array+0x44>)
 8008a80:	f000 f820 	bl	8008ac4 <_init>
 8008a84:	1b64      	subs	r4, r4, r5
 8008a86:	10a4      	asrs	r4, r4, #2
 8008a88:	2600      	movs	r6, #0
 8008a8a:	42a6      	cmp	r6, r4
 8008a8c:	d105      	bne.n	8008a9a <__libc_init_array+0x2e>
 8008a8e:	bd70      	pop	{r4, r5, r6, pc}
 8008a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a94:	4798      	blx	r3
 8008a96:	3601      	adds	r6, #1
 8008a98:	e7ee      	b.n	8008a78 <__libc_init_array+0xc>
 8008a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a9e:	4798      	blx	r3
 8008aa0:	3601      	adds	r6, #1
 8008aa2:	e7f2      	b.n	8008a8a <__libc_init_array+0x1e>
 8008aa4:	08008b1c 	.word	0x08008b1c
 8008aa8:	08008b1c 	.word	0x08008b1c
 8008aac:	08008b1c 	.word	0x08008b1c
 8008ab0:	08008b20 	.word	0x08008b20

08008ab4 <memset>:
 8008ab4:	4402      	add	r2, r0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d100      	bne.n	8008abe <memset+0xa>
 8008abc:	4770      	bx	lr
 8008abe:	f803 1b01 	strb.w	r1, [r3], #1
 8008ac2:	e7f9      	b.n	8008ab8 <memset+0x4>

08008ac4 <_init>:
 8008ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac6:	bf00      	nop
 8008ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aca:	bc08      	pop	{r3}
 8008acc:	469e      	mov	lr, r3
 8008ace:	4770      	bx	lr

08008ad0 <_fini>:
 8008ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad2:	bf00      	nop
 8008ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad6:	bc08      	pop	{r3}
 8008ad8:	469e      	mov	lr, r3
 8008ada:	4770      	bx	lr
